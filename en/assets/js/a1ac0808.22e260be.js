"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[697],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(t),m=i,y=p["".concat(d,".").concat(m)]||p[m]||c[m]||l;return t?a.createElement(y,r(r({ref:n},u),{},{components:t})):a.createElement(y,r({ref:n},u))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>r});var a=t(96540),i=t(20053);const l={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.A)(l.tabItem,r),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(58168),i=t(96540),l=t(20053),r=t(92303),o=t(31682),d=t(86976),s=t(23104);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:n,block:t,defaultValue:r,values:p,groupId:c,className:m}=e,y=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=p??y.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),h=(0,o.X)(v,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===r?r:r??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==k&&!v.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:g}=(0,d.x)(),[b,L]=(0,i.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:D}=(0,s.a_)();if(null!=c){const e=f[c];null!=e&&e!==b&&v.some((n=>n.value===e))&&L(e)}const C=e=>{const n=e.currentTarget,t=N.indexOf(n),a=v[t].value;a!==b&&(D(n),L(a),null!=c&&g(c,String(a)))},w=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}n?.focus()};return i.createElement("div",{className:(0,l.A)("tabs-container",u.tabList)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},m)},v.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.A)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:e=>N.push(e),onKeyDown:w,onFocus:C,onClick:C},r,{className:(0,l.A)("tabs__item",u.tabItem,r?.className,{"tabs__item--active":b===n})}),t??n)}))),n?(0,i.cloneElement)(y.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==b})))))}function c(e){const n=(0,r.A)();return i.createElement(p,(0,a.A)({key:String(n)},e))}},90175:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(58168),i=(t(96540),t(15680)),l=t(4865),r=t(19365);const o={title:"LRU Cache"},d=void 0,s={unversionedId:"linked-list/lru-cache",id:"linked-list/lru-cache",title:"LRU Cache",description:"\u63cf\u8ff0",source:"@site/docs/linked-list/lru-cache.md",sourceDirName:"linked-list",slug:"/linked-list/lru-cache",permalink:"/en/linked-list/lru-cache",draft:!1,tags:[],version:"current",frontMatter:{title:"LRU Cache"},sidebar:"docs",previous:{title:"Reorder List",permalink:"/en/linked-list/reorder-list"},next:{title:"LFU Cache",permalink:"/en/linked-list/lfu-cache"}},u={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],c={toc:p},m="wrapper";function y(e){let{components:n,...o}=e;return(0,i.yg)(m,(0,a.A)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,i.yg)("p",null,"Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"get(key)")," - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"set(key, value)")," - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item."),(0,i.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,i.yg)("p",null,"\u4e3a\u4e86\u4f7f\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u90fd\u6709\u8f83\u9ad8\u7684\u6027\u80fd\uff0c\u8fd9\u9898\u7684\u5173\u952e\u662f\u8981\u4f7f\u7528\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u548c\u4e00\u4e2a HashMap\uff0c\u56e0\u4e3a\uff1a"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"HashMap \u4fdd\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u57fa\u672c\u4fdd\u8bc1\u5728",(0,i.yg)("inlineCode",{parentName:"li"},"O(1)"),"\u65f6\u95f4\u5185\u67e5\u627e\u8282\u70b9"),(0,i.yg)("li",{parentName:"ul"},"\u53cc\u5411\u94fe\u8868\u80fd\u540e\u5728",(0,i.yg)("inlineCode",{parentName:"li"},"O(1)"),"\u65f6\u95f4\u5185\u6dfb\u52a0\u548c\u5220\u9664\u8282\u70b9\uff0c\u5355\u94fe\u8868\u5219\u4e0d\u884c")),(0,i.yg)("p",null,"\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\uff1a"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u8d8a\u9760\u8fd1\u94fe\u8868\u5934\u90e8\uff0c\u8868\u793a\u8282\u70b9\u4e0a\u6b21\u8bbf\u95ee\u8ddd\u79bb\u73b0\u5728\u65f6\u95f4\u6700\u77ed\uff0c\u5c3e\u90e8\u7684\u8282\u70b9\u8868\u793a\u6700\u8fd1\u8bbf\u95ee\u6700\u5c11"),(0,i.yg)("li",{parentName:"ul"},"\u8bbf\u95ee\u8282\u70b9\u65f6\uff0c\u5982\u679c\u8282\u70b9\u5b58\u5728\uff0c\u628a\u8be5\u8282\u70b9\u4ea4\u6362\u5230\u94fe\u8868\u5934\u90e8\uff0c\u540c\u65f6\u66f4\u65b0 hash \u8868\u4e2d\u8be5\u8282\u70b9\u7684\u5730\u5740"),(0,i.yg)("li",{parentName:"ul"},"\u63d2\u5165\u8282\u70b9\u65f6\uff0c\u5982\u679c cache \u7684 size \u8fbe\u5230\u4e86\u4e0a\u9650 capacity\uff0c\u5219\u5220\u9664\u5c3e\u90e8\u8282\u70b9\uff0c\u540c\u65f6\u8981\u5728 hash \u8868\u4e2d\u5220\u9664\u5bf9\u5e94\u7684\u9879\uff1b\u65b0\u8282\u70b9\u63d2\u5165\u94fe\u8868\u5934\u90e8")),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"LRU Cche",src:t(56852).A,width:"650",height:"296"})),(0,i.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,i.yg)("p",null,"C++\u7684",(0,i.yg)("inlineCode",{parentName:"p"},"std::list")," \u5c31\u662f\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u4e14\u5b83\u6709\u4e2a ",(0,i.yg)("inlineCode",{parentName:"p"},"splice()"),"\u65b9\u6cd5\uff0c",(0,i.yg)("inlineCode",{parentName:"p"},"O(1)"),"\u65f6\u95f4\uff0c\u975e\u5e38\u597d\u7528\u3002"),(0,i.yg)("p",null,"Java \u4e2d\u4e5f\u6709\u53cc\u5411\u94fe\u8868",(0,i.yg)("inlineCode",{parentName:"p"},"LinkedList"),", \u4f46\u662f ",(0,i.yg)("inlineCode",{parentName:"p"},"LinkedList")," \u5c01\u88c5\u7684\u592a\u6df1\uff0c\u6ca1\u6709\u80fd\u5728",(0,i.yg)("inlineCode",{parentName:"p"},"O(1)"),"\u65f6\u95f4\u5185\u5220\u9664\u4e2d\u95f4\u67d0\u4e2a\u5143\u7d20\u7684 API(C++\u7684",(0,i.yg)("inlineCode",{parentName:"p"},"list"),"\u6709\u4e2a",(0,i.yg)("inlineCode",{parentName:"p"},"splice()"),", O(1), \u6240\u4ee5\u672c\u9898 C++\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528",(0,i.yg)("inlineCode",{parentName:"p"},"splice()"),")\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u80fd\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u3002"),(0,i.yg)("p",null,"\u672c\u9898\u6709\u7684\u4eba\u76f4\u63a5\u7528 ",(0,i.yg)("inlineCode",{parentName:"p"},"LinkedHashMap")," \uff0c\u4ee3\u7801\u66f4\u77ed\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u5077\u61d2\u505a\u6cd5\uff0c\u9762\u8bd5\u5b98\u4e00\u5b9a\u4f1a\u8ba9\u4f60\u81ea\u5df1\u91cd\u65b0\u5b9e\u73b0\u3002"),(0,i.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,i.yg)(r.A,{value:"java",mdxType:"TabItem"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"// LRU Cache\n// HashMap + Doubly Linked List\npublic class LRUCache {\n    private int capacity;\n    private Map<Integer, DLinkedNode> m;\n    private DLinkedList list;\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        m = new HashMap<>();\n        list = new DLinkedList();\n    }\n\n    // Time Complexity: O(1)\n    public int get(int key) {\n        if (!m.containsKey(key)) return -1;\n        DLinkedNode node = m.get(key);\n        update(node);\n        return node.value;\n    }\n\n    // Time Complexity: O(1)\n    public void put(int key, int value) {\n        if (m.containsKey(key)){\n            DLinkedNode node = m.get(key);\n            node.value = value;\n            update(node);\n        } else {\n            DLinkedNode node = new DLinkedNode(key, value);\n            if (m.size() >= capacity){\n                DLinkedNode last = list.peekLast();\n                m.remove(last.key);\n                list.remove(last);\n            }\n\n            list.offerFirst(node);\n            m.put(key, node);\n        }\n    }\n\n    private void update(DLinkedNode node) {\n        list.remove(node);\n        list.offerFirst(node);\n    }\n\n\n    // Node of doubly linked list\n    static class DLinkedNode {\n        int key, value;\n        DLinkedNode prev, next;\n\n        DLinkedNode(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n    }\n\n    // Doubly linked list\n    static class DLinkedList {\n        DLinkedNode head, tail;\n        int size;\n\n        DLinkedList() {\n            // head and tail are two dummy nodes\n            head = new DLinkedNode(0, 0);\n            tail = new DLinkedNode(0, 0);\n            head.next = tail;\n            tail.prev = head;\n        }\n\n        // Add a new node at head\n        void offerFirst(DLinkedNode node) {\n            head.next.prev = node;\n            node.next = head.next;\n            node.prev = head;\n            head.next = node;\n            size++;\n        }\n\n        // Remove a node in the middle\n        void remove(DLinkedNode node) {\n            if (node == null) return;\n            node.prev.next = node.next;\n            node.next.prev = node.prev;\n            size--;\n        }\n\n        DLinkedNode peekLast() {\n            return tail.prev;\n        }\n    }\n}\n"))),(0,i.yg)(r.A,{value:"cpp",mdxType:"TabItem"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"// LRU Cache\nclass LRUCache{\nprivate:\n    // Node of doubly linked list\n    class DLinkedNode {\n    public:\n        int key, value;\n        DLinkedNode *prev=nullptr, *next=nullptr;\n\n        DLinkedNode(int key, int value) {\n            this->key = key;\n            this->value = value;\n        }\n    };\n\n    // Doubly linked list\n    class DLinkedList {\n    public:\n        DLinkedList() {\n            // head and tail are two dummy nodes\n            head = new DLinkedNode(0, 0);\n            tail = new DLinkedNode(0, 0);\n            head->next = tail;\n            tail->prev = head;\n        }\n\n        // Add a new node at head\n        void offerFirst(DLinkedNode *node) {\n            head->next->prev = node;\n            node->next = head->next;\n            node->prev = head;\n            head->next = node;\n            size++;\n        }\n\n        // Remove a node in the middle\n        void remove(DLinkedNode *node) {\n            if (node == nullptr) return;\n            node->prev->next = node->next;\n            node->next->prev = node->prev;\n            size--;\n        }\n\n        DLinkedNode* peekLast() {\n            return tail->prev;\n        }\n    private:\n        DLinkedNode *head, *tail;\n        int size;\n    };\n\npublic:\n    LRUCache(int capacity) {\n        this->capacity = capacity;\n    }\n\n    // Time Complexity: O(1)\n    int get(int key) {\n        if (m.find(key) == m.end()) return -1;\n        DLinkedNode *node = m[key];\n        update(node);\n        return node->value;\n    }\n\n    // Time Complexity: O(1)\n    void put(int key, int value) {\n        if (m.find(key) != m.end()){\n            DLinkedNode *node = m[key];\n            node->value = value;\n            update(node);\n        } else {\n            DLinkedNode *node = new DLinkedNode(key, value);\n            if (m.size() >= capacity){\n                DLinkedNode *last = list.peekLast();\n                m.erase(last->key);\n                list.remove(last);\n            }\n\n            list.offerFirst(node);\n            m[key] = node;\n        }\n    }\n\n    void update(DLinkedNode *node) {\n        list.remove(node);\n        list.offerFirst(node);\n    }\nprivate:\n    int capacity = 0;\n    unordered_map<int, DLinkedNode*> m;\n    DLinkedList list;\n};\n")))),(0,i.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/en/linked-list/lfu-cache"},"LFU Cache"))))}y.isMDXComponent=!0},56852:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/lru-cache-a6cb2698b18906d4a2ed6420c128a689.png"}}]);