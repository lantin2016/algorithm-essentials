"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7790],{15680:(n,e,t)=>{t.d(e,{xA:()=>s,yg:()=>g});var i=t(96540);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},a=Object.keys(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var m=i.createContext({}),o=function(n){var e=i.useContext(m),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},s=function(n){var e=o(n.components);return i.createElement(m.Provider,{value:e},n.children)},c="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},f=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,m=n.parentName,s=l(n,["components","mdxType","originalType","parentName"]),c=o(t),f=r,g=c["".concat(m,".").concat(f)]||c[f]||p[f]||a;return t?i.createElement(g,u(u({ref:e},s),{},{components:t})):i.createElement(g,u({ref:e},s))}));function g(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,u=new Array(a);u[0]=f;var l={};for(var m in e)hasOwnProperty.call(e,m)&&(l[m]=e[m]);l.originalType=n,l[c]="string"==typeof n?n:r,u[1]=l;for(var o=2;o<a;o++)u[o]=t[o];return i.createElement.apply(null,u)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},48240:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var i=t(58168),r=(t(96540),t(15680));const a={title:"Maximum Gap"},u=void 0,l={unversionedId:"sorting/radix-sort/maximum-gap",id:"sorting/radix-sort/maximum-gap",title:"Maximum Gap",description:"\u63cf\u8ff0",source:"@site/docs/sorting/radix-sort/maximum-gap.md",sourceDirName:"sorting/radix-sort",slug:"/sorting/radix-sort/maximum-gap",permalink:"/en/sorting/radix-sort/maximum-gap",draft:!1,tags:[],version:"current",frontMatter:{title:"Maximum Gap"},sidebar:"docs",previous:{title:"\u7b80\u4ecb",permalink:"/en/sorting/radix-sort/"},next:{title:"Meeting Rooms II",permalink:"/en/sorting/heap-sort/meeting-rooms-ii"}},m={},o=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u89e3\u6cd5 1 \u6876\u6392\u5e8f",id:"\u89e3\u6cd5-1-\u6876\u6392\u5e8f",level:3},{value:"\u89e3\u6cd5 2 \u57fa\u6570\u6392\u5e8f",id:"\u89e3\u6cd5-2-\u57fa\u6570\u6392\u5e8f",level:3},{value:"\u89e3\u6cd5 3 \u8ba1\u6570\u6392\u5e8f",id:"\u89e3\u6cd5-3-\u8ba1\u6570\u6392\u5e8f",level:3}],s={toc:o},c="wrapper";function p(n){let{components:e,...t}=n;return(0,r.yg)(c,(0,i.A)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"Given an unsorted array, find the maximum difference between the successive elements in its sorted form."),(0,r.yg)("p",null,"Try to solve it in linear time/space."),(0,r.yg)("p",null,"Return 0 if the array contains less than 2 elements."),(0,r.yg)("p",null,"You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range."),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u8fd9\u9053\u9898\u6700\u76f4\u63a5\u7684\u89e3\u6cd5\u662f\uff0c\u5148\u6392\u5e8f\uff0c\u5f97\u5230\u6709\u5e8f\u6570\u7ec4\uff0c\u7136\u540e\u76f8\u90bb\u5143\u7d20\u76f8\u51cf\uff0c\u627e\u51fa\u5dee\u6700\u5927\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6",(0,r.yg)("inlineCode",{parentName:"p"},"O(n log n)"),"\u3002"),(0,r.yg)("p",null,"\u7136\u800c\u672c\u9898\u8981\u6c42",(0,r.yg)("inlineCode",{parentName:"p"},"O(n)"),"\u65f6\u95f4\uff0c\u6709\u6ca1\u6709",(0,r.yg)("inlineCode",{parentName:"p"},"O(n)"),"\u7684\u6392\u5e8f\u7b97\u6cd5\u5462\uff1f\u6876\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3002"),(0,r.yg)("h3",{id:"\u89e3\u6cd5-1-\u6876\u6392\u5e8f"},"\u89e3\u6cd5 1 \u6876\u6392\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Maximum Gap\n// Bucket Sort\n// Time Complexity: O(n+k), Space Complexity: O(n+k)\npublic class Solution {\n    public int maximumGap(int[] nums) {\n        if (nums.length < 2) return 0;\n        bucketSort(nums);\n\n        int maxDiff = Integer.MIN_VALUE;\n        for (int i = 1; i < nums.length; ++i) {\n            maxDiff = Math.max(maxDiff, nums[i] - nums[i - 1]);\n        }\n        return maxDiff;\n    }\n\n    private static void bucketSort(int[] nums) {\n        if (nums.length < 2) return;\n        int minValue = Integer.MAX_VALUE;\n        int maxValue = Integer.MIN_VALUE;\n\n        for (int i : nums) {\n            minValue = Math.min(minValue, i);\n            maxValue = Math.max(maxValue, i);\n        }\n\n        final int bucketSize = (maxValue - minValue) / nums.length + 1;\n        final int bucketCount = (maxValue - minValue) / bucketSize + 1;\n        final ArrayList<Integer>[] buckets = new ArrayList[bucketCount];\n        for (int i = 0; i < buckets.length; ++i) {\n            buckets[i] = new ArrayList<>();\n        }\n\n        for (int x : nums) {\n            final int index = (x - minValue) / bucketSize;\n            buckets[index].add(x);\n        }\n\n        for (final ArrayList<Integer> list : buckets) {\n            Collections.sort(list);\n        }\n\n        int i = 0;\n        for (final ArrayList<Integer> list : buckets) {\n            for (int x : list) {\n                nums[i++] = x;\n            }\n        }\n    }\n}\n")),(0,r.yg)("h3",{id:"\u89e3\u6cd5-2-\u57fa\u6570\u6392\u5e8f"},"\u89e3\u6cd5 2 \u57fa\u6570\u6392\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Maximum Gap\n// Radix Sort\n// Time Complexity: O(nd), Space Complexity: O(n+d)\npublic class Solution {\n    public int maximumGap(int[] nums) {\n        if (nums.length < 2) return 0;\n        radixSort(nums);\n\n        int maxDiff = Integer.MIN_VALUE;\n        for (int i = 1; i < nums.length; ++i) {\n            maxDiff = Math.max(maxDiff, nums[i] - nums[i - 1]);\n        }\n        return maxDiff;\n    }\n    private static void radixSort(int[] nums) {\n        int minValue = Integer.MAX_VALUE;\n        int maxValue = Integer.MIN_VALUE;\n\n        for (int i : nums) {\n            minValue = Math.min(minValue, i);\n            maxValue = Math.max(maxValue, i);\n        }\n\n        final int D = Integer.toString(maxValue - minValue).length();\n        final ArrayList<Integer>[] buckets = new ArrayList[10];\n        for (int i = 0; i < buckets.length; ++i) {\n            buckets[i] = new ArrayList<>();\n        }\n\n        for (int i = 0; i < D; ++i) {\n            for (int x : nums) {\n                final int index = getDigit(x - minValue, i);\n                final ArrayList<Integer> bucket = buckets[index];\n                bucket.add(x);\n            }\n\n            int index = 0;\n            for (ArrayList<Integer> bucket : buckets) {\n                for (int x : bucket) {\n                    nums[index++] = x;\n                }\n                bucket.clear();\n            }\n        }\n    }\n\n    // get the i-th digit of n\n    private static int getDigit(int n, int i) {\n        for (int j = 0; j < i; ++j) {\n            n /= 10;\n        }\n        return n % 10;\n    }\n}\n")),(0,r.yg)("h3",{id:"\u89e3\u6cd5-3-\u8ba1\u6570\u6392\u5e8f"},"\u89e3\u6cd5 3 \u8ba1\u6570\u6392\u5e8f"),(0,r.yg)("p",null,"\u8ba1\u6570\u6392\u5e8f\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6876\u6392\u5e8f\uff0c\u5f53\u6876\u7684\u4e2a\u6570\u6700\u5927\u7684\u65f6\u5019\uff0c\u5c31\u662f\u8ba1\u6570\u6392\u5e8f\u3002"),(0,r.yg)("p",null,"\u672c\u9898\u7528\u8ba1\u6570\u6392\u5e8f\u4f1a MLE\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Maximum Gap\n// Counting Sort\n// Time Complexity: O(n), Space Complexity: O(max-min)\npublic class Solution {\n    public int maximumGap(int[] nums) {\n        if (nums.length < 2) return 0;\n        countingSort(nums);\n\n        int maxDiff = Integer.MIN_VALUE;\n        for (int i = 1; i < nums.length; ++i) {\n            maxDiff = Math.max(maxDiff, nums[i] - nums[i - 1]);\n        }\n        return maxDiff;\n    }\n    private static void countingSort(int[] nums) {\n        int minValue = Integer.MAX_VALUE;\n        int maxValue = Integer.MIN_VALUE;\n\n        for (int i : nums) {\n            minValue = Math.min(minValue, i);\n            maxValue = Math.max(maxValue, i);\n        }\n\n        final int[] buckets = new int[maxValue - minValue + 1];\n\n        for (int i : nums) {\n            buckets[i - minValue]++;\n        }\n\n        for (int i = 0, index = 0; i < buckets.length; ++i) {\n            Arrays.fill(nums, index, index + buckets[i], i + minValue);\n            index += buckets[i];\n        }\n    }\n}\n")))}p.isMDXComponent=!0}}]);