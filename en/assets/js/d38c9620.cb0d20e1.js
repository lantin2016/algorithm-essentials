"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2376],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>u});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),o=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=o(e.components);return t.createElement(p.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=o(a),c=r,u=d["".concat(p,".").concat(c)]||d[c]||y[c]||i;return a?t.createElement(u,l(l({ref:n},m),{},{components:a})):t.createElement(u,l({ref:n},m))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},19365:(e,n,a)=>{a.d(n,{A:()=>l});var t=a(96540),r=a(20053);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,l),hidden:a},n)}},4865:(e,n,a)=>{a.d(n,{A:()=>y});var t=a(58168),r=a(96540),i=a(20053),l=a(92303),s=a(31682),p=a(86976),o=a(23104);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function d(e){const{lazy:n,block:a,defaultValue:l,values:d,groupId:y,className:c}=e,u=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??u.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),N=(0,s.X)(g,((e,n)=>e.value===n.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===l?l:l??u.find((e=>e.props.default))?.props.value??u[0].props.value;if(null!==h&&!g.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:k}=(0,p.x)(),[b,A]=(0,r.useState)(h),v=[],{blockElementScrollPositionUntilNextRender:C}=(0,o.a_)();if(null!=y){const e=f[y];null!=e&&e!==b&&g.some((n=>n.value===e))&&A(e)}const w=e=>{const n=e.currentTarget,a=v.indexOf(n),t=g[a].value;t!==b&&(C(n),A(t),null!=y&&k(y,String(t)))},B=e=>{let n=null;switch(e.key){case"ArrowRight":{const a=v.indexOf(e.currentTarget)+1;n=v[a]??v[0];break}case"ArrowLeft":{const a=v.indexOf(e.currentTarget)-1;n=v[a]??v[v.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,i.A)("tabs-container",m.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},c)},g.map((e=>{let{value:n,label:a,attributes:l}=e;return r.createElement("li",(0,t.A)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:e=>v.push(e),onKeyDown:B,onFocus:w,onClick:w},l,{className:(0,i.A)("tabs__item",m.tabItem,l?.className,{"tabs__item--active":b===n})}),a??n)}))),n?(0,r.cloneElement)(u.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},u.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==b})))))}function y(e){const n=(0,l.A)();return r.createElement(d,(0,t.A)({key:String(n)},e))}},45687:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=a(58168),r=(a(96540),a(15680)),i=a(4865),l=a(19365);const s={title:"Median of Two Sorted Arrays"},p=void 0,o={unversionedId:"search/median-of-two-sorted-arrays",id:"search/median-of-two-sorted-arrays",title:"Median of Two Sorted Arrays",description:"\u63cf\u8ff0",source:"@site/docs/search/median-of-two-sorted-arrays.md",sourceDirName:"search",slug:"/search/median-of-two-sorted-arrays",permalink:"/en/search/median-of-two-sorted-arrays",draft:!1,tags:[],version:"current",frontMatter:{title:"Median of Two Sorted Arrays"},sidebar:"docs",previous:{title:"Find Minimum in Rotated Sorted Array II",permalink:"/en/search/find-minimum-in-rotated-sorted-array-ii"},next:{title:"H-Index II",permalink:"/en/search/h-index-ii"}},m={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],y={toc:d},c="wrapper";function u(e){let{components:n,...a}=e;return(0,r.yg)(c,(0,t.A)({},y,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"There are two sorted arrays ",(0,r.yg)("inlineCode",{parentName:"p"},"A")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"B")," of size ",(0,r.yg)("inlineCode",{parentName:"p"},"m")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"n")," respectively. Find the median of the two sorted arrays. The overall run time complexity should be ",(0,r.yg)("inlineCode",{parentName:"p"},"O(log (m+n))"),"."),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u8fd9\u662f\u4e00\u9053\u975e\u5e38\u7ecf\u5178\u7684\u9898\u3002\u8fd9\u9898\u66f4\u901a\u7528\u7684\u5f62\u5f0f\u662f\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u8005\u6240\u6709\u5143\u7d20\u4e2d\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5927\u7684\u5143\u7d20\u3002"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"O(m+n)"),"\u7684\u89e3\u6cd5\u6bd4\u8f83\u76f4\u89c2\uff0c\u76f4\u63a5 merge \u4e24\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u6c42\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5927\u7684\u5143\u7d20\u3002"),(0,r.yg)("p",null,"\u4e0d\u8fc7\u6211\u4eec\u4ec5\u4ec5\u9700\u8981\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5927\u7684\u5143\u7d20\uff0c\u662f\u4e0d\u9700\u8981\u201c\u6392\u5e8f\u201d\u8fd9\u4e48\u6602\u8d35\u7684\u64cd\u4f5c\u7684\u3002\u53ef\u4ee5\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u627e\u5230\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"m"),"\u5927\u7684\u5143\u7d20\u4e86\u3002\u540c\u65f6\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u6307\u9488",(0,r.yg)("inlineCode",{parentName:"p"},"pA"),"\u548c",(0,r.yg)("inlineCode",{parentName:"p"},"pB"),"\uff0c\u5206\u522b\u6307\u5411 A \u548c B \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4f7f\u7528\u7c7b\u4f3c\u4e8e merge sort \u7684\u539f\u7406\uff0c\u5982\u679c\u6570\u7ec4 A \u5f53\u524d\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48",(0,r.yg)("inlineCode",{parentName:"p"},"pA++"),"\uff0c\u540c\u65f6",(0,r.yg)("inlineCode",{parentName:"p"},"m++"),"\uff1b\u5982\u679c\u6570\u7ec4 B \u5f53\u524d\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48",(0,r.yg)("inlineCode",{parentName:"p"},"pB++"),"\uff0c\u540c\u65f6",(0,r.yg)("inlineCode",{parentName:"p"},"m++"),"\u3002\u6700\u7ec8\u5f53",(0,r.yg)("inlineCode",{parentName:"p"},"m"),"\u7b49\u4e8e",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u7684\u65f6\u5019\uff0c\u5c31\u5f97\u5230\u4e86\u6211\u4eec\u7684\u7b54\u6848\uff0c",(0,r.yg)("inlineCode",{parentName:"p"},"O(k)"),"\u65f6\u95f4\uff0c",(0,r.yg)("inlineCode",{parentName:"p"},"O(1)"),"\u7a7a\u95f4\u3002\u4f46\u662f\uff0c\u5f53",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5f88\u63a5\u8fd1",(0,r.yg)("inlineCode",{parentName:"p"},"m+n"),"\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u662f",(0,r.yg)("inlineCode",{parentName:"p"},"O(m+n)"),"\u7684\u3002"),(0,r.yg)("p",null,"\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6848\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5165\u624b\u3002\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u90fd\u80fd\u591f\u5220\u9664\u4e00\u4e2a\u4e00\u5b9a\u5728\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5927\u5143\u7d20\u4e4b\u524d\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u8fdb\u884c",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u6b21\u3002\u4f46\u662f\u5982\u679c\u6bcf\u6b21\u6211\u4eec\u90fd\u5220\u9664\u4e00\u534a\u5462\uff1f\u7531\u4e8e A \u548c B \u90fd\u662f\u6709\u5e8f\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u5145\u5206\u5229\u7528\u8fd9\u91cc\u9762\u7684\u4fe1\u606f\uff0c\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e\uff0c\u4e5f\u662f\u5145\u5206\u5229\u7528\u4e86\u201c\u6709\u5e8f\u201d\u3002"),(0,r.yg)("p",null,"\u5047\u8bbe A \u548c B \u7684\u5143\u7d20\u4e2a\u6570\u90fd\u5927\u4e8e",(0,r.yg)("inlineCode",{parentName:"p"},"k/2"),"\uff0c\u6211\u4eec\u5c06 A \u7684\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k/2"),"\u4e2a\u5143\u7d20\uff08\u5373",(0,r.yg)("inlineCode",{parentName:"p"},"A[k/2-1]"),"\uff09\u548c B \u7684\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k/2"),"\u4e2a\u5143\u7d20\uff08\u5373",(0,r.yg)("inlineCode",{parentName:"p"},"B[k/2-1]"),"\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff08\u4e3a\u4e86\u7b80\u5316\u8fd9\u91cc\u5148\u5047\u8bbe",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u4e3a\u5076\u6570\uff0c\u6240\u5f97\u5230\u7684\u7ed3\u8bba\u5bf9\u4e8e",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u662f\u5947\u6570\u4e5f\u662f\u6210\u7acb\u7684\uff09\uff1a"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"A[k/2-1] == B[k/2-1]")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"A[k/2-1] > B[k/2-1]")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"A[k/2-1] < B[k/2-1]"))),(0,r.yg)("p",null,"\u5982\u679c",(0,r.yg)("inlineCode",{parentName:"p"},"A[k/2-1] < B[k/2-1]"),"\uff0c\u610f\u5473\u7740",(0,r.yg)("inlineCode",{parentName:"p"},"A[0]"),"\u5230",(0,r.yg)("inlineCode",{parentName:"p"},"A[k/2-1]"),"\u7684\u80af\u5b9a\u5728",(0,r.yg)("span",{parentName:"p",className:"math math-inline"},(0,r.yg)("span",{parentName:"span",className:"katex"},(0,r.yg)("span",{parentName:"span",className:"katex-mathml"},(0,r.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.yg)("semantics",{parentName:"math"},(0,r.yg)("mrow",{parentName:"semantics"},(0,r.yg)("mi",{parentName:"mrow"},"A"),(0,r.yg)("mo",{parentName:"mrow"},"\u222a"),(0,r.yg)("mi",{parentName:"mrow"},"B")),(0,r.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A \\cup B")))),(0,r.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.yg)("span",{parentName:"span",className:"mbin"},"\u222a"),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B"))))),"\u7684 top k \u5143\u7d20\u7684\u8303\u56f4\u5185\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c",(0,r.yg)("inlineCode",{parentName:"p"},"A[k/2-1]"),"\u4e0d\u53ef\u80fd\u5927\u4e8e",(0,r.yg)("span",{parentName:"p",className:"math math-inline"},(0,r.yg)("span",{parentName:"span",className:"katex"},(0,r.yg)("span",{parentName:"span",className:"katex-mathml"},(0,r.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.yg)("semantics",{parentName:"math"},(0,r.yg)("mrow",{parentName:"semantics"},(0,r.yg)("mi",{parentName:"mrow"},"A"),(0,r.yg)("mo",{parentName:"mrow"},"\u222a"),(0,r.yg)("mi",{parentName:"mrow"},"B")),(0,r.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A \\cup B")))),(0,r.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.yg)("span",{parentName:"span",className:"mbin"},"\u222a"),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B"))))),"\u7684\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5927\u5143\u7d20\u3002\u7559\u7ed9\u8bfb\u8005\u8bc1\u660e\u3002"),(0,r.yg)("p",null,"\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u7684\u5220\u9664 A \u6570\u7ec4\u7684\u8fd9",(0,r.yg)("inlineCode",{parentName:"p"},"k/2"),"\u4e2a\u5143\u7d20\u3002\u540c\u7406\uff0c\u5f53",(0,r.yg)("inlineCode",{parentName:"p"},"A[k/2-1] > B[k/2-1]"),"\u65f6\uff0c\u53ef\u4ee5\u5220\u9664 B \u6570\u7ec4\u7684",(0,r.yg)("inlineCode",{parentName:"p"},"k/2"),"\u4e2a\u5143\u7d20\u3002"),(0,r.yg)("p",null,"\u5f53",(0,r.yg)("inlineCode",{parentName:"p"},"A[k/2-1] == B[k/2-1]"),"\u65f6\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u7b2c",(0,r.yg)("inlineCode",{parentName:"p"},"k"),"\u5927\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de",(0,r.yg)("inlineCode",{parentName:"p"},"A[k/2-1]"),"\u6216",(0,r.yg)("inlineCode",{parentName:"p"},"B[k/2-1]"),"\u5373\u53ef\u3002"),(0,r.yg)("p",null,"\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u3002\u90a3\u4e48\u51fd\u6570\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u7ec8\u6b62\u5462\uff1f"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u5f53 A \u6216 B \u662f\u7a7a\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de",(0,r.yg)("inlineCode",{parentName:"li"},"B[k-1]"),"\u6216",(0,r.yg)("inlineCode",{parentName:"li"},"A[k-1]"),"\uff1b"),(0,r.yg)("li",{parentName:"ul"},"\u5f53",(0,r.yg)("inlineCode",{parentName:"li"},"k=1"),"\u662f\uff0c\u8fd4\u56de",(0,r.yg)("inlineCode",{parentName:"li"},"min(A[0], B[0])"),"\uff1b"),(0,r.yg)("li",{parentName:"ul"},"\u5f53",(0,r.yg)("inlineCode",{parentName:"li"},"A[k/2-1] == B[k/2-1]"),"\u65f6\uff0c\u8fd4\u56de",(0,r.yg)("inlineCode",{parentName:"li"},"A[k/2-1]"),"\u6216",(0,r.yg)("inlineCode",{parentName:"li"},"B[k/2-1]"))),(0,r.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.yg)(i.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Median of Two Sorted Arrays\n// Time Complexity: O(log(m+n))\uff0cSpace Complexity: O(log(m+n))\npublic class Solution {\n    public double findMedianSortedArrays(final int[] A, final int[] B) {\n        int total = A.length + B.length;\n        if (total %2 == 1)\n            return findKth(A, 0, B, 0, total / 2 + 1);\n        else\n            return (findKth(A, 0, B, 0, total / 2)\n                    + findKth(A, 0, B, 0, total / 2 + 1)) / 2.0;\n    }\n\n    private static int findKth(final int[] A, int ai, final int[] B, int bi, int k) {\n        //always assume that A is shorter than B\n        if (A.length - ai > B.length - bi) {\n            return findKth(B, bi, A, ai, k);\n        }\n        if (A.length - ai == 0) return B[bi + k - 1];\n        if (k == 1) return Math.min(A[ai], B[bi]);\n\n        //divide k into two parts\n        int k1 = Math.min(k / 2, A.length - ai), k2 = k - k1;\n        if (A[ai + k1 - 1] < B[bi + k2 - 1])\n            return findKth(A, ai + k1, B, bi, k - k1);\n        else if (A[ai + k1 - 1] > B[bi + k2 - 1])\n            return findKth(A, ai, B, bi + k2, k - k2);\n        else\n            return A[ai + k1 - 1];\n    }\n};\n\n"))),(0,r.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Median of Two Sorted Arrays\n// Time Complexity: O(log(m+n))\uff0cSpace Complexity: O(log(m+n))\nclass Solution {\npublic:\n    double findMedianSortedArrays(const vector<int>& A, const vector<int>& B) {\n        int total = A.size() + B.size();\n        if (total %2 == 1)\n            return find_kth(A, 0, B, 0, total / 2 + 1);\n        else\n            return (find_kth(A, 0, B, 0, total / 2)\n                    + find_kth(A, 0, B, 0, total / 2 + 1)) / 2.0;\n    }\nprivate:\n    static int find_kth(const vector<int>& A, int ai, const vector<int>& B, int bi, int k) {\n        //always assume that A is shorter than B\n        if (A.size() - ai > B.size() - bi) {\n            return find_kth(B, bi, A, ai, k);\n        }\n        if (A.size() - ai == 0) return B[bi + k - 1];\n        if (k == 1) return min(A[ai], B[bi]);\n\n        //divide k into two parts\n        int k1 = min(k / 2, (int)A.size() - ai), k2 = k - k1;\n        if (A[ai + k1 - 1] < B[bi + k2 - 1])\n            return find_kth(A, ai + k1, B, bi, k - k1);\n        else if (A[ai + k1 - 1] > B[bi + k2 - 1])\n            return find_kth(A, ai, B, bi + k2, k - k2);\n        else\n            return A[ai + k1 - 1];\n    }\n};\n")))))}u.isMDXComponent=!0}}]);