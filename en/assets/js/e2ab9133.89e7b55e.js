"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3263],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>g});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=u(t),y=r,g=m["".concat(o,".").concat(y)]||m[y]||c[y]||i;return t?a.createElement(g,l(l({ref:n},s),{},{components:t})):a.createElement(g,l({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=y;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p[m]="string"==typeof e?e:r,l[1]=p;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},95294:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=t(58168),r=(t(96540),t(15680));const i={title:"Implement Stack using Queues"},l=void 0,p={unversionedId:"stack-and-queue/stack/implement-stack-using-queues",id:"stack-and-queue/stack/implement-stack-using-queues",title:"Implement Stack using Queues",description:"\u63cf\u8ff0",source:"@site/docs/stack-and-queue/stack/implement-stack-using-queues.md",sourceDirName:"stack-and-queue/stack",slug:"/stack-and-queue/stack/implement-stack-using-queues",permalink:"/en/stack-and-queue/stack/implement-stack-using-queues",draft:!1,tags:[],version:"current",frontMatter:{title:"Implement Stack using Queues"},sidebar:"docs",previous:{title:"Build Binary Expression Tree From Infix Expression",permalink:"/en/stack-and-queue/stack/build-binary-expression-tree-from-infix-expression"},next:{title:"Median of Data Stream",permalink:"/en/stack-and-queue/stack/median-of-data-stream"}},o={},u=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],s={toc:u},m="wrapper";function c(e){let{components:n,...t}=e;return(0,r.yg)(m,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"Implement the following operations of a stack using queues."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"push(x) -- Push element x onto stack."),(0,r.yg)("li",{parentName:"ul"},"pop() -- Removes the element on top of the stack."),(0,r.yg)("li",{parentName:"ul"},"top() -- Get the top element."),(0,r.yg)("li",{parentName:"ul"},"empty() -- Return whether the stack is empty.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Notes"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid."),(0,r.yg)("li",{parentName:"ul"},"Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue."),(0,r.yg)("li",{parentName:"ul"},"You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).")),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u53ef\u4ee5\u7528\u4e24\u4e2a\u961f\u5217\uff0c",(0,r.yg)("inlineCode",{parentName:"p"},"q"),"\u548c",(0,r.yg)("inlineCode",{parentName:"p"},"tmp"),"\uff0c",(0,r.yg)("inlineCode",{parentName:"p"},"q"),"\u5b58\u653e\u5143\u7d20\uff0c",(0,r.yg)("inlineCode",{parentName:"p"},"tmp"),"\u7528\u6765\u4f5c\u4e2d\u8f6c\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"push(x)"),"\uff0c\u5148\u5c06",(0,r.yg)("inlineCode",{parentName:"li"},"x")," push \u5230",(0,r.yg)("inlineCode",{parentName:"li"},"tmp"),"\uff0c\u7136\u540e\u628a",(0,r.yg)("inlineCode",{parentName:"li"},"q"),"\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u6765\uff0c\u5b58\u5165",(0,r.yg)("inlineCode",{parentName:"li"},"tmp"),"\uff0c\u6700\u540e\u5207\u6362",(0,r.yg)("inlineCode",{parentName:"li"},"q"),"\u548c",(0,r.yg)("inlineCode",{parentName:"li"},"tmp")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"pop()"),"\uff0c\u76f4\u63a5\u5c06",(0,r.yg)("inlineCode",{parentName:"li"},"q"),"\u7684\u961f\u9996\u5143\u7d20\u5f39\u51fa\u6765\u5373\u53ef")),(0,r.yg)("p",null,"\u8be5\u7b97\u6cd5",(0,r.yg)("inlineCode",{parentName:"p"},"push"),"\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f",(0,r.yg)("inlineCode",{parentName:"p"},"O(n)"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"pop"),"\u7684\u7b97\u6cd5\u590d\u6742\u5ea6",(0,r.yg)("inlineCode",{parentName:"p"},"O(1)"),"\u3002"),(0,r.yg)("p",null,"\u53e6\u4e2a\u4e00\u4e2a\u65b9\u6cd5\u662f\uff0c\u8ba9",(0,r.yg)("inlineCode",{parentName:"p"},"pop"),"\u662f",(0,r.yg)("inlineCode",{parentName:"p"},"O(n)"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"push"),"\u662f",(0,r.yg)("inlineCode",{parentName:"p"},"O(1)"),"\uff0c\u601d\u8def\u5f88\u7c7b\u4f3c\uff0c\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002"),(0,r.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Implement Stack using Queues\nclass MyStack {\n    // Push element x onto stack.\n    // Time Complexity O(n)\n    public void push(int x) {\n        tmp.offer(x);\n        while (!q.isEmpty()) {\n            final int e = q.poll();\n            tmp.offer(e);\n        }\n        // swap q and tmp\n        Queue<Integer> temp = tmp;\n        tmp = q;\n        q = temp;\n    }\n\n    // Removes the element on top of the stack.\n    // Time Complexity O(1)\n    public void pop() {\n        q.poll();\n    }\n\n    // Get the top element.\n    public int top() {\n        return q.peek();\n    }\n\n    // Return whether the stack is empty.\n    public boolean empty() {\n        return q.isEmpty();\n    }\n\n    private Queue<Integer> q = new LinkedList<>();\n    private Queue<Integer> tmp = new LinkedList<>();\n}\n")),(0,r.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/en/stack-and-queue/queue/implement-queue-using-stacks"},"Implement Queue using Stacks"))))}c.isMDXComponent=!0}}]);