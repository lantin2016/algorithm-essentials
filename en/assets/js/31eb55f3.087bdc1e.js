"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[8057],{15680:(e,r,n)=>{n.d(r,{xA:()=>p,yg:()=>b});var t=n(96540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),c=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=c(e.components);return t.createElement(u.Provider,{value:r},e.children)},s="mdxType",v={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=c(n),d=a,b=s["".concat(u,".").concat(d)]||s[d]||v[d]||l;return n?t.createElement(b,o(o({ref:r},p),{},{components:n})):t.createElement(b,o({ref:r},p))}));function b(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i[s]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19365:(e,r,n)=>{n.d(r,{A:()=>o});var t=n(96540),a=n(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:r,hidden:n,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,a.A)(l.tabItem,o),hidden:n},r)}},4865:(e,r,n)=>{n.d(r,{A:()=>v});var t=n(58168),a=n(96540),l=n(20053),o=n(92303),i=n(31682),u=n(86976),c=n(23104);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function s(e){const{lazy:r,block:n,defaultValue:o,values:s,groupId:v,className:d}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=s??b.map((e=>{let{props:{value:r,label:n,attributes:t}}=e;return{value:r,label:n,attributes:t}})),y=(0,i.X)(m,((e,r)=>e.value===r.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===o?o:o??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==f&&!m.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:h}=(0,u.x)(),[T,N]=(0,a.useState)(f),O=[],{blockElementScrollPositionUntilNextRender:w}=(0,c.a_)();if(null!=v){const e=g[v];null!=e&&e!==T&&m.some((r=>r.value===e))&&N(e)}const k=e=>{const r=e.currentTarget,n=O.indexOf(r),t=m[n].value;t!==T&&(w(r),N(t),null!=v&&h(v,String(t)))},j=e=>{let r=null;switch(e.key){case"ArrowRight":{const n=O.indexOf(e.currentTarget)+1;r=O[n]??O[0];break}case"ArrowLeft":{const n=O.indexOf(e.currentTarget)-1;r=O[n]??O[O.length-1];break}}r?.focus()};return a.createElement("div",{className:(0,l.A)("tabs-container",p.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},d)},m.map((e=>{let{value:r,label:n,attributes:o}=e;return a.createElement("li",(0,t.A)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:e=>O.push(e),onKeyDown:j,onFocus:k,onClick:k},o,{className:(0,l.A)("tabs__item",p.tabItem,o?.className,{"tabs__item--active":T===r})}),n??r)}))),r?(0,a.cloneElement)(b.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==T})))))}function v(e){const r=(0,o.A)();return a.createElement(s,(0,t.A)({key:String(r)},e))}},34670:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>u,default:()=>b,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var t=n(58168),a=(n(96540),n(15680)),l=n(4865),o=n(19365);const i={title:"Recover Binary Search Tree"},u=void 0,c={unversionedId:"binary-tree/traversal/recover-binary-search-tree",id:"binary-tree/traversal/recover-binary-search-tree",title:"Recover Binary Search Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/recover-binary-search-tree.md",sourceDirName:"binary-tree/traversal",slug:"/binary-tree/traversal/recover-binary-search-tree",permalink:"/en/binary-tree/traversal/recover-binary-search-tree",draft:!1,tags:[],version:"current",frontMatter:{title:"Recover Binary Search Tree"},sidebar:"docs",previous:{title:"Binary Search Tree Iterator",permalink:"/en/binary-tree/traversal/binary-search-tree-iterator"},next:{title:"Same Tree",permalink:"/en/binary-tree/traversal/same-tree"}},p={},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4e2d\u5e8f\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f",id:"\u4e2d\u5e8f\u904d\u5386\u9012\u5f52\u65b9\u5f0f",level:3},{value:"Morris \u4e2d\u5e8f\u904d\u5386",id:"morris-\u4e2d\u5e8f\u904d\u5386",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],v={toc:s},d="wrapper";function b(e){let{components:r,...n}=e;return(0,a.yg)(d,(0,t.A)({},v,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Two elements of a binary search tree (BST) are swapped by mistake."),(0,a.yg)("p",null,"Recover the tree without changing its structure."),(0,a.yg)("p",null,"Note: A solution using ",(0,a.yg)("inlineCode",{parentName:"p"},"O(n)")," space is pretty straight forward. Could you devise a constant space solution?"),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"O(logn)"),"\u7a7a\u95f4\u7684\u89e3\u6cd5\u662f\uff0c\u4e2d\u5e8f\u9012\u5f52\u904d\u5386\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u5b58\u653e\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u78b0\u5230\u7684\u4e24\u5904\u9006\u5411\u7684\u4f4d\u7f6e\u3002"),(0,a.yg)("p",null,"\u672c\u9898\u8981\u6c42",(0,a.yg)("inlineCode",{parentName:"p"},"O(1)"),"\u7a7a\u95f4\uff0c\u53ea\u80fd\u7528 Morris \u4e2d\u5e8f\u904d\u5386\u3002"),(0,a.yg)("h3",{id:"\u4e2d\u5e8f\u904d\u5386\u9012\u5f52\u65b9\u5f0f"},"\u4e2d\u5e8f\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f"),(0,a.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Recover Binary Search Tree\n// \u4e2d\u5e8f\u904d\u5386,\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\n// \u672c\u4ee3\u7801\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5e2e\u52a9\u7406\u89e3\u9898\u76ee\npublic class Solution {\n    private TreeNode p1 = null;\n    private TreeNode p2 = null;\n    private TreeNode prev = null;\n\n    public void recoverTree(TreeNode root) {\n        inOrder( root);\n        // swap\n        int tmp = p1.val;\n        p1.val = p2.val;\n        p2.val = tmp;\n    }\n\n    private void inOrder(TreeNode root) {\n        if ( root ==  null ) return;\n        if ( root.left != null ) inOrder(root.left);\n\n        if ( prev != null && root.val < prev.val ) {\n            if ( p1 == null) {\n                p1 = prev;\n                p2 = root;\n            } else {\n                p2 = root;\n            }\n        }\n        prev = root;\n        if ( root.right != null ) inOrder(root.right);\n    }\n}\n"))),(0,a.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Recover Binary Search Tree\n// \u4e2d\u5e8f\u904d\u5386,\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\n// \u672c\u4ee3\u7801\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5e2e\u52a9\u7406\u89e3\u9898\u76ee\nclass Solution {\npublic:\n    void recoverTree(TreeNode *root) {\n        inOrder( root);\n        swap(p1->val, p2->val);\n    }\nprivate:\n    void inOrder(TreeNode *root) {\n        if ( root ==  nullptr ) return;\n        if ( root->left != nullptr ) inOrder(root->left);\n\n        if ( prev != nullptr && root->val < prev->val ) {\n            if ( p1 == nullptr) {\n                p1 = prev;\n                p2 = root;\n            } else {\n                p2 = root;\n            }\n        }\n        prev = root;\n        if ( root->right != nullptr ) inOrder(root->right);\n    }\n    TreeNode *p1 = nullptr;\n    TreeNode *p2 = nullptr;\n    TreeNode *prev = nullptr;\n};\n")))),(0,a.yg)("h3",{id:"morris-\u4e2d\u5e8f\u904d\u5386"},"Morris \u4e2d\u5e8f\u904d\u5386"),(0,a.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Recover Binary Search Tree\n// Morris\u4e2d\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void recoverTree(TreeNode root) {\n        TreeNode[] broken = new TreeNode[2];\n        TreeNode prev = null;\n        TreeNode cur = root;\n\n        while (cur != null) {\n            if (cur.left == null) {\n                detect(broken, prev, cur);\n                prev = cur;\n                cur = cur.right;\n            } else {\n                TreeNode node = cur.left;\n\n                while (node.right != null && node.right != cur)\n                    node = node.right;\n\n                if (node.right == null) {\n                    node.right = cur;\n                    //prev = cur; \u4e0d\u80fd\u6709\u8fd9\u53e5\uff01\u56e0\u4e3acur\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n                    cur = cur.left;\n                } else {\n                    detect(broken, prev, cur);\n                    node.right = null;\n                    prev = cur;\n                    cur = cur.right;\n                }\n            }\n        }\n        // swap\n        int tmp = broken[0].val;\n        broken[0].val = broken[1].val;\n        broken[1].val = tmp;\n    }\n\n    void detect(TreeNode[] broken, TreeNode prev,\n                TreeNode current) {\n        if (prev != null && prev.val > current.val) {\n            if (broken[0] == null) {\n                broken[0] = prev;\n            } //\u4e0d\u80fd\u7528else\uff0c\u4f8b\u5982 {0,1}\uff0c\u4f1a\u5bfc\u81f4\u6700\u540e swap\u65f6second\u4e3anullptr\uff0c\n            //\u4f1a Runtime Error\n            broken[1] = current;\n        }\n    }\n}\n"))),(0,a.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Recover Binary Search Tree\n// Morris\u4e2d\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void recoverTree(TreeNode* root) {\n        pair<TreeNode*, TreeNode*> broken;\n        TreeNode* prev = nullptr;\n        TreeNode* cur = root;\n\n        while (cur != nullptr) {\n            if (cur->left == nullptr) {\n                detect(broken, prev, cur);\n                prev = cur;\n                cur = cur->right;\n            } else {\n                auto node = cur->left;\n\n                while (node->right != nullptr && node->right != cur)\n                    node = node->right;\n\n                if (node->right == nullptr) {\n                    node->right = cur;\n                    //prev = cur; \u4e0d\u80fd\u6709\u8fd9\u53e5\uff01\u56e0\u4e3acur\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n                    cur = cur->left;\n                } else {\n                    detect(broken, prev, cur);\n                    node->right = nullptr;\n                    prev = cur;\n                    cur = cur->right;\n                }\n            }\n        }\n\n        swap(broken.first->val, broken.second->val);\n    }\n\n    void detect(pair<TreeNode*, TreeNode*>& broken, TreeNode* prev,\n            TreeNode* current) {\n        if (prev != nullptr && prev->val > current->val) {\n            if (broken.first == nullptr) {\n                broken.first = prev;\n            } //\u4e0d\u80fd\u7528else\uff0c\u4f8b\u5982 {0,1}\uff0c\u4f1a\u5bfc\u81f4\u6700\u540e swap\u65f6second\u4e3anullptr\uff0c\n              //\u4f1a Runtime Error\n            broken.second = current;\n        }\n    }\n};\n")))),(0,a.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/en/binary-tree/traversal/binary-tree-inorder-traversal"},"Binary Tree Inorder Traversal"))))}b.isMDXComponent=!0}}]);