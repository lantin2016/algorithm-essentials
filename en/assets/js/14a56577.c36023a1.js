"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1843],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>v});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,v=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return n?r.createElement(v,l(l({ref:t},u),{},{components:n})):r.createElement(v,l({ref:t},u))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19365:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(96540),a=n(20053);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,l),hidden:n},t)}},4865:(e,t,n)=>{n.d(t,{A:()=>p});var r=n(58168),a=n(96540),o=n(20053),l=n(92303),i=n(31682),s=n(86976),d=n(23104);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function c(e){const{lazy:t,block:n,defaultValue:l,values:c,groupId:p,className:m}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??v.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),b=(0,i.X)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===l?l:l??v.find((e=>e.props.default))?.props.value??v[0].props.value;if(null!==h&&!y.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:T}=(0,s.x)(),[g,N]=(0,a.useState)(h),w=[],{blockElementScrollPositionUntilNextRender:S}=(0,d.a_)();if(null!=p){const e=f[p];null!=e&&e!==g&&y.some((t=>t.value===e))&&N(e)}const L=e=>{const t=e.currentTarget,n=w.indexOf(t),r=y[n].value;r!==g&&(S(t),N(r),null!=p&&T(p,String(r)))},x=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,o.A)("tabs-container",u.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},m)},y.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,key:t,ref:e=>w.push(e),onKeyDown:x,onFocus:L,onClick:L},l,{className:(0,o.A)("tabs__item",u.tabItem,l?.className,{"tabs__item--active":g===t})}),n??t)}))),t?(0,a.cloneElement)(v.filter((e=>e.props.value===g))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==g})))))}function p(e){const t=(0,l.A)();return a.createElement(c,(0,r.A)({key:String(t)},e))}},57503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>v,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=n(58168),a=(n(96540),n(15680)),o=n(4865),l=n(19365);const i={title:"Convert Sorted List to Binary Search Tree"},s=void 0,d={unversionedId:"binary-tree/bst/convert-sorted-list-to-binary-search-tree",id:"binary-tree/bst/convert-sorted-list-to-binary-search-tree",title:"Convert Sorted List to Binary Search Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/bst/convert-sorted-list-to-binary-search-tree.md",sourceDirName:"binary-tree/bst",slug:"/binary-tree/bst/convert-sorted-list-to-binary-search-tree",permalink:"/en/binary-tree/bst/convert-sorted-list-to-binary-search-tree",draft:!1,tags:[],version:"current",frontMatter:{title:"Convert Sorted List to Binary Search Tree"},sidebar:"docs",previous:{title:"Convert Sorted Array to Binary Search Tree",permalink:"/en/binary-tree/bst/convert-sorted-array-to-binary-search-tree"},next:{title:"LCA of BST",permalink:"/en/binary-tree/bst/lca-of-bst"}},u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b",id:"\u5206\u6cbb\u6cd5\u81ea\u9876\u5411\u4e0b",level:3},{value:"\u81ea\u5e95\u5411\u4e0a",id:"\u81ea\u5e95\u5411\u4e0a",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:c},m="wrapper";function v(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST."),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u8fd9\u9898\u4e0e\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u4f46\u662f\u5355\u94fe\u8868\u4e0d\u80fd\u968f\u673a\u8bbf\u95ee\uff0c\u800c\u81ea\u9876\u5411\u4e0b\u7684\u4e8c\u5206\u6cd5\u5fc5\u987b\u9700\u8981 RandomAccessIterator\uff0c\u56e0\u6b64\u524d\u9762\u7684\u65b9\u6cd5\u4e0d\u9002\u7528\u672c\u9898\u3002"),(0,a.yg)("p",null,"\u5b58\u5728\u4e00\u79cd\u81ea\u5e95\u5411\u4e0a(bottom-up)\u7684\u65b9\u6cd5\uff0c\u89c1 ",(0,a.yg)("a",{parentName:"p",href:"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html"},"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html")),(0,a.yg)("h3",{id:"\u5206\u6cbb\u6cd5\u81ea\u9876\u5411\u4e0b"},"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b"),(0,a.yg)("p",null,"\u5206\u6cbb\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\u81ea\u9876\u5411\u4e0b\uff0c\u590d\u6742\u5ea6 ",(0,a.yg)("inlineCode",{parentName:"p"},"O(nlogn)"),"\u3002"),(0,a.yg)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\n    public TreeNode sortedListToBST (ListNode head) {\n        if(head == null) return null;\n        if(head.next == null) return new TreeNode(head.val);\n\n        ListNode mid = cutAtMiddle(head);\n\n        TreeNode root = new TreeNode(mid.val);\n        root.left = sortedListToBST(head);\n        root.right = sortedListToBST(mid.next);\n\n        return root;\n    }\n\n    ListNode cutAtMiddle(ListNode head) {\n        if(head == null) return null;\n\n        ListNode fast = head;\n        ListNode slow = head;\n        ListNode prev_slow = head;\n\n        while(fast != null && fast.next != null){\n            prev_slow = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        prev_slow.next = null;\n        return slow;\n    }\n}\n"))),(0,a.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode* sortedListToBST (ListNode* head) {\n        if(head == nullptr) return nullptr;\n        if(head->next == nullptr) return new TreeNode(head->val);\n\n        ListNode *mid = cutAtMiddle(head);\n\n        TreeNode *root = new TreeNode(mid->val);\n        root->left = sortedListToBST(head);\n        root->right = sortedListToBST(mid->next);\n\n        return root;\n    }\n\n    ListNode* cutAtMiddle(ListNode *head) {\n        if(head == nullptr) return nullptr;\n\n        ListNode *fast = head;\n        ListNode *slow = head;\n        ListNode *prev_slow = head;\n\n        while(fast != nullptr && fast->next != nullptr){\n            prev_slow = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        prev_slow->next = nullptr;\n        return slow;\n    }\n};\n")))),(0,a.yg)("h3",{id:"\u81ea\u5e95\u5411\u4e0a"},"\u81ea\u5e95\u5411\u4e0a"),(0,a.yg)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        int len = 0;\n        ListNode p = head;\n        while (p != null) {\n            len++;\n            p = p.next;\n        }\n        return sortedListToBST(new Container(head), 0, len - 1);\n    }\n    private static TreeNode sortedListToBST(Container list, int start, int end) {\n        if (start > end) return null;\n\n        int mid = start + (end - start) / 2;\n        TreeNode leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode parent = new TreeNode(list.p.val);\n        parent.left = leftChild;\n        list.p = list.p.next;\n        parent.right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n    // \u6a21\u62df\u4e8c\u7ea7\u6307\u9488\n    static class Container {\n        ListNode p;\n        public Container(ListNode p) {\n            this.p = p;\n        }\n    }\n}\n"))),(0,a.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode *sortedListToBST(ListNode *head) {\n        int len = 0;\n        ListNode *p = head;\n        while (p) {\n            len++;\n            p = p->next;\n        }\n        return sortedListToBST(head, 0, len - 1);\n    }\nprivate:\n    TreeNode* sortedListToBST(ListNode*& list, int start, int end) {\n        if (start > end) return nullptr;\n\n        int mid = start + (end - start) / 2;\n        TreeNode *leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode *parent = new TreeNode(list->val);\n        parent->left = leftChild;\n        list = list->next;\n        parent->right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n};\n")))),(0,a.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/en/binary-tree/bst/convert-sorted-array-to-binary-search-tree"},"Convert Sorted Array to Binary Search Tree"))))}v.isMDXComponent=!0}}]);