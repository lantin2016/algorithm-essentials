"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[5749],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(t),g=a,m=p["".concat(u,".").concat(g)]||p[g]||d[g]||o;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(96540),a=t(20053);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,l),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>d});var r=t(58168),a=t(96540),o=t(20053),l=t(92303),i=t(31682),u=t(86976),s=t(23104);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:n,block:t,defaultValue:l,values:p,groupId:d,className:g}=e,m=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=p??m.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),b=(0,i.X)(y,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===l?l:l??m.find((e=>e.props.default))?.props.value??m[0].props.value;if(null!==h&&!y.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,u.x)(),[N,x]=(0,a.useState)(h),T=[],{blockElementScrollPositionUntilNextRender:L}=(0,s.a_)();if(null!=d){const e=f[d];null!=e&&e!==N&&y.some((n=>n.value===e))&&x(e)}const O=e=>{const n=e.currentTarget,t=T.indexOf(n),r=y[t].value;r!==N&&(L(n),x(r),null!=d&&v(d,String(r)))},k=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,o.A)("tabs-container",c.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},g)},y.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>T.push(e),onKeyDown:k,onFocus:O,onClick:O},l,{className:(0,o.A)("tabs__item",c.tabItem,l?.className,{"tabs__item--active":N===n})}),t??n)}))),n?(0,a.cloneElement)(m.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},m.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function d(e){const n=(0,l.A)();return a.createElement(p,(0,r.A)({key:String(n)},e))}},10390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(58168),a=(t(96540),t(15680)),o=t(4865),l=t(19365);const i={title:"Populating Next Right Pointers in Each Node"},u=void 0,s={unversionedId:"binary-tree/recursion/populating-next-right-pointers-in-each-node",id:"binary-tree/recursion/populating-next-right-pointers-in-each-node",title:"Populating Next Right Pointers in Each Node",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/populating-next-right-pointers-in-each-node.md",sourceDirName:"binary-tree/recursion",slug:"/binary-tree/recursion/populating-next-right-pointers-in-each-node",permalink:"/en/binary-tree/recursion/populating-next-right-pointers-in-each-node",draft:!1,tags:[],version:"current",frontMatter:{title:"Populating Next Right Pointers in Each Node"},sidebar:"docs",previous:{title:"Binary Tree Maximum Path Sum",permalink:"/en/binary-tree/recursion/binary-tree-maximum-path-sum"},next:{title:"Sum Root to Leaf Numbers",permalink:"/en/binary-tree/recursion/sum-root-to-leaf-numbers"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:p},g="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Given a binary tree"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"struct TreeLinkNode {\n   int val;\n   TreeLinkNode *left, *right, *next;\n   TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n};\n")),(0,a.yg)("p",null,"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ",(0,a.yg)("inlineCode",{parentName:"p"},"NULL"),"."),(0,a.yg)("p",null,"Initially, all next pointers are set to ",(0,a.yg)("inlineCode",{parentName:"p"},"NULL"),"."),(0,a.yg)("p",null,"Note:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"You may only use constant extra space."),(0,a.yg)("li",{parentName:"ul"},"You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).")),(0,a.yg)("p",null,"For example,"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"         1\n       /  \\\n      2    3\n     / \\  / \\\n    4  5  6  7\n")),(0,a.yg)("p",null,"After calling your function, the tree should look like:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"         1 -> NULL\n       /  \\\n      2 -> 3 -> NULL\n     / \\  / \\\n    4->5->6->7 -> NULL\n")),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u65e0"),(0,a.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.yg)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Populating Next Right Pointers in Each Node\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        connect(root, null);\n    }\n    private static void connect(TreeLinkNode root, TreeLinkNode sibling) {\n        if (root == null) return;\n        else root.next = sibling;\n\n        connect(root.left, root.right);\n        if (sibling != null) connect(root.right, sibling.left);\n        else connect(root.right, null);\n    }\n}\n"))),(0,a.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Populating Next Right Pointers in Each Node\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        connect(root, NULL);\n    }\nprivate:\n    void connect(TreeLinkNode *root, TreeLinkNode *sibling) {\n        if (root == nullptr)\n            return;\n        else\n            root->next = sibling;\n\n        connect(root->left, root->right);\n        if (sibling)\n            connect(root->right, sibling->left);\n        else\n            connect(root->right, nullptr);\n    }\n};\n")))),(0,a.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/en/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii"},"Populating Next Right Pointers in Each Node II"))))}m.isMDXComponent=!0}}]);