"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2841],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var r=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=i,g=p["".concat(u,".").concat(m)]||p[m]||c[m]||a;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},86800:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(58168),i=(t(96540),t(15680));const a={title:"Additive Number"},o=void 0,l={unversionedId:"dfs/additive-number",id:"dfs/additive-number",title:"Additive Number",description:"\u63cf\u8ff0",source:"@site/docs/dfs/additive-number.md",sourceDirName:"dfs",slug:"/dfs/additive-number",permalink:"/en/dfs/additive-number",draft:!1,tags:[],version:"current",frontMatter:{title:"Additive Number"},sidebar:"docs",previous:{title:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/en/dfs/"},next:{title:"Palindrome Partitioning",permalink:"/en/dfs/palindrome-partitioning"}},u={},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],d={toc:s},p="wrapper";function c(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,i.yg)("p",null,"Additive number is a string whose digits can form additive sequence."),(0,i.yg)("p",null,"A valid additive sequence should contain ",(0,i.yg)("strong",{parentName:"p"},"at least")," three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two."),(0,i.yg)("p",null,"For example:"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},'"112358"')," is an additive number because the digits can form an additive sequence: ",(0,i.yg)("inlineCode",{parentName:"p"},"1, 1, 2, 3, 5, 8"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},'"199100199"')," is also an additive number, the additive sequence is: ",(0,i.yg)("inlineCode",{parentName:"p"},"1, 99, 100, 199"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"1 + 99 = 100, 99 + 100 = 199\n")),(0,i.yg)("p",null,"Note: Numbers in the additive sequence cannot have leading zeros, so sequence ",(0,i.yg)("inlineCode",{parentName:"p"},"1, 2, 03")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"1, 02, 3")," is invalid."),(0,i.yg)("p",null,"Given a string containing only digits ",(0,i.yg)("inlineCode",{parentName:"p"},"'0'-'9'"),", write a function to determine if it's an additive number."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Follow up"),":"),(0,i.yg)("p",null,"How would you handle overflow for very large input integers?"),(0,i.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,i.yg)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u591a\u9636\u6bb5\u51b3\u7b56\u95ee\u9898\uff0c\u4e14\u5fc5\u987b\u8d70\u5230\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u624d\u80fd\u5f97\u51fa\u7ed3\u8bba\uff0c\u56e0\u6b64\u9002\u5408\u7528\u6df1\u641c\u6216DP\u3002"),(0,i.yg)("p",null,"\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\u72b6\u6001\u8f6c\u6362\u56fe\uff0c\u6bcf\u6b21\u7d22\u5f15\u53d8\u5316\u4e00\u4e0b\uff0c\u5c31\u8ddf\u4e4b\u524d\u7684\u5b8c\u5168\u6ca1\u6709\u91cd\u590d\uff0c\u56e0\u6b64\u72b6\u6001\u8f6c\u6362\u56fe\u662f\u4e00\u9897\u6811\uff0c\u4e0d\u662fDAG\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u56e0\u6b64\u6392\u9664DP\uff0c\u672c\u9898\u5e94\u8be5\u7528\u6df1\u641c\u3002"),(0,i.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"// Additive Number\n// \u591a\u5165\u53e3\u6df1\u641c\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^3)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public boolean isAdditiveNumber(String num) {\n        for (int i = 1; i <= num.length() / 2; ++i) {\n            if (num.charAt(0) == '0' && i > 1) continue;\n            for (int j = i + 1; j < num.length(); ++j) {\n                if (num.charAt(i) == '0' && j - i > 1) continue;\n                if (dfs(num, 0, i, j)) return true;\n            }\n        }\n        return false;\n    }\n\n    // \u5224\u65ad\u4ece [i, j) \u548c [j, k) \u51fa\u53d1,\u80fd\u5426\u8d70\u5230\u5c3d\u5934\n    private static boolean dfs(String num, int i, int j, int k) {\n        long num1 = Long.parseLong(num.substring(i, j));\n        long num2 = Long.parseLong(num.substring(j, k));\n        final String addition = String.valueOf(num1 + num2);\n\n        if (!num.substring(k).startsWith(addition)) return false;\n        if (k + addition.length() == num.length()) return true;\n        return dfs(num, j, k, k + addition.length());\n    }\n}\n")))}c.isMDXComponent=!0}}]);