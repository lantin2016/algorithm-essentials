"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1212],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>f});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=s(r),d=a,f=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u[p]="string"==typeof e?e:a,l[1]=u;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},19365:(e,t,r)=>{r.d(t,{A:()=>l});var n=r(96540),a=r(20053);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:r,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,l),hidden:r},t)}},4865:(e,t,r)=>{r.d(t,{A:()=>m});var n=r(58168),a=r(96540),o=r(20053),l=r(92303),u=r(31682),i=r(86976),s=r(23104);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:t,block:r,defaultValue:l,values:p,groupId:m,className:d}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=p??f.map((e=>{let{props:{value:t,label:r,attributes:n}}=e;return{value:t,label:r,attributes:n}})),y=(0,u.X)(b,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===l?l:l??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:h}=(0,i.x)(),[N,O]=(0,a.useState)(g),T=[],{blockElementScrollPositionUntilNextRender:w}=(0,s.a_)();if(null!=m){const e=v[m];null!=e&&e!==N&&b.some((t=>t.value===e))&&O(e)}const E=e=>{const t=e.currentTarget,r=T.indexOf(t),n=b[r].value;n!==N&&(w(t),O(n),null!=m&&h(m,String(n)))},x=e=>{let t=null;switch(e.key){case"ArrowRight":{const r=T.indexOf(e.currentTarget)+1;t=T[r]??T[0];break}case"ArrowLeft":{const r=T.indexOf(e.currentTarget)-1;t=T[r]??T[T.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,o.A)("tabs-container",c.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":r},d)},b.map((e=>{let{value:t,label:r,attributes:l}=e;return a.createElement("li",(0,n.A)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:x,onFocus:E,onClick:E},l,{className:(0,o.A)("tabs__item",c.tabItem,l?.className,{"tabs__item--active":N===t})}),r??t)}))),t?(0,a.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,l.A)();return a.createElement(p,(0,n.A)({key:String(t)},e))}},34516:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>u,metadata:()=>s,toc:()=>p});var n=r(58168),a=(r(96540),r(15680)),o=r(4865),l=r(19365);const u={title:"Sum Root to Leaf Numbers"},i=void 0,s={unversionedId:"binary-tree/recursion/sum-root-to-leaf-numbers",id:"binary-tree/recursion/sum-root-to-leaf-numbers",title:"Sum Root to Leaf Numbers",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/sum-root-to-leaf-numbers.md",sourceDirName:"binary-tree/recursion",slug:"/binary-tree/recursion/sum-root-to-leaf-numbers",permalink:"/en/binary-tree/recursion/sum-root-to-leaf-numbers",draft:!1,tags:[],version:"current",frontMatter:{title:"Sum Root to Leaf Numbers"},sidebar:"docs",previous:{title:"Populating Next Right Pointers in Each Node",permalink:"/en/binary-tree/recursion/populating-next-right-pointers-in-each-node"},next:{title:"Lowest Common Ancestor of a Binary Tree",permalink:"/en/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],m={toc:p},d="wrapper";function f(e){let{components:t,...r}=e;return(0,a.yg)(d,(0,n.A)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Given a binary tree containing digits from ",(0,a.yg)("inlineCode",{parentName:"p"},"0-9")," only, each root-to-leaf path could represent a number."),(0,a.yg)("p",null,"An example is the root-to-leaf path ",(0,a.yg)("inlineCode",{parentName:"p"},"1->2->3")," which represents the number ",(0,a.yg)("inlineCode",{parentName:"p"},"123"),"."),(0,a.yg)("p",null,"Find the total sum of all root-to-leaf numbers."),(0,a.yg)("p",null,"For example,"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"    1\n   / \\\n  2   3\n")),(0,a.yg)("p",null,"The root-to-leaf path ",(0,a.yg)("inlineCode",{parentName:"p"},"1->2")," represents the number ",(0,a.yg)("inlineCode",{parentName:"p"},"12"),".\nThe root-to-leaf path ",(0,a.yg)("inlineCode",{parentName:"p"},"1->3")," represents the number ",(0,a.yg)("inlineCode",{parentName:"p"},"13"),"."),(0,a.yg)("p",null,"Return the sum = ",(0,a.yg)("inlineCode",{parentName:"p"},"12 + 13 = 25"),"."),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u65e0"),(0,a.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.yg)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Sum root to leaf numbers\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public int sumNumbers(TreeNode root) {\n        return dfs(root, 0);\n    }\n    private static int dfs(TreeNode root, int sum) {\n        if (root == null) return 0;\n        if (root.left == null && root.right == null)\n            return sum * 10 + root.val;\n\n        return dfs(root.left, sum * 10 + root.val) +\n                dfs(root.right, sum * 10 + root.val);\n    }\n}\n"))),(0,a.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Sum root to leaf numbers\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    int sumNumbers(TreeNode *root) {\n        return dfs(root, 0);\n    }\nprivate:\n    int dfs(TreeNode *root, int sum) {\n        if (root == nullptr) return 0;\n        if (root->left == nullptr && root->right == nullptr)\n            return sum * 10 + root->val;\n\n        return dfs(root->left, sum * 10 + root->val) +\n                dfs(root->right, sum * 10 + root->val);\n    }\n};\n")))))}f.isMDXComponent=!0}}]);