"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7065],{15680:(e,n,r)=>{r.d(n,{xA:()=>u,yg:()=>b});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(r),f=a,b=c["".concat(s,".").concat(f)]||c[f]||p[f]||o;return r?t.createElement(b,i(i({ref:n},u),{},{components:r})):t.createElement(b,i({ref:n},u))}));function b(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},19365:(e,n,r)=>{r.d(n,{A:()=>i});var t=r(96540),a=r(20053);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:r,className:i}=e;return t.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,i),hidden:r},n)}},4865:(e,n,r)=>{r.d(n,{A:()=>p});var t=r(58168),a=r(96540),o=r(20053),i=r(92303),l=r(31682),s=r(86976),d=r(23104);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function c(e){const{lazy:n,block:r,defaultValue:i,values:c,groupId:p,className:f}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=c??b.map((e=>{let{props:{value:n,label:r,attributes:t}}=e;return{value:n,label:r,attributes:t}})),v=(0,l.X)(m,((e,n)=>e.value===n.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==y&&!m.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:h}=(0,s.x)(),[x,w]=(0,a.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:j}=(0,d.a_)();if(null!=p){const e=g[p];null!=e&&e!==x&&m.some((n=>n.value===e))&&w(e)}const E=e=>{const n=e.currentTarget,r=O.indexOf(n),t=m[r].value;t!==x&&(j(n),w(t),null!=p&&h(p,String(t)))},T=e=>{let n=null;switch(e.key){case"ArrowRight":{const r=O.indexOf(e.currentTarget)+1;n=O[r]??O[0];break}case"ArrowLeft":{const r=O.indexOf(e.currentTarget)-1;n=O[r]??O[O.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,o.A)("tabs-container",u.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":r},f)},m.map((e=>{let{value:n,label:r,attributes:i}=e;return a.createElement("li",(0,t.A)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>O.push(e),onKeyDown:T,onFocus:E,onClick:E},i,{className:(0,o.A)("tabs__item",u.tabItem,i?.className,{"tabs__item--active":x===n})}),r??n)}))),n?(0,a.cloneElement)(b.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function p(e){const n=(0,i.A)();return a.createElement(c,(0,t.A)({key:String(n)},e))}},96601:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var t=r(58168),a=(r(96540),r(15680)),o=r(4865),i=r(19365);const l={title:"Word Search"},s=void 0,d={unversionedId:"dfs/word-search",id:"dfs/word-search",title:"Word Search",description:"\u63cf\u8ff0",source:"@site/docs/dfs/word-search.md",sourceDirName:"dfs",slug:"/dfs/word-search",permalink:"/en/dfs/word-search",draft:!1,tags:[],version:"current",frontMatter:{title:"Word Search"},sidebar:"docs",previous:{title:"Sudoku Solver",permalink:"/en/dfs/sudoku-solver"},next:{title:"Android Unlock Patterns",permalink:"/en/dfs/android-unlock-patterns"}},u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],p={toc:c},f="wrapper";function b(e){let{components:n,...r}=e;return(0,a.yg)(f,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Given a 2D board and a word, find if the word exists in the grid."),(0,a.yg)("p",null,"The word can be constructed from letters of sequentially adjacent cell, where ",(0,a.yg)("inlineCode",{parentName:"p"},'"adjacent"')," cells are those horizontally or vertically neighbouring. The same letter cell may not be used more than once."),(0,a.yg)("p",null,"For example,\nGiven board ="),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'[\n  ["ABCE"],\n  ["SFCS"],\n  ["ADEE"]\n]\n')),(0,a.yg)("p",null,"word = ",(0,a.yg)("inlineCode",{parentName:"p"},'"ABCCED"'),", -> returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),","),(0,a.yg)("p",null,"word = ",(0,a.yg)("inlineCode",{parentName:"p"},'"SEE"'),", -> returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),","),(0,a.yg)("p",null,"word = ",(0,a.yg)("inlineCode",{parentName:"p"},'"ABCB"'),", -> returns ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u65e0\u3002"),(0,a.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.yg)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Word Search\n// \u6df1\u641c\uff0c\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^2*m^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n^2)\npublic class Solution {\n    public boolean exist(char[][] board, String word) {\n        final int m = board.length;\n        final int n = board[0].length;\n        boolean[][] visited = new boolean[m][n];\n        for (int i = 0; i < m; ++i)\n            for (int j = 0; j < n; ++j)\n                if (dfs(board, word, 0, i, j, visited))\n                    return true;\n        return false;\n    }\n    private static boolean dfs(char[][] board, String word,\n                    int index, int x, int y, boolean[][] visited) {\n        if (index == word.length())\n            return true; // \u6536\u655b\u6761\u4ef6\n\n        if (x < 0 || y < 0 || x >= board.length || y >= board[0].length)\n            return false;  // \u8d8a\u754c\uff0c\u7ec8\u6b62\u6761\u4ef6\n\n        if (visited[x][y]) return false; // \u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u526a\u679d\n\n        if (board[x][y] != word.charAt(index)) return false; // \u4e0d\u76f8\u7b49\uff0c\u526a\u679d\n\n        visited[x][y] = true;\n        boolean ret = dfs(board, word, index + 1, x - 1, y, visited) || // \u4e0a\n                dfs(board, word, index + 1, x + 1, y, visited)    || // \u4e0b\n                dfs(board, word, index + 1, x, y - 1, visited)    || // \u5de6\n                dfs(board, word, index + 1, x, y + 1, visited);      // \u53f3\n        visited[x][y] = false;\n        return ret;\n    }\n}\n"))),(0,a.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Word Search\n// \u6df1\u641c\uff0c\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^2*m^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n^2)\nclass Solution {\npublic:\n    bool exist(const vector<vector<char> > &board, const string& word) {\n        const int m = board.size();\n        const int n = board[0].size();\n        vector<vector<bool> > visited(m, vector<bool>(n, false));\n        for (int i = 0; i < m; ++i)\n            for (int j = 0; j < n; ++j)\n                if (dfs(board, word, 0, i, j, visited))\n                    return true;\n        return false;\n    }\nprivate:\n    static bool dfs(const vector<vector<char> > &board, const string &word,\n            int index, int x, int y, vector<vector<bool> > &visited) {\n        if (index == word.size())\n            return true; // \u6536\u655b\u6761\u4ef6\n\n        if (x < 0 || y < 0 || x >= board.size() || y >= board[0].size())\n            return false;  // \u8d8a\u754c\uff0c\u7ec8\u6b62\u6761\u4ef6\n\n        if (visited[x][y]) return false; // \u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u526a\u679d\n\n        if (board[x][y] != word[index]) return false; // \u4e0d\u76f8\u7b49\uff0c\u526a\u679d\n\n        visited[x][y] = true;\n        bool ret = dfs(board, word, index + 1, x - 1, y, visited) || // \u4e0a\n                dfs(board, word, index + 1, x + 1, y, visited)    || // \u4e0b\n                dfs(board, word, index + 1, x, y - 1, visited)    || // \u5de6\n                dfs(board, word, index + 1, x, y + 1, visited);      // \u53f3\n        visited[x][y] = false;\n        return ret;\n    }\n};\n")))))}b.isMDXComponent=!0}}]);