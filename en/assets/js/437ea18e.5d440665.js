"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2295],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(t),v=a,m=d["".concat(u,".").concat(v)]||d[v]||c[v]||l;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=v;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>o});var r=t(96540),a=t(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(l.tabItem,o),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>c});var r=t(58168),a=t(96540),l=t(20053),o=t(92303),i=t(31682),u=t(86976),s=t(23104);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function d(e){const{lazy:n,block:t,defaultValue:o,values:d,groupId:c,className:v}=e,m=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??m.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),y=(0,i.X)(g,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===o?o:o??m.find((e=>e.props.default))?.props.value??m[0].props.value;if(null!==f&&!g.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:x}=(0,u.x)(),[b,N]=(0,a.useState)(f),k=[],{blockElementScrollPositionUntilNextRender:w}=(0,s.a_)();if(null!=c){const e=h[c];null!=e&&e!==b&&g.some((n=>n.value===e))&&N(e)}const _=e=>{const n=e.currentTarget,t=k.indexOf(n),r=g[t].value;r!==b&&(w(n),N(r),null!=c&&x(c,String(r)))},L=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=k.indexOf(e.currentTarget)+1;n=k[t]??k[0];break}case"ArrowLeft":{const t=k.indexOf(e.currentTarget)-1;n=k[t]??k[k.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,l.A)("tabs-container",p.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},v)},g.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:e=>k.push(e),onKeyDown:L,onFocus:_,onClick:_},o,{className:(0,l.A)("tabs__item",p.tabItem,o?.className,{"tabs__item--active":b===n})}),t??n)}))),n?(0,a.cloneElement)(m.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},m.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==b})))))}function c(e){const n=(0,o.A)();return a.createElement(d,(0,r.A)({key:String(n)},e))}},57989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(58168),a=(t(96540),t(15680)),l=t(4865),o=t(19365);const i={title:"Reverse Nodes in k-Group"},u=void 0,s={unversionedId:"linked-list/reverse-nodes-in-k-group",id:"linked-list/reverse-nodes-in-k-group",title:"Reverse Nodes in k-Group",description:"\u63cf\u8ff0",source:"@site/docs/linked-list/reverse-nodes-in-k-group.md",sourceDirName:"linked-list",slug:"/linked-list/reverse-nodes-in-k-group",permalink:"/en/linked-list/reverse-nodes-in-k-group",draft:!1,tags:[],version:"current",frontMatter:{title:"Reverse Nodes in k-Group"},sidebar:"docs",previous:{title:"Swap Nodes in Pairs",permalink:"/en/linked-list/swap-nodes-in-pairs"},next:{title:"Copy List with Random Pointer",permalink:"/en/linked-list/copy-list-with-random-pointer"}},p={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u9012\u5f52\u7248",id:"\u9012\u5f52\u7248",level:3},{value:"\u8fed\u4ee3\u7248",id:"\u8fed\u4ee3\u7248",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],c={toc:d},v="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(v,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Given a linked list, reverse the nodes of a linked list k at a time and return its modified list."),(0,a.yg)("p",null,"If the number of nodes is not a multiple of ",(0,a.yg)("inlineCode",{parentName:"p"},"k")," then left-out nodes in the end should remain as it is."),(0,a.yg)("p",null,"You may not alter the values in the nodes, only nodes itself may be changed."),(0,a.yg)("p",null,"Only constant memory is allowed."),(0,a.yg)("p",null,"For example,\nGiven this linked list: ",(0,a.yg)("inlineCode",{parentName:"p"},"1->2->3->4->5")),(0,a.yg)("p",null,"For ",(0,a.yg)("inlineCode",{parentName:"p"},"k = 2"),", you should return: ",(0,a.yg)("inlineCode",{parentName:"p"},"2->1->4->3->5")),(0,a.yg)("p",null,"For ",(0,a.yg)("inlineCode",{parentName:"p"},"k = 3"),", you should return: ",(0,a.yg)("inlineCode",{parentName:"p"},"3->2->1->4->5")),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u65e0"),(0,a.yg)("h3",{id:"\u9012\u5f52\u7248"},"\u9012\u5f52\u7248"),(0,a.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"\n// Reverse Nodes in k-Group\n// \u9012\u5f52\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        if (head == null || head.next == null || k < 2)\n            return head;\n\n        ListNode next_group = head;\n        for (int i = 0; i < k; ++i) {\n            if (next_group != null)\n                next_group = next_group.next;\n            else\n                return head;\n        }\n        // next_group is the head of next group\n        // new_next_group is the new head of next group after reversion\n        ListNode new_next_group = reverseKGroup(next_group, k);\n        ListNode prev = null, cur = head;\n        while (cur != next_group) {\n            ListNode next = cur.next;\n            cur.next = prev != null ? prev : new_next_group;\n            prev = cur;\n            cur = next;\n        }\n        return prev; // prev will be the new head of this group\n    }\n}\n"))),(0,a.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Reverse Nodes in k-Group\n// \u9012\u5f52\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    ListNode *reverseKGroup(ListNode *head, int k) {\n        if (head == nullptr || head->next == nullptr || k < 2)\n            return head;\n\n        ListNode *next_group = head;\n        for (int i = 0; i < k; ++i) {\n            if (next_group)\n                next_group = next_group->next;\n            else\n                return head;\n        }\n        // next_group is the head of next group\n        // new_next_group is the new head of next group after reversion\n        ListNode *new_next_group = reverseKGroup(next_group, k);\n        ListNode *prev = NULL, *cur = head;\n        while (cur != next_group) {\n            ListNode *next = cur->next;\n            cur->next = prev ? prev : new_next_group;\n            prev = cur;\n            cur = next;\n        }\n        return prev; // prev will be the new head of this group\n    }\n};\n")))),(0,a.yg)("h3",{id:"\u8fed\u4ee3\u7248"},"\u8fed\u4ee3\u7248"),(0,a.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Reverse Nodes in k-Group\n// \u8fed\u4ee3\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        if (head == null || head.next == null || k < 2) return head;\n        ListNode dummy = new ListNode(-1);\n        dummy.next = head;\n\n        for(ListNode prev = dummy, end = head; end != null; end = prev.next) {\n            for (int i = 1; i < k && end != null; i++)\n                end = end.next;\n            if (end  == null) break;  // \u4e0d\u8db3 k \u4e2a\n\n            prev = reverse(prev, prev.next, end);\n        }\n\n        return dummy.next;\n    }\n\n    // prev \u662f first \u524d\u4e00\u4e2a\u5143\u7d20, [begin, end] \u95ed\u533a\u95f4\uff0c\u4fdd\u8bc1\u4e09\u8005\u90fd\u4e0d\u4e3a null\n    // \u8fd4\u56de\u53cd\u8f6c\u540e\u7684\u5012\u6570\u7b2c1\u4e2a\u5143\u7d20\n    ListNode reverse(ListNode prev, ListNode begin, ListNode end) {\n        ListNode end_next = end.next;\n        for (ListNode p = begin, cur = p.next, next = cur.next;\n                cur != end_next;\n                p = cur, cur = next, next = next != null ? next.next : null) {\n            cur.next = p;\n        }\n        begin.next = end_next;\n        prev.next = end;\n        return begin;\n    }\n};\n"))),(0,a.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Reverse Nodes in k-Group\n// \u8fed\u4ee3\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    ListNode *reverseKGroup(ListNode *head, int k) {\n        if (head == nullptr || head->next == nullptr || k < 2) return head;\n        ListNode dummy(-1);\n        dummy.next = head;\n\n        for(ListNode *prev = &dummy, *end = head; end; end = prev->next) {\n            for (int i = 1; i < k && end; i++)\n                end = end->next;\n            if (end  == nullptr) break;  // \u4e0d\u8db3 k \u4e2a\n\n            prev = reverse(prev, prev->next, end);\n        }\n\n        return dummy.next;\n    }\n\n    // prev \u662f first \u524d\u4e00\u4e2a\u5143\u7d20, [begin, end] \u95ed\u533a\u95f4\uff0c\u4fdd\u8bc1\u4e09\u8005\u90fd\u4e0d\u4e3a null\n    // \u8fd4\u56de\u53cd\u8f6c\u540e\u7684\u5012\u6570\u7b2c1\u4e2a\u5143\u7d20\n    ListNode* reverse(ListNode *prev, ListNode *begin, ListNode *end) {\n        ListNode *end_next = end->next;\n        for (ListNode *p = begin, *cur = p->next, *next = cur->next;\n                cur != end_next;\n                p = cur, cur = next, next = next ? next->next : nullptr) {\n            cur->next = p;\n        }\n        begin->next = end_next;\n        prev->next = end;\n        return begin;\n    }\n};\n")))),(0,a.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/en/linked-list/swap-nodes-in-pairs"},"Swap Nodes in Pairs"))))}m.isMDXComponent=!0}}]);