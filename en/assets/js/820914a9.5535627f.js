"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2473],{15680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>d});var n=t(96540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,d=u["".concat(c,".").concat(m)]||u[m]||y[m]||i;return t?n.createElement(d,o(o({ref:r},p),{},{components:t})):n.createElement(d,o({ref:r},p))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},74244:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=t(58168),a=(t(96540),t(15680));const i={title:"Binary Search Tree Iterator"},o=void 0,l={unversionedId:"binary-tree/traversal/binary-search-tree-iterator",id:"binary-tree/traversal/binary-search-tree-iterator",title:"Binary Search Tree Iterator",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/binary-search-tree-iterator.md",sourceDirName:"binary-tree/traversal",slug:"/binary-tree/traversal/binary-search-tree-iterator",permalink:"/en/binary-tree/traversal/binary-search-tree-iterator",draft:!1,tags:[],version:"current",frontMatter:{title:"Binary Search Tree Iterator"},sidebar:"docs",previous:{title:"Invert Binary Tree",permalink:"/en/binary-tree/traversal/invert-binary-tree"},next:{title:"Recover Binary Search Tree",permalink:"/en/binary-tree/traversal/recover-binary-search-tree"}},c={},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],p={toc:s},u="wrapper";function y(e){let{components:r,...t}=e;return(0,a.yg)(u,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST."),(0,a.yg)("p",null,"Calling ",(0,a.yg)("inlineCode",{parentName:"p"},"next()")," will return the next smallest number in the BST."),(0,a.yg)("p",null,"Note: ",(0,a.yg)("inlineCode",{parentName:"p"},"next()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"hasNext()")," should run in average ",(0,a.yg)("inlineCode",{parentName:"p"},"O(1)")," time and uses ",(0,a.yg)("inlineCode",{parentName:"p"},"O(h)")," memory, where h is the height of the tree."),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u8003\u5bdf\u975e\u9012\u5f52\u7684\u4e2d\u5e8f\u904d\u5386\u3002\u8fd9\u9053\u9898\u672c\u8d28\u4e0a\u662f\u5199\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u8fed\u4ee3\u5668\u3002\u5185\u90e8\u8bbe\u7f6e\u4e00\u4e2a\u6808\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5b58\u50a8\u4ece\u6839\u8282\u70b9\u5230\u6700\u5de6\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u4f5c\u4e3a\u5f53\u524d\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u540c\u65f6\u63a2\u6d4b\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u662f\u5426\u5b58\u5728\u53f3\u5b69\u5b50\uff0c\u5982\u679c\u6709\uff0c\u5219\u8fdb\u5165\u53f3\u5b69\u5b50\uff0c\u5e76\u628a\u4ece\u8be5\u53f3\u5b69\u5b50\u5230\u6700\u5de6\u53f6\u5b50\u8282\u70b9\u7684\u6240\u6709\u8282\u70b9\u5165\u6808\u3002"),(0,a.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Binary Search Tree Iterator\npublic class BSTIterator {\n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        while (root != null) {\n            stack.push(root);\n            root = root.left;\n        }\n    }\n\n    /** @return whether we have a next smallest number */\n    public boolean hasNext() {\n        return !stack.isEmpty();\n    }\n\n    /** @return the next smallest number */\n    public int next() {\n        final TreeNode node = stack.pop();\n        if (node.right != null) {\n            TreeNode p = node.right;\n            while (p != null) {\n                stack.push(p);\n                p = p.left;\n            }\n\n        }\n        return node.val;\n    }\n    private Stack<TreeNode> stack;\n}\n")))}y.isMDXComponent=!0}}]);