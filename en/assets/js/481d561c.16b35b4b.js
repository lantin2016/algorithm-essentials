"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[4537],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),o=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=o(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},b=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=o(t),b=r,d=p["".concat(c,".").concat(b)]||p[b]||m[b]||s;return t?a.createElement(d,i(i({ref:n},u),{},{components:t})):a.createElement(d,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var o=2;o<s;o++)i[o]=t[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>i});var a=t(96540),r=t(20053);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>m});var a=t(58168),r=t(96540),s=t(20053),i=t(92303),l=t(31682),c=t(86976),o=t(23104);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:n,block:t,defaultValue:i,values:p,groupId:m,className:b}=e,d=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??d.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,l.X)(f,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===i?i:i??d.find((e=>e.props.default))?.props.value??d[0].props.value;if(null!==h&&!f.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:g}=(0,c.x)(),[k,w]=(0,r.useState)(h),I=[],{blockElementScrollPositionUntilNextRender:x}=(0,o.a_)();if(null!=m){const e=v[m];null!=e&&e!==k&&f.some((n=>n.value===e))&&w(e)}const O=e=>{const n=e.currentTarget,t=I.indexOf(n),a=f[t].value;a!==k&&(x(n),w(a),null!=m&&g(m,String(a)))},N=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;n=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;n=I[t]??I[I.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,s.A)("tabs-container",u.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},b)},f.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>I.push(e),onKeyDown:N,onFocus:O,onClick:O},i,{className:(0,s.A)("tabs__item",u.tabItem,i?.className,{"tabs__item--active":k===n})}),t??n)}))),n?(0,r.cloneElement)(d.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},d.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function m(e){const n=(0,i.A)();return r.createElement(p,(0,a.A)({key:String(n)},e))}},23931:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(58168),r=(t(96540),t(15680)),s=t(4865),i=t(19365);const l={title:"Basic Calculator III"},c=void 0,o={unversionedId:"stack-and-queue/stack/basic-calculator-iii",id:"stack-and-queue/stack/basic-calculator-iii",title:"Basic Calculator III",description:"\u63cf\u8ff0",source:"@site/docs/stack-and-queue/stack/basic-calculator-iii.md",sourceDirName:"stack-and-queue/stack",slug:"/stack-and-queue/stack/basic-calculator-iii",permalink:"/en/stack-and-queue/stack/basic-calculator-iii",draft:!1,tags:[],version:"current",frontMatter:{title:"Basic Calculator III"},sidebar:"docs",previous:{title:"Basic Calculator II",permalink:"/en/stack-and-queue/stack/basic-calculator-ii"},next:{title:"Build Binary Expression Tree From Infix Expression",permalink:"/en/stack-and-queue/stack/build-binary-expression-tree-from-infix-expression"}},u={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],m={toc:p},b="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(b,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"TODO"),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u8fd9\u9053\u9898\u662f\u524d\u97622\u9053\u9898\u7684\u7efc\u5408\u4f53\uff0c\u65e2\u6709\u4e58\u9664\u53c8\u6709\u62ec\u53f7\u3002\u6700\u7ecf\u5178\u7684\u505a\u6cd5\u662f\u7528\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u6570\u5b57\u6808\uff0c\u4e00\u4e2a\u64cd\u4f5c\u7b26\u6808\u3002"),(0,r.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.yg)(s.A,{defaultValue:"cpp",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Basic Calculator III\npublic class Solution {\n    private static Map < Character, Integer > priority = new HashMap < > () {\n        {\n            put('(', 1);\n            put('+', 2);\n            put('-', 2);\n            put('*', 3);\n            put('/', 3);\n        }\n    };\n\n    public int calculate(String s) {\n        final int N = s.length();\n        Stack < Integer > nums = new Stack < > ();\n        Stack < Character > ops = new Stack < > ();\n        for (int i = 0; i < N; i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                int num = 0;\n                while (i < N && Character.isDigit(s.charAt(i))) {\n                    num = num * 10 + (s.charAt(i++) - '0');\n                }\n                nums.push(num);\n                i--;\n            } else if (c == '(') {\n                ops.push(c);\n            } else if (c == ')') {\n                while (ops.peek() != '(') {\n                    calc(nums, ops);\n                }\n                ops.pop(); // pop '('\n            } else if (c == '+' || c == '-' || c == '*' || c == '/') {\n                while (!ops.isEmpty() && priority.get(ops.peek()) >= priority.get(c)) {\n                    calc(nums, ops);\n                }\n                ops.push(c);\n            } else {\n                // c == ' ', do nothing\n            }\n        }\n        while (!ops.isEmpty()) {\n            calc(nums, ops);\n        }\n        return nums.pop();\n    }\n\n    private static void calc(Stack < Integer > nums, Stack < Character > ops) {\n        int b = nums.pop(), a = nums.pop();\n        int result = 0;\n        switch (ops.pop()) {\n            case '+':\n                result = a + b;\n                break;\n            case '-':\n                result = a - b;\n                break;\n            case '*':\n                result = a * b;\n                break;\n            case '/':\n                result = a / b;\n                break;\n        }\n        nums.push(result);\n    }\n}\n"))),(0,r.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Basic Calculator III\nclass Solution {\npublic:\n    int calculate(const string &s) {\n        const int N = s.length();\n        stack<int> nums;\n        stack<char> ops;\n        for (int i = 0; i < N; i++) {\n            const char c = s[i];\n            if (isdigit(c)) {\n                int num = 0;\n                while (i < N && isdigit(s[i])) {\n                    num = num * 10 + (s[i++] - '0');\n                }\n                nums.push(num);\n                i--;\n            } else if (c == '(') {\n                ops.push(c);\n            } else if (c == ')') {\n                while (ops.top() != '(') {\n                    calc(nums, ops);\n                }\n                ops.pop(); // pop '('\n            } else if (c == '+' || c == '-' || c == '*' || c == '/') {\n                while (!ops.empty() && priority[ops.top()] >= priority[c]) {\n                    calc(nums, ops);\n                }\n                ops.push(c);\n            } else {\n                // c == ' ', do nothing\n            }\n        }\n        while (!ops.empty()) {\n            calc(nums, ops);\n        }\n        return nums.top();\n    }\nprivate:\n    void calc(stack<int> &nums, stack<char> &ops) {\n        int b = nums.top(); nums.pop();\n        int a = nums.top(); nums.pop();\n        int result = 0;\n        int op = ops.top(); ops.pop();\n        switch (op) {\n            case '+':\n                result = a + b;\n                break;\n            case '-':\n                result = a - b;\n                break;\n            case '*':\n                result = a * b;\n                break;\n            case '/':\n                result = a / b;\n                break;\n        }\n        nums.push(result);\n    }\nprivate:\n    unordered_map<char, int> priority = {{'(', 1}, {'+', 2}, {'-', 2},{'*', 3}, {'/', 3}};\n};\n")))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/en/stack-and-queue/stack/basic-calculator"},"Basic Calculator")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/en/stack-and-queue/stack/basic-calculator-ii"},"Basic Calculator II")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/en/stack-and-queue/stack/build-binary-expression-tree-from-infix-expression"},"Build Binary Expression Tree From Infix Expression"))))}d.isMDXComponent=!0}}]);