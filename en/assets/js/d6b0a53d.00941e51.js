"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7596],{15680:(e,r,n)=>{n.d(r,{xA:()=>c,yg:()=>g});var t=n(96540);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},c=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,g=p["".concat(s,".").concat(d)]||p[d]||y[d]||a;return n?t.createElement(g,l(l({ref:r},c),{},{components:n})):t.createElement(g,l({ref:r},c))}));function g(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32045:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var t=n(58168),i=(n(96540),n(15680));const a={title:"Binary Tree Right Side View"},l=void 0,o={unversionedId:"binary-tree/traversal/binary-tree-right-side-view",id:"binary-tree/traversal/binary-tree-right-side-view",title:"Binary Tree Right Side View",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/binary-tree-right-side-view.md",sourceDirName:"binary-tree/traversal",slug:"/binary-tree/traversal/binary-tree-right-side-view",permalink:"/en/binary-tree/traversal/binary-tree-right-side-view",draft:!1,tags:[],version:"current",frontMatter:{title:"Binary Tree Right Side View"},sidebar:"docs",previous:{title:"Binary Tree Postorder Traversal",permalink:"/en/binary-tree/traversal/binary-tree-postorder-traversal"},next:{title:"Invert Binary Tree",permalink:"/en/binary-tree/traversal/invert-binary-tree"}},s={},u=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],c={toc:u},p="wrapper";function y(e){let{components:r,...n}=e;return(0,i.yg)(p,(0,t.A)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,i.yg)("p",null,"Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom."),(0,i.yg)("p",null,"For example, given the following binary tree,"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"   1            <---\n /   \\\n2     3         <---\n \\     \\\n  5     4       <---\n")),(0,i.yg)("p",null,"You should return ",(0,i.yg)("inlineCode",{parentName:"p"},"[1, 3, 4]"),"."),(0,i.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,i.yg)("p",null,"\u5c42\u6b21\u904d\u5386\u3002"),(0,i.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"// Binary Tree Right Side View\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        Queue<TreeNode> current = new LinkedList<>();\n        Queue<TreeNode> next = new LinkedList<>();\n\n        if(root == null) {\n            return result;\n        } else {\n            current.offer(root);\n        }\n\n        while (!current.isEmpty()) {\n            ArrayList<Integer> level = new ArrayList<>(); // elments in one level\n            while (!current.isEmpty()) {\n                TreeNode node = current.poll();\n                level.add(node.val);\n                if (node.left != null) next.add(node.left);\n                if (node.right != null) next.add(node.right);\n            }\n            result.add(level.get(level.size()-1));\n            // swap\n            Queue<TreeNode> tmp = current;\n            current = next;\n            next = tmp;\n        }\n        return result;\n    }\n}\n")))}y.isMDXComponent=!0}}]);