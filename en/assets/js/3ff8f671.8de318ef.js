"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[6426],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>y});var t=a(96540);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var p=t.createContext({}),o=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=o(e.components);return t.createElement(p.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),g=o(a),c=s,y=g["".concat(p,".").concat(c)]||g[c]||u[c]||r;return a?t.createElement(y,l(l({ref:n},m),{},{components:a})):t.createElement(y,l({ref:n},m))}));function y(e,n){var a=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=a.length,l=new Array(r);l[0]=c;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[g]="string"==typeof e?e:s,l[1]=i;for(var o=2;o<r;o++)l[o]=a[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},19365:(e,n,a)=>{a.d(n,{A:()=>l});var t=a(96540),s=a(20053);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,l),hidden:a},n)}},4865:(e,n,a)=>{a.d(n,{A:()=>u});var t=a(58168),s=a(96540),r=a(20053),l=a(92303),i=a(31682),p=a(86976),o=a(23104);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){const{lazy:n,block:a,defaultValue:l,values:g,groupId:u,className:c}=e,y=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=g??y.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),N=(0,i.X)(h,((e,n)=>e.value===n.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const d=null===l?l:l??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==d&&!h.some((e=>e.value===d)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${d}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:b}=(0,p.x)(),[f,w]=(0,s.useState)(d),x=[],{blockElementScrollPositionUntilNextRender:O}=(0,o.a_)();if(null!=u){const e=v[u];null!=e&&e!==f&&h.some((n=>n.value===e))&&w(e)}const T=e=>{const n=e.currentTarget,a=x.indexOf(n),t=h[a].value;t!==f&&(O(n),w(t),null!=u&&b(u,String(t)))},E=e=>{let n=null;switch(e.key){case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;n=x[a]??x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;n=x[a]??x[x.length-1];break}}n?.focus()};return s.createElement("div",{className:(0,r.A)("tabs-container",m.tabList)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},c)},h.map((e=>{let{value:n,label:a,attributes:l}=e;return s.createElement("li",(0,t.A)({role:"tab",tabIndex:f===n?0:-1,"aria-selected":f===n,key:n,ref:e=>x.push(e),onKeyDown:E,onFocus:T,onClick:T},l,{className:(0,r.A)("tabs__item",m.tabItem,l?.className,{"tabs__item--active":f===n})}),a??n)}))),n?(0,s.cloneElement)(y.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==f})))))}function u(e){const n=(0,l.A)();return s.createElement(g,(0,t.A)({key:String(n)},e))}},17374:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var t=a(58168),s=(a(96540),a(15680)),r=a(4865),l=a(19365);const i={title:"Russian Doll Envelopes"},p=void 0,o={unversionedId:"dp/russian-doll-envelopes",id:"dp/russian-doll-envelopes",title:"Russian Doll Envelopes",description:"\u95ee\u9898\u63cf\u8ff0",source:"@site/docs/dp/russian-doll-envelopes.md",sourceDirName:"dp",slug:"/dp/russian-doll-envelopes",permalink:"/en/dp/russian-doll-envelopes",draft:!1,tags:[],version:"current",frontMatter:{title:"Russian Doll Envelopes"},sidebar:"docs",previous:{title:"Longest Increasing Subsequence",permalink:"/en/dp/longest-increasing-subsequence"},next:{title:"Palindrome Partitioning II",permalink:"/en/dp/palindrome-partitioning-ii"}},m={},g=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u52a8\u89c4",id:"\u52a8\u89c4",level:4},{value:"\u4e8c\u5206\u67e5\u627e",id:"\u4e8c\u5206\u67e5\u627e",level:4}],u={toc:g},c="wrapper";function y(e){let{components:n,...a}=e;return(0,s.yg)(c,(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h3",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,s.yg)("p",null,"You are given a 2D array of integers ",(0,s.yg)("inlineCode",{parentName:"p"},"envelopes")," where ",(0,s.yg)("inlineCode",{parentName:"p"},"envelopes[i] = [wi, hi]")," represents the width and the height of an envelope."),(0,s.yg)("p",null,"One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height."),(0,s.yg)("p",null,"Return the ",(0,s.yg)("strong",{parentName:"p"},"maximum number of envelopes")," you can Russian doll (i.e., put one inside the other)."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Note"),": You cannot rotate an envelope."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Example 1"),":"),(0,s.yg)("blockquote",null,(0,s.yg)("p",{parentName:"blockquote"},(0,s.yg)("strong",{parentName:"p"},"Input"),": envelopes = [","[5,4]",",","[6,4]",",","[6,7]",",","[2,3]","]",(0,s.yg)("br",{parentName:"p"}),"\n",(0,s.yg)("strong",{parentName:"p"},"Output"),": 3",(0,s.yg)("br",{parentName:"p"}),"\n",(0,s.yg)("strong",{parentName:"p"},"Explanation"),": The maximum number of envelopes you can Russian doll is 3 (","[2,3]"," => ","[5,4]"," => ","[6,7]",").")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Example 2"),":"),(0,s.yg)("blockquote",null,(0,s.yg)("p",{parentName:"blockquote"},(0,s.yg)("strong",{parentName:"p"},"Input"),": envelopes = [","[1,1]",",","[1,1]",",","[1,1]","]",(0,s.yg)("br",{parentName:"p"}),"\n",(0,s.yg)("strong",{parentName:"p"},"Output"),": 1")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Constraints"),":"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"1 <= envelopes.length <= ",(0,s.yg)("span",{parentName:"li",className:"math math-inline"},(0,s.yg)("span",{parentName:"span",className:"katex"},(0,s.yg)("span",{parentName:"span",className:"katex-mathml"},(0,s.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.yg)("semantics",{parentName:"math"},(0,s.yg)("mrow",{parentName:"semantics"},(0,s.yg)("mn",{parentName:"mrow"},"1"),(0,s.yg)("msup",{parentName:"mrow"},(0,s.yg)("mn",{parentName:"msup"},"0"),(0,s.yg)("mn",{parentName:"msup"},"5"))),(0,s.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"10^5")))),(0,s.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.yg)("span",{parentName:"span",className:"base"},(0,s.yg)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,s.yg)("span",{parentName:"span",className:"mord"},"1"),(0,s.yg)("span",{parentName:"span",className:"mord"},(0,s.yg)("span",{parentName:"span",className:"mord"},"0"),(0,s.yg)("span",{parentName:"span",className:"msupsub"},(0,s.yg)("span",{parentName:"span",className:"vlist-t"},(0,s.yg)("span",{parentName:"span",className:"vlist-r"},(0,s.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.yg)("span",{parentName:"span",className:"mord mtight"},"5"))))))))))))),(0,s.yg)("li",{parentName:"ul"},"envelopes","[i]",".length == 2"),(0,s.yg)("li",{parentName:"ul"},"1 <= ",(0,s.yg)("span",{parentName:"li",className:"math math-inline"},(0,s.yg)("span",{parentName:"span",className:"katex"},(0,s.yg)("span",{parentName:"span",className:"katex-mathml"},(0,s.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.yg)("semantics",{parentName:"math"},(0,s.yg)("mrow",{parentName:"semantics"},(0,s.yg)("msub",{parentName:"mrow"},(0,s.yg)("mi",{parentName:"msub"},"w"),(0,s.yg)("mi",{parentName:"msub"},"i"))),(0,s.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"w_i")))),(0,s.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.yg)("span",{parentName:"span",className:"base"},(0,s.yg)("span",{parentName:"span",className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,s.yg)("span",{parentName:"span",className:"mord"},(0,s.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02691em"}},"w"),(0,s.yg)("span",{parentName:"span",className:"msupsub"},(0,s.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.yg)("span",{parentName:"span",className:"vlist-r"},(0,s.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.yg)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0269em",marginRight:"0.05em"}},(0,s.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.yg)("span",{parentName:"span",className:"vlist-r"},(0,s.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.yg)("span",{parentName:"span"})))))))))),", ",(0,s.yg)("span",{parentName:"li",className:"math math-inline"},(0,s.yg)("span",{parentName:"span",className:"katex"},(0,s.yg)("span",{parentName:"span",className:"katex-mathml"},(0,s.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.yg)("semantics",{parentName:"math"},(0,s.yg)("mrow",{parentName:"semantics"},(0,s.yg)("msub",{parentName:"mrow"},(0,s.yg)("mi",{parentName:"msub"},"h"),(0,s.yg)("mi",{parentName:"msub"},"i"))),(0,s.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"h_i")))),(0,s.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.yg)("span",{parentName:"span",className:"base"},(0,s.yg)("span",{parentName:"span",className:"strut",style:{height:"0.8444em",verticalAlign:"-0.15em"}}),(0,s.yg)("span",{parentName:"span",className:"mord"},(0,s.yg)("span",{parentName:"span",className:"mord mathnormal"},"h"),(0,s.yg)("span",{parentName:"span",className:"msupsub"},(0,s.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.yg)("span",{parentName:"span",className:"vlist-r"},(0,s.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.yg)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.yg)("span",{parentName:"span",className:"vlist-r"},(0,s.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.yg)("span",{parentName:"span"}))))))))))," <= 10^5")),(0,s.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,s.yg)("p",null,"\u8fd9\u9053\u9898\u76ee\u5176\u5b9e\u662f\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u4e00\u4e2a\u53d8\u79cd\uff0c\u76f8\u5f53\u4e8e\u5728\u4e8c\u7ef4\u5e73\u9762\u4e2d\u5bfb\u627e\u4e00\u4e2a\u6700\u957f\u9012\u589e\u7684\u5b50\u5e8f\u5217\u3002\u5148\u5bf9\u5bbd\u5ea6",(0,s.yg)("inlineCode",{parentName:"p"},"w"),"\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u5982\u679c",(0,s.yg)("inlineCode",{parentName:"p"},"w"),"\u76f8\u540c\uff0c\u5219\u6309\u7167\u9ad8\u5ea6",(0,s.yg)("inlineCode",{parentName:"p"},"h"),"\u964d\u5e8f\u6392\u5e8f\uff0c\u4e4b\u540e\u628a\u6240\u6709\u7684",(0,s.yg)("inlineCode",{parentName:"p"},"h"),"\u4f5c\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5728\u8fd9\u4e2a\u6570\u7ec4\u4e0a\u8ba1\u7b97 LIS \u7684\u957f\u5ea6\u5c31\u662f\u7b54\u6848\u3002"),(0,s.yg)("p",null,"\u4e3a\u4ec0\u4e48\u5462\uff1f"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"\u9996\u5148\uff0c\u5bf9\u5bbd\u5ea6",(0,s.yg)("inlineCode",{parentName:"li"},"w"),"\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u786e\u4fdd\u4e86",(0,s.yg)("inlineCode",{parentName:"li"},"w"),"\u8fd9\u4e2a\u7ef4\u5ea6\u53ef\u4ee5\u5d4c\u5957\uff0c\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u4e13\u6ce8\u9ad8\u5ea6",(0,s.yg)("inlineCode",{parentName:"li"},"h"),"\u8fd9\u4e2a\u7ef4\u5ea6\u80fd\u5426\u5d4c\u5957\u3002"),(0,s.yg)("li",{parentName:"ul"},"\u5176\u6b21\uff0c\u4e24\u4e2a",(0,s.yg)("inlineCode",{parentName:"li"},"w"),"\u76f8\u540c\u7684\u4fe1\u5c01\u4e0d\u80fd\u5d4c\u5957\uff08\u56e0\u4e3a\u9898\u76ee\u8bf4\u4e86\u957f\u5bbd\u76f8\u540c\u4e5f\u65e0\u6cd5\u5d4c\u5957\uff09\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5bbd\u5ea6",(0,s.yg)("inlineCode",{parentName:"li"},"w"),"\u76f8\u540c\u7684\u4fe1\u5c01\uff0c\u6309\u7167\u9ad8\u5ea6",(0,s.yg)("inlineCode",{parentName:"li"},"h"),"\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f\uff0c\u786e\u4fdd\u4e86LIS \u4e2d\u4e0d\u5b58\u5728\u591a\u4e2a",(0,s.yg)("inlineCode",{parentName:"li"},"w"),"\u76f8\u540c\u7684\u4fe1\u5c01\u3002")),(0,s.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,s.yg)("h4",{id:"\u52a8\u89c4"},"\u52a8\u89c4"),(0,s.yg)("p",null,"\u8fd9\u4e2a\u7248\u672c\u4f1a\u8d85\u65f6\u3002"),(0,s.yg)(r.A,{defaultValue:"cpp",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"python",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"TODO\n"))),(0,s.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Russian Doll Envelopes\n// Time Complexity: O(N^2)\n// Space Complexity: O(N)\n// This version will TLE\nclass Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        Arrays.sort(envelopes, new Comparator<int[]>() {\n            public int compare(int[] arr1, int[] arr2) {\n                if (arr1[0] == arr2[0]) {\n                    return arr2[1] - arr1[1];\n                } else {\n                    return arr1[0] - arr2[0];\n                }\n           }\n        });\n\n        int[] heights = new int[envelopes.length];\n        for (int i = 0; i < envelopes.length; ++i) heights[i] = envelopes[i][1];\n\n        return lengthOfLIS(heights);\n    }\n\n    private static int lengthOfLIS(int[] nums) {\n        if (nums == null || nums.length == 0) return 0;\n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1); // base case\n        int global = 1;\n        for (int j = 1; j < nums.length; ++j) {\n            for (int i = 0; i < j; ++i) {\n                if (nums[i] < nums[j]) {\n                    dp[j] = Math.max(dp[j], dp[i] + 1);\n                }\n            }\n            global = Math.max(global, dp[j]);\n        }\n        return global;\n    }\n}\n"))),(0,s.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Russian Doll Envelopes\n// Time Complexity: O(N^2)\n// Space Complexity: O(N)\n// This version will TLE\nclass Solution {\npublic:\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\n        std::sort(envelopes.begin(), envelopes.end(), compare);\n        vector<int> heights(envelopes.size());\n        for (int i = 0; i < envelopes.size(); i++) {\n            heights[i] = envelopes[i][1];\n        }\n        return lengthOfLIS(heights);\n    }\n\nprivate:\n    // sort by width in ascending order, while sort by height in descending order\n    bool static compare(const vector<int>& envelope1, const vector<int>& envelope2) {\n        if (envelope1[0] == envelope2[0]) {\n            return envelope1[1] > envelope2[1];\n        } else {\n            return envelope1[0] < envelope2[0];\n        }\n    }\n\n    int static lengthOfLIS(vector<int>& nums) {\n        if (nums.empty()) return 0;\n        vector<int> dp(nums.size(), 1);\n        for (int j = 1; j < nums.size(); ++j) {\n            for (int i = 0; i < j; ++i) {\n                if (nums[i] < nums[j]) {\n                    dp[j] = max(dp[j], dp[i] + 1);\n                }\n            }\n        }\n        return *std::max_element(dp.begin(), dp.end());\n    }\n};\n")))),(0,s.yg)("h4",{id:"\u4e8c\u5206\u67e5\u627e"},"\u4e8c\u5206\u67e5\u627e"),(0,s.yg)(r.A,{defaultValue:"cpp",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"python",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"TODO\n"))),(0,s.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Russian Doll Envelopes\n// Time Complexity: O(NlogN)\n// Space Complexity: O(N)\nclass Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        Arrays.sort(envelopes, new Comparator<int[]>() {\n            public int compare(int[] arr1, int[] arr2) {\n                if (arr1[0] == arr2[0]) {\n                    return arr2[1] - arr1[1];\n                } else {\n                    return arr1[0] - arr2[0];\n                }\n           }\n        });\n\n        int[] heights = new int[envelopes.length];\n        for (int i = 0; i < envelopes.length; ++i) heights[i] = envelopes[i][1];\n\n        return lengthOfLIS(heights);\n    }\n\n    private static int lengthOfLIS(int[] nums) {\n        ArrayList<Integer> lis = new ArrayList<>();\n        for (int x : nums) {\n            int insertPos = lowerBound(lis, 0, lis.size(), x);\n            if (insertPos >= lis.size()) {\n                lis.add(x);\n            } else {\n                lis.set(insertPos, x);\n            }\n        }\n        return lis.size();\n    }\n    private static int lowerBound (ArrayList<Integer> A,\n                                   int first, int last, int target) {\n        while (first != last) {\n            int mid = first + (last - first) / 2;\n            if (target > A.get(mid)) first = ++mid;\n            else                 last = mid;\n        }\n\n        return first;\n    }\n}\n"))),(0,s.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Russian Doll Envelopes\n// Time Complexity: O(NlogN)\n// Space Complexity: O(N)\nclass Solution {\npublic:\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\n        std::sort(envelopes.begin(), envelopes.end(), compare);\n        vector<int> heights(envelopes.size());\n        for (int i = 0; i < envelopes.size(); i++) {\n            heights[i] = envelopes[i][1];\n        }\n        return lengthOfLIS(heights);\n    }\n\nprivate:\n    // sort by width in ascending order, while sort by height in descending order\n    bool static compare(const vector<int>& envelope1, const vector<int>& envelope2) {\n        if (envelope1[0] == envelope2[0]) {\n            return envelope1[1] > envelope2[1];\n        } else {\n            return envelope1[0] < envelope2[0];\n        }\n    }\n\n    int lengthOfLIS(vector<int>& nums) {\n        vector<int> lis;\n        for (auto x : nums) {\n            int insertPos = lower_bound(lis, 0, lis.size(), x);\n            if (insertPos >= lis.size()) {\n                lis.push_back(x);\n            } else {\n                lis[insertPos] = x;\n            }\n        }\n        return lis.size();\n    }\n\n    int lower_bound (const vector<int>& A, int first, int last, int target) {\n        while (first != last) {\n            int mid = first + (last - first) / 2;\n            if (target > A[mid]) first = ++mid;\n            else                 last = mid;\n        }\n\n        return first;\n    }\n};\n")))))}y.isMDXComponent=!0}}]);