"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[5010],{15680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>b});var n=t(96540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),f=o,b=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return t?n.createElement(b,i(i({ref:r},c),{},{components:t})):n.createElement(b,i({ref:r},c))}));function b(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},19365:(e,r,t)=>{t.d(r,{A:()=>i});var n=t(96540),o=t(20053);const a={tabItem:"tabItem_Ymn6"};function i(e){let{children:r,hidden:t,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.A)(a.tabItem,i),hidden:t},r)}},4865:(e,r,t)=>{t.d(r,{A:()=>p});var n=t(58168),o=t(96540),a=t(20053),i=t(92303),l=t(31682),s=t(86976),u=t(23104);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function d(e){const{lazy:r,block:t,defaultValue:i,values:d,groupId:p,className:f}=e,b=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=d??b.map((e=>{let{props:{value:r,label:t,attributes:n}}=e;return{value:r,label:t,attributes:n}})),v=(0,l.X)(m,((e,r)=>e.value===r.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==y&&!m.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:_}=(0,s.x)(),[T,h]=(0,o.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.a_)();if(null!=p){const e=g[p];null!=e&&e!==T&&m.some((r=>r.value===e))&&h(e)}const w=e=>{const r=e.currentTarget,t=O.indexOf(r),n=m[t].value;n!==T&&(N(r),h(n),null!=p&&_(p,String(n)))},I=e=>{let r=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;r=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;r=O[t]??O[O.length-1];break}}r?.focus()};return o.createElement("div",{className:(0,a.A)("tabs-container",c.tabList)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},f)},m.map((e=>{let{value:r,label:t,attributes:i}=e;return o.createElement("li",(0,n.A)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:e=>O.push(e),onKeyDown:I,onFocus:w,onClick:w},i,{className:(0,a.A)("tabs__item",c.tabItem,i?.className,{"tabs__item--active":T===r})}),t??r)}))),r?(0,o.cloneElement)(b.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map(((e,r)=>(0,o.cloneElement)(e,{key:r,hidden:e.props.value!==T})))))}function p(e){const r=(0,i.A)();return o.createElement(d,(0,n.A)({key:String(r)},e))}},36772:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var n=t(58168),o=(t(96540),t(15680)),a=t(4865),i=t(19365);const l={title:"Construct Binary Tree from Inorder and Postorder Traversal"},s=void 0,u={unversionedId:"binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",id:"binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",title:"Construct Binary Tree from Inorder and Postorder Traversal",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal.md",sourceDirName:"binary-tree/construction",slug:"/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",permalink:"/en/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",draft:!1,tags:[],version:"current",frontMatter:{title:"Construct Binary Tree from Inorder and Postorder Traversal"},sidebar:"docs",previous:{title:"Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/en/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal"},next:{title:"Construct Quad Tree",permalink:"/en/binary-tree/construction/construct-quad-tree"}},c={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:d},f="wrapper";function b(e){let{components:r,...t}=e;return(0,o.yg)(f,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,o.yg)("p",null,"Given inorder and postorder traversal of a tree, construct the binary tree."),(0,o.yg)("p",null,"Note:\nYou may assume that duplicates do not exist in the tree."),(0,o.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,o.yg)("p",null,"\u65e0"),(0,o.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,o.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"// Construct Binary Tree from Inorder and Postorder Traversal\n// \u9012\u5f52\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\npublic class Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        return buildTree(inorder, 0, inorder.length,\n                postorder, 0, postorder.length);\n    }\n\n    TreeNode buildTree(int[] inorder, int begin1, int end1,\n                       int[] postorder, int begin2, int end2) {\n        if (begin1 ==end1) return null;\n        if (begin2 ==end2) return null;\n\n        int val = postorder[end2 - 1];\n        TreeNode root = new TreeNode(val);\n\n        int in_root_pos = find(inorder, begin1, end1, val);\n        int left_size = in_root_pos - begin1;\n        int post_left_last = begin2 + left_size;\n\n        root.left = buildTree(inorder, begin1, in_root_pos,\n                postorder, begin2, post_left_last);\n        root.right = buildTree(inorder, in_root_pos + 1, end1,\n                postorder, post_left_last, end2 - 1);\n\n        return root;\n    }\n    private static int find(int[] array, int begin, int end, int val) {\n        for (int i = begin; i < end; ++i) {\n            if (array[i] == val) return i;\n        }\n        return -1;\n    }\n}\n"))),(0,o.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"// Construct Binary Tree from Inorder and Postorder Traversal\n// \u9012\u5f52\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        return buildTree(begin(inorder), end(inorder),\n                begin(postorder), end(postorder));\n    }\n\n    template<typename BidiIt>\n    TreeNode* buildTree(BidiIt in_first, BidiIt in_last,\n            BidiIt post_first, BidiIt post_last) {\n        if (in_first ==in_last) return nullptr;\n        if (post_first == post_last) return nullptr;\n\n        const auto val = *prev(post_last);\n        TreeNode* root = new TreeNode(val);\n\n        auto in_root_pos = find(in_first, in_last, val);\n        auto left_size = distance(in_first, in_root_pos);\n        auto post_left_last = next(post_first, left_size);\n\n        root->left = buildTree(in_first, in_root_pos, post_first, post_left_last);\n        root->right = buildTree(next(in_root_pos), in_last, post_left_last,\n                prev(post_last));\n\n        return root;\n    }\n};\n")))),(0,o.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/en/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal"},"Construct Binary Tree from Preorder and Inorder Traversal"))))}b.isMDXComponent=!0}}]);