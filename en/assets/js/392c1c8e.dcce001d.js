"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7515],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>f});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||y[m]||a;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},86989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(58168),o=(t(96540),t(15680));const a={title:"LCA of BST"},l=void 0,i={unversionedId:"binary-tree/bst/lca-of-bst",id:"binary-tree/bst/lca-of-bst",title:"LCA of BST",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/bst/lca-of-bst.md",sourceDirName:"binary-tree/bst",slug:"/binary-tree/bst/lca-of-bst",permalink:"/en/binary-tree/bst/lca-of-bst",draft:!1,tags:[],version:"current",frontMatter:{title:"LCA of BST"},sidebar:"docs",previous:{title:"Convert Sorted List to Binary Search Tree",permalink:"/en/binary-tree/bst/convert-sorted-list-to-binary-search-tree"},next:{title:"Kth Smallest Element in a BST",permalink:"/en/binary-tree/bst/kth-smallest-element-in-a-bst"}},s={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u89e3\u6cd5 1 \u9012\u5f52",id:"\u89e3\u6cd5-1-\u9012\u5f52",level:3},{value:"\u89e3\u6cd5 2 \u8fed\u4ee3",id:"\u89e3\u6cd5-2-\u8fed\u4ee3",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:c},u="wrapper";function y(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,o.yg)("p",null,"Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"      _______6______\n       /              \\\n    ___2__          ___8__\n   /      \\        /      \\\n   1      _4       7       9\n         /  \\\n         3   5\n")),(0,o.yg)("p",null,"For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."),(0,o.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,o.yg)("p",null,"\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u4e24\u4e2a\u5b50\u8282\u70b9",(0,o.yg)("inlineCode",{parentName:"p"},"p"),",",(0,o.yg)("inlineCode",{parentName:"p"},"q"),"\u548c\u6839\u8282\u70b9",(0,o.yg)("inlineCode",{parentName:"p"},"root"),"\u7684\u5173\u7cfb\uff0c\u6709\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5728\u6811\u7684\u5de6\u5b50\u6811\u4e0a"),(0,o.yg)("li",{parentName:"ol"},"\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5728\u6811\u7684\u53f3\u5b50\u6811\u4e0a"),(0,o.yg)("li",{parentName:"ol"},"\u4e00\u4e2a\u5b50\u8282\u70b9\u5728\u5de6\u5b50\u6811\uff0c\u4e00\u4e2a\u5b50\u8282\u70b9\u5728\u53f3\u5b50\u6811"),(0,o.yg)("li",{parentName:"ol"},"\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u503c\u548c\u6839\u8282\u70b9\u7684\u503c\u76f8\u7b49")),(0,o.yg)("p",null,"\u4ee5\u9898\u76ee\u4e2d\u7684\u6811\u4e3a\u4f8b\uff0c\u8282\u70b9 1 \u548c\u8282\u70b9 4 \u4e3a\u60c5\u51b5 1\uff0c\u8282\u70b9 7 \u548c\u8282\u70b9 9 \u4e3a\u60c5\u51b5 2\uff0c\u8282\u70b9 1 \u548c\u8282\u70b9 7 \u4e3a\u60c5\u51b5 3\uff0c\u8282\u70b9 2 \u548c 4 \u4e3a\u60c5\u51b5 4\u3002\n\u82e5\u4e3a\u60c5\u51b5 3 \u6216 4\uff0c\u5f53\u524d\u8282\u70b9\u5373\u4e3a\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u82e5\u4e3a\u60c5\u51b5 1 \u6216 2\uff0c\u5219\u8fd8\u9700\u9012\u5f52\u5230\u5de6\u6216\u53f3\u5b50\u6811\u4e0a\uff0c\u7ee7\u7eed\u8fd9\u4e2a\u8fc7\u7a0b\u3002"),(0,o.yg)("p",null,"\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a",(0,o.yg)("inlineCode",{parentName:"p"},"O(h)"),"\uff0c",(0,o.yg)("inlineCode",{parentName:"p"},"h"),"\u4e3a\u6811\u7684\u9ad8\u5ea6\u3002"),(0,o.yg)("h3",{id:"\u89e3\u6cd5-1-\u9012\u5f52"},"\u89e3\u6cd5 1 \u9012\u5f52"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"// LCA of BST\n// Time Complexity: O(h), Space Complexity: O(h)\npublic class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) return null;\n\n        if (Math.max(p.val, q.val) < root.val) {\n            return lowestCommonAncestor(root.left, p, q);\n        } else if (Math.min(p.val, q.val) > root.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        } else {\n            return root;\n        }\n    }\n}\n")),(0,o.yg)("h3",{id:"\u89e3\u6cd5-2-\u8fed\u4ee3"},"\u89e3\u6cd5 2 \u8fed\u4ee3"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"// LCA of BST\n// Time Complexity: O(h), Space Complexity: O(1)\npublic class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        while (root != null) {\n            if (Math.max(p.val, q.val) < root.val) {\n                root = root.left;\n            } else if (Math.min(p.val, q.val) > root.val) {\n                root = root.right;\n            } else {\n                return root;\n            }\n        }\n        return null;\n    }\n}\n")),(0,o.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/en/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree"},"LCA of Binary Tree"))))}y.isMDXComponent=!0}}]);