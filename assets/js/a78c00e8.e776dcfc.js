"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2423],{15680:(n,e,t)=>{t.d(e,{xA:()=>m,yg:()=>g});var a=t(96540);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,s=function(n,e){if(null==n)return{};var t,a,s={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var r=a.createContext({}),p=function(n){var e=a.useContext(r),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},m=function(n){var e=p(n.components);return a.createElement(r.Provider,{value:e},n.children)},u="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},y=a.forwardRef((function(n,e){var t=n.components,s=n.mdxType,i=n.originalType,r=n.parentName,m=l(n,["components","mdxType","originalType","parentName"]),u=p(t),y=s,g=u["".concat(r,".").concat(y)]||u[y]||c[y]||i;return t?a.createElement(g,o(o({ref:e},m),{},{components:t})):a.createElement(g,o({ref:e},m))}));function g(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var r in e)hasOwnProperty.call(e,r)&&(l[r]=e[r]);l.originalType=n,l[u]="string"==typeof n?n:s,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},19365:(n,e,t)=>{t.d(e,{A:()=>o});var a=t(96540),s=t(20053);const i={tabItem:"tabItem_Ymn6"};function o(n){let{children:e,hidden:t,className:o}=n;return a.createElement("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,o),hidden:t},e)}},4865:(n,e,t)=>{t.d(e,{A:()=>c});var a=t(58168),s=t(96540),i=t(20053),o=t(92303),l=t(31682),r=t(86976),p=t(23104);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function u(n){const{lazy:e,block:t,defaultValue:o,values:u,groupId:c,className:y}=n,g=s.Children.map(n.children,(n=>{if((0,s.isValidElement)(n)&&"value"in n.props)return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),d=u??g.map((n=>{let{props:{value:e,label:t,attributes:a}}=n;return{value:e,label:t,attributes:a}})),N=(0,l.X)(d,((n,e)=>n.value===e.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===o?o:o??g.find((n=>n.props.default))?.props.value??g[0].props.value;if(null!==f&&!d.some((n=>n.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${d.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,r.x)(),[h,x]=(0,s.useState)(f),j=[],{blockElementScrollPositionUntilNextRender:O}=(0,p.a_)();if(null!=c){const n=b[c];null!=n&&n!==h&&d.some((e=>e.value===n))&&x(n)}const w=n=>{const e=n.currentTarget,t=j.indexOf(e),a=d[t].value;a!==h&&(O(e),x(a),null!=c&&v(c,String(a)))},P=n=>{let e=null;switch(n.key){case"ArrowRight":{const t=j.indexOf(n.currentTarget)+1;e=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(n.currentTarget)-1;e=j[t]??j[j.length-1];break}}e?.focus()};return s.createElement("div",{className:(0,i.A)("tabs-container",m.tabList)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},y)},d.map((n=>{let{value:e,label:t,attributes:o}=n;return s.createElement("li",(0,a.A)({role:"tab",tabIndex:h===e?0:-1,"aria-selected":h===e,key:e,ref:n=>j.push(n),onKeyDown:P,onFocus:w,onClick:w},o,{className:(0,i.A)("tabs__item",m.tabItem,o?.className,{"tabs__item--active":h===e})}),t??e)}))),e?(0,s.cloneElement)(g.filter((n=>n.props.value===h))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},g.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==h})))))}function c(n){const e=(0,o.A)();return s.createElement(u,(0,a.A)({key:String(e)},n))}},76349:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=t(58168),s=(t(96540),t(15680)),i=t(4865),o=t(19365);const l={title:"Max Points on a Line"},r=void 0,p={unversionedId:"simulation/max-points-on-a-line",id:"simulation/max-points-on-a-line",title:"Max Points on a Line",description:"\u63cf\u8ff0",source:"@site/docs/simulation/max-points-on-a-line.md",sourceDirName:"simulation",slug:"/simulation/max-points-on-a-line",permalink:"/simulation/max-points-on-a-line",draft:!1,tags:[],version:"current",frontMatter:{title:"Max Points on a Line"},sidebar:"docs",previous:{title:"Text Justification",permalink:"/simulation/text-justification"},next:{title:"Sparse Matrix Multiplication",permalink:"/simulation/sparse-matrix-multiplication"}},m={},u=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee5\u8fb9\u4e3a\u4e2d\u5fc3",id:"\u4ee5\u8fb9\u4e3a\u4e2d\u5fc3",level:3},{value:"\u4ee5\u70b9\u4e3a\u4e2d\u5fc3",id:"\u4ee5\u70b9\u4e3a\u4e2d\u5fc3",level:3}],c={toc:u},y="wrapper";function g(n){let{components:e,...t}=n;return(0,s.yg)(y,(0,a.A)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,s.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,s.yg)("p",null,"Given ",(0,s.yg)("inlineCode",{parentName:"p"},"n")," points on a 2D plane, find the maximum number of points that lie on the same straight line."),(0,s.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,s.yg)("p",null,"\u66b4\u529b\u679a\u4e3e\u6cd5\u3002\u4e24\u70b9\u51b3\u5b9a\u4e00\u6761\u76f4\u7ebf\uff0c",(0,s.yg)("inlineCode",{parentName:"p"},"n"),"\u4e2a\u70b9\u4e24\u4e24\u7ec4\u5408\uff0c\u53ef\u4ee5\u5f97\u5230",(0,s.yg)("span",{parentName:"p",className:"math math-inline"},(0,s.yg)("span",{parentName:"span",className:"katex"},(0,s.yg)("span",{parentName:"span",className:"katex-mathml"},(0,s.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.yg)("semantics",{parentName:"math"},(0,s.yg)("mrow",{parentName:"semantics"},(0,s.yg)("mstyle",{parentName:"mrow",displaystyle:"true",scriptlevel:"0"},(0,s.yg)("mfrac",{parentName:"mstyle"},(0,s.yg)("mn",{parentName:"mfrac"},"1"),(0,s.yg)("mn",{parentName:"mfrac"},"2"))),(0,s.yg)("mi",{parentName:"mrow"},"n"),(0,s.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.yg)("mi",{parentName:"mrow"},"n"),(0,s.yg)("mo",{parentName:"mrow"},"+"),(0,s.yg)("mn",{parentName:"mrow"},"1"),(0,s.yg)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\dfrac{1}{2}n(n+1)")))),(0,s.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.yg)("span",{parentName:"span",className:"base"},(0,s.yg)("span",{parentName:"span",className:"strut",style:{height:"2.0074em",verticalAlign:"-0.686em"}}),(0,s.yg)("span",{parentName:"span",className:"mord"},(0,s.yg)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,s.yg)("span",{parentName:"span",className:"mfrac"},(0,s.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.yg)("span",{parentName:"span",className:"vlist-r"},(0,s.yg)("span",{parentName:"span",className:"vlist",style:{height:"1.3214em"}},(0,s.yg)("span",{parentName:"span",style:{top:"-2.314em"}},(0,s.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.yg)("span",{parentName:"span",className:"mord"},(0,s.yg)("span",{parentName:"span",className:"mord"},"2"))),(0,s.yg)("span",{parentName:"span",style:{top:"-3.23em"}},(0,s.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.yg)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,s.yg)("span",{parentName:"span",style:{top:"-3.677em"}},(0,s.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.yg)("span",{parentName:"span",className:"mord"},(0,s.yg)("span",{parentName:"span",className:"mord"},"1")))),(0,s.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.yg)("span",{parentName:"span",className:"vlist-r"},(0,s.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.686em"}},(0,s.yg)("span",{parentName:"span"}))))),(0,s.yg)("span",{parentName:"span",className:"mclose nulldelimiter"})),(0,s.yg)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.yg)("span",{parentName:"span",className:"mopen"},"("),(0,s.yg)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.yg)("span",{parentName:"span",className:"mbin"},"+"),(0,s.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.yg)("span",{parentName:"span",className:"base"},(0,s.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.yg)("span",{parentName:"span",className:"mord"},"1"),(0,s.yg)("span",{parentName:"span",className:"mclose"},")"))))),"\u6761\u76f4\u7ebf\uff0c\u5bf9\u6bcf\u4e00\u6761\u76f4\u7ebf\uff0c\u5224\u65ad",(0,s.yg)("inlineCode",{parentName:"p"},"n"),"\u4e2a\u70b9\u662f\u5426\u5728\u8be5\u76f4\u7ebf\u4e0a\uff0c\u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u8fd9\u6761\u76f4\u7ebf\u4e0a\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u9009\u62e9\u6700\u5927\u7684\u90a3\u6761\u76f4\u7ebf\u8fd4\u56de\u3002\u590d\u6742\u5ea6",(0,s.yg)("inlineCode",{parentName:"p"},"O(n^3)"),"\u3002"),(0,s.yg)("p",null,"\u4e0a\u9762\u7684\u66b4\u529b\u679a\u4e3e\u6cd5\u4ee5\u201c\u8fb9\u201d\u4e3a\u4e2d\u5fc3\uff0c\u518d\u770b\u53e6\u4e00\u79cd\u66b4\u529b\u679a\u4e3e\u6cd5\uff0c\u4ee5\u6bcf\u4e2a\u201c\u70b9\u201d\u4e3a\u4e2d\u5fc3\uff0c\u7136\u540e\u904d\u5386\u5269\u4f59\u70b9\uff0c\u627e\u5230\u6240\u6709\u7684\u659c\u7387\uff0c\u5982\u679c\u659c\u7387\u76f8\u540c\uff0c\u90a3\u4e48\u4e00\u5b9a\u5171\u7ebf\u5bf9\u6bcf\u4e2a\u70b9\uff0c\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0ckey \u4e3a\u659c\u7387\uff0cvalue \u4e3a\u8be5\u76f4\u7ebf\u4e0a\u7684\u70b9\u6570\uff0c\u8ba1\u7b97\u51fa\u54c8\u5e0c\u8868\u540e\uff0c\u53d6\u6700\u5927\u503c\uff0c\u5e76\u66f4\u65b0\u5168\u5c40\u6700\u5927\u503c\uff0c\u6700\u540e\u5c31\u662f\u7ed3\u679c\u3002\u65f6\u95f4\u590d\u6742\u5ea6",(0,s.yg)("inlineCode",{parentName:"p"},"O(n^2)"),"\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6",(0,s.yg)("inlineCode",{parentName:"p"},"O(n)"),"\u3002"),(0,s.yg)("h3",{id:"\u4ee5\u8fb9\u4e3a\u4e2d\u5fc3"},"\u4ee5\u8fb9\u4e3a\u4e2d\u5fc3"),(0,s.yg)(i.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Max Points on a Line\n// \u66b4\u529b\u679a\u4e3e\u6cd5\uff0c\u4ee5\u8fb9\u4e3a\u4e2d\u5fc3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^3)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public int maxPoints(Point[] points) {\n        if (points.length < 3) return points.length;\n        int result = 0;\n\n        for (int i = 0; i < points.length - 1; i++) {\n            for (int j = i + 1; j < points.length; j++) {\n                int sign = 0;\n                int a = 0, b = 0, c = 0;\n                if (points[i].x == points[j].x) sign = 1;\n                else {\n                    a = points[j].x - points[i].x;\n                    b = points[j].y - points[i].y;\n                    c = a * points[i].y - b * points[i].x;\n                }\n                int count = 0;\n                for (int k = 0; k < points.length; k++) {\n                    if ((0 == sign && a * points[k].y == c +  b * points[k].x) ||\n                            (1 == sign&&points[k].x == points[j].x))\n                        count++;\n                }\n                if (count > result) result = count;\n            }\n        }\n        return result;\n    }\n}\n"))),(0,s.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Max Points on a Line\n// \u66b4\u529b\u679a\u4e3e\u6cd5\uff0c\u4ee5\u8fb9\u4e3a\u4e2d\u5fc3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^3)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    int maxPoints(vector<Point> &points) {\n        if (points.size() < 3) return points.size();\n        int result = 0;\n\n        for (int i = 0; i < points.size() - 1; i++) {\n            for (int j = i + 1; j < points.size(); j++) {\n                int sign = 0;\n                int a, b, c;\n                if (points[i].x == points[j].x) sign = 1;\n                else {\n                    a = points[j].x - points[i].x;\n                    b = points[j].y - points[i].y;\n                    c = a * points[i].y - b * points[i].x;\n                }\n                int count = 0;\n                for (int k = 0; k < points.size(); k++) {\n                    if ((0 == sign && a * points[k].y == c +  b * points[k].x) ||\n                        (1 == sign&&points[k].x == points[j].x))\n                        count++;\n                }\n                if (count > result) result = count;\n            }\n        }\n        return result;\n    }\n};\n")))),(0,s.yg)("h3",{id:"\u4ee5\u70b9\u4e3a\u4e2d\u5fc3"},"\u4ee5\u70b9\u4e3a\u4e2d\u5fc3"),(0,s.yg)(i.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Max Points on a Line\n// \u66b4\u529b\u679a\u4e3e\uff0c\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n^2)\npublic class Solution {\n    public int maxPoints(Point[] points) {\n        if (points.length < 3) return points.length;\n        int result = 0;\n\n        HashMap<Double, Integer> slope_count = new HashMap<>();\n        for (int i = 0; i < points.length-1; i++) {\n            slope_count.clear();\n            int samePointNum = 0; // \u4e0ei\u91cd\u5408\u7684\u70b9\n            int point_max = 1;    // \u548ci\u5171\u7ebf\u7684\u6700\u5927\u70b9\u6570\n\n            for (int j = i + 1; j < points.length; j++) {\n                final double slope; // \u659c\u7387\n                if (points[i].x == points[j].x) {\n                    slope = Double.POSITIVE_INFINITY;\n                    if (points[i].y == points[j].y) {\n                        ++ samePointNum;\n                        continue;\n                    }\n                } else {\n                    if (points[i].y == points[j].y) {\n                        // 0.0 and -0.0 is the same\n                        slope = 0.0;\n                    } else {\n                        slope = 1.0 * (points[i].y - points[j].y) /\n                                (points[i].x - points[j].x);\n                    }\n                }\n\n                int count = 0;\n                if (slope_count.containsKey(slope)) {\n                    final int tmp = slope_count.get(slope);\n                    slope_count.put(slope, tmp + 1);\n                    count = tmp + 1;\n                } else {\n                    count = 2;\n                    slope_count.put(slope, 2);\n                }\n\n                if (point_max < count) point_max = count;\n            }\n            result = Math.max(result, point_max + samePointNum);\n        }\n        return result;\n    }\n}\n"))),(0,s.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Max Points on a Line\n// \u66b4\u529b\u679a\u4e3e\uff0c\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n^2)\nclass Solution {\npublic:\n    int maxPoints(vector<Point> &points) {\n        if (points.size() < 3) return points.size();\n        int result = 0;\n\n        unordered_map<double, int> slope_count;\n        for (int i = 0; i < points.size()-1; i++) {\n            slope_count.clear();\n            int samePointNum = 0; // \u4e0ei\u91cd\u5408\u7684\u70b9\n            int point_max = 1;    // \u548ci\u5171\u7ebf\u7684\u6700\u5927\u70b9\u6570\n\n            for (int j = i + 1; j < points.size(); j++) {\n                double slope; // \u659c\u7387\n                if (points[i].x == points[j].x) {\n                    slope = std::numeric_limits<double>::infinity();\n                    if (points[i].y == points[j].y) {\n                        ++ samePointNum;\n                        continue;\n                    }\n                } else {\n                    if (points[i].y == points[j].y) {\n                        // 0.0 and -0.0 is the same\n                        slope = 0.0;\n                    } else {\n                        slope = 1.0 * (points[i].y - points[j].y) /\n                                (points[i].x - points[j].x);\n                    }\n                }\n\n                int count = 0;\n                if (slope_count.find(slope) != slope_count.end())\n                    count = ++slope_count[slope];\n                else {\n                    count = 2;\n                    slope_count[slope] = 2;\n                }\n\n                if (point_max < count) point_max = count;\n            }\n            result = max(result, point_max + samePointNum);\n        }\n        return result;\n    }\n};\n")))))}g.isMDXComponent=!0}}]);