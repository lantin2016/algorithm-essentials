"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[6657],{15680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>y});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(a),h=r,y=c["".concat(s,".").concat(h)]||c[h]||m[h]||l;return a?n.createElement(y,o(o({ref:t},u),{},{components:a})):n.createElement(y,o({ref:t},u))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},19365:(e,t,a)=>{a.d(t,{A:()=>o});var n=a(96540),r=a(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,o),hidden:a},t)}},4865:(e,t,a)=>{a.d(t,{A:()=>m});var n=a(58168),r=a(96540),l=a(20053),o=a(92303),i=a(31682),s=a(86976),p=a(23104);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function c(e){const{lazy:t,block:a,defaultValue:o,values:c,groupId:m,className:h}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=c??y.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),d=(0,i.X)(g,((e,t)=>e.value===t.value));if(d.length>0)throw new Error(`Docusaurus error: Duplicate values "${d.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===o?o:o??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==b&&!g.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:w}=(0,s.x)(),[v,N]=(0,r.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.a_)();if(null!=m){const e=f[m];null!=e&&e!==v&&g.some((t=>t.value===e))&&N(e)}const I=e=>{const t=e.currentTarget,a=T.indexOf(t),n=g[a].value;n!==v&&(x(t),N(n),null!=m&&w(m,String(n)))},O=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=T.indexOf(e.currentTarget)+1;t=T[a]??T[0];break}case"ArrowLeft":{const a=T.indexOf(e.currentTarget)-1;t=T[a]??T[T.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,l.A)("tabs-container",u.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},h)},g.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>T.push(e),onKeyDown:O,onFocus:I,onClick:I},o,{className:(0,l.A)("tabs__item",u.tabItem,o?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,r.cloneElement)(y.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function m(e){const t=(0,o.A)();return r.createElement(c,(0,n.A)({key:String(t)},e))}},62474:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=a(58168),r=(a(96540),a(15680)),l=a(4865),o=a(19365);const i={title:"The Maze III"},s=void 0,p={unversionedId:"bfs/graph/the-maze-iii",id:"bfs/graph/the-maze-iii",title:"The Maze III",description:"\u63cf\u8ff0",source:"@site/docs/bfs/graph/the-maze-iii.md",sourceDirName:"bfs/graph",slug:"/bfs/graph/the-maze-iii",permalink:"/bfs/graph/the-maze-iii",draft:!1,tags:[],version:"current",frontMatter:{title:"The Maze III"},sidebar:"docs",previous:{title:"The Maze II",permalink:"/bfs/graph/the-maze-ii"},next:{title:"Diagonal Traverse II",permalink:"/bfs/graph/diagonal-traverse-ii"}},u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],m={toc:c},h="wrapper";function y(e){let{components:t,...a}=e;return(0,r.yg)(h,(0,n.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"There is a ",(0,r.yg)("strong",{parentName:"p"},"ball")," in a maze with empty spaces and walls. The ball can go through empty spaces by rolling ",(0,r.yg)("strong",{parentName:"p"},"up")," (u), ",(0,r.yg)("strong",{parentName:"p"},"down")," (d), ",(0,r.yg)("strong",{parentName:"p"},"left")," (l) or ",(0,r.yg)("strong",{parentName:"p"},"right")," (r), but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a ",(0,r.yg)("strong",{parentName:"p"},"hole")," in this maze. The ball will drop into the hole if it rolls on to the hole."),(0,r.yg)("p",null,"Given the ",(0,r.yg)("strong",{parentName:"p"},"ball position"),", the ",(0,r.yg)("strong",{parentName:"p"},"hole position")," and the ",(0,r.yg)("strong",{parentName:"p"},"maze"),", find out how the ball could drop into the hole by moving the shortest distance. The distance is defined by the number of ",(0,r.yg)("strong",{parentName:"p"},"empty spaces")," traveled by the ball from the start position (excluded) to the hole (included). Output the moving ",(0,r.yg)("strong",{parentName:"p"},"directions")," by using 'u', 'd', 'l' and 'r'. Since there could be several different shortest ways, you should output the ",(0,r.yg)("strong",{parentName:"p"},"lexicographically smallest"),' way. If the ball cannot reach the hole, output "impossible".'),(0,r.yg)("p",null,"The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The ball and the hole coordinates are represented by row and column indexes."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example 1"),":"),(0,r.yg)("img",{src:"/img/maze_2_example_1.png",width:"70%"}),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Input 1"),": a maze represented by a 2D array"),(0,r.yg)("p",{parentName:"blockquote"},"0 0 0 0 0",(0,r.yg)("br",{parentName:"p"}),"\n","1 1 0 0 1",(0,r.yg)("br",{parentName:"p"}),"\n","0 0 0 0 0",(0,r.yg)("br",{parentName:"p"}),"\n","0 1 0 0 1",(0,r.yg)("br",{parentName:"p"}),"\n","0 1 0 0 0"),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Input 2"),": ball coordinate (rowBall, colBall) = (4, 3)",(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("strong",{parentName:"p"},"Input 3"),": hole coordinate (rowHole, colHole) = (0, 1)"),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Output"),': "lul"'),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Explanation"),": There are two shortest ways for the ball to drop into the hole.",(0,r.yg)("br",{parentName:"p"}),"\n",'The first way is left -> up -> left, represented by "lul".',(0,r.yg)("br",{parentName:"p"}),"\n","The second way is up -> left, represented by 'ul'.",(0,r.yg)("br",{parentName:"p"}),"\n","Both ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is \"lul\".")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example 2"),":"),(0,r.yg)("img",{src:"/img/maze_2_example_2.png",width:"70%"}),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Input 1"),": a maze represented by a 2D array"),(0,r.yg)("p",{parentName:"blockquote"},"0 0 0 0 0",(0,r.yg)("br",{parentName:"p"}),"\n","1 1 0 0 1",(0,r.yg)("br",{parentName:"p"}),"\n","0 0 0 0 0",(0,r.yg)("br",{parentName:"p"}),"\n","0 1 0 0 1",(0,r.yg)("br",{parentName:"p"}),"\n","0 1 0 0 0"),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Input 2"),": ball coordinate (rowBall, colBall) = (4, 3)",(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("strong",{parentName:"p"},"Input 3"),": hole coordinate (rowHole, colHole) = (3, 0)"),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Output"),': "impossible"'),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Explanation"),": The ball cannot reach the hole.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note"),":"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"There is only one ball and one hole in the maze."),(0,r.yg)("li",{parentName:"ol"},"Both the ball and hole exist on an empty space, and they will not be at the same position initially."),(0,r.yg)("li",{parentName:"ol"},"The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls."),(0,r.yg)("li",{parentName:"ol"},"The maze contains at least 2 empty spaces, and the width and the height of the maze won't exceed 30.")),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u5f88\u663e\u7136\uff0c\u7528 BFS\u3002"),(0,r.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.yg)(l.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(o.A,{value:"python",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"TODO\n"))),(0,r.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// The Maze III\n// BFS\n// Time complexity : O(m*n*max(m,n))\n// Space complexity : O(mn)\npublic class Solution {\n    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {\n        final int M = maze.length, N = maze[0].length;\n        State[][] states = new State[M][N];\n        for (int i = 0; i < M; i++) {\n            for (int j = 0; j < N; j++) {\n                states[i][j] = new State();\n            }\n        }\n\n        final int[][] dirs={{-1, 0}, {1, 0},{0, -1}, {0, 1}}; // up, down, left, right\n        final char[] names=new char[] {'u', 'd', 'l', 'r'};\n\n        Queue<int[]> q = new LinkedList<>();\n        states[ball[0]][ball[1]].distance = 0;\n        q.offer(ball);\n        while (!q.isEmpty()) {\n            int[] cur = q.poll();\n            int x = cur[0], y = cur[1];\n            if (x == hole[0] && y == hole[1]) continue;\n\n            for (int i = 0; i < 4; i++) { // try four directions\n                final int[] dir = dirs[i];\n                int newX = x, newY = y;\n                int dx = dir[0], dy = dir[1];\n                State newState = new State(states[x][y].distance, states[x][y].path + names[i]);\n                // walk until hit wall or meet the hole\n                while (0 <= newX + dx && newX + dx < M && 0 <= newY + dy && newY + dy < N && maze[newX + dx][newY + dy] == 0) {\n                    newX += dx;\n                    newY += dy;\n                    newState.distance++;\n                    if (newX == hole[0] && newY == hole[1]) break;\n                }\n                if (newState.compareTo(states[newX][newY]) < 0) {\n                    states[newX][newY] = newState;\n                    q.offer(new int[] {newX, newY});\n                }\n            }\n        }\n\n        return states[hole[0]][hole[1]].distance == Integer.MAX_VALUE ? \"impossible\" : states[hole[0]][hole[1]].path;\n    }\n\n    static class State implements Comparable<State> {\n        int distance; // distance between start and this point\n        String path; // path from start to this point\n\n        public State() {\n            this.distance =Integer.MAX_VALUE;\n            this.path =\"\";\n        }\n        public State(int distance, String path) {\n            this.distance = distance;\n            this.path = path;\n        }\n\n        @Override\n        public int compareTo(State other) {\n            if (this.distance == other.distance) {\n                return this.path.compareTo(other.path);\n            } else {\n                return this.distance - other.distance;\n            }\n        }\n    }\n}\n"))),(0,r.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"TODO\n")))),(0,r.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/bfs/graph/the-maze"},"The Maze")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/bfs/graph/the-maze-ii"},"The Maze II"))))}y.isMDXComponent=!0}}]);