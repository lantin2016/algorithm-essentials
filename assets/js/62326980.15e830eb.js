"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[431],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(t),g=r,y=p["".concat(s,".").concat(g)]||p[g]||c[g]||i;return t?a.createElement(y,l(l({ref:n},d),{},{components:t})):a.createElement(y,l({ref:n},d))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>l});var a=t(96540),r=t(20053);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,l),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(58168),r=t(96540),i=t(20053),l=t(92303),o=t(31682),s=t(86976),u=t(23104);const d={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:n,block:t,defaultValue:l,values:p,groupId:c,className:g}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=p??y.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),h=(0,o.X)(m,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===l?l:l??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==v&&!m.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:f}=(0,s.x)(),[N,T]=(0,r.useState)(v),j=[],{blockElementScrollPositionUntilNextRender:k}=(0,u.a_)();if(null!=c){const e=b[c];null!=e&&e!==N&&m.some((n=>n.value===e))&&T(e)}const w=e=>{const n=e.currentTarget,t=j.indexOf(n),a=m[t].value;a!==N&&(k(n),T(a),null!=c&&f(c,String(a)))},O=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=j.indexOf(e.currentTarget)+1;n=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(e.currentTarget)-1;n=j[t]??j[j.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,i.A)("tabs-container",d.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},g)},m.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>j.push(e),onKeyDown:O,onFocus:w,onClick:w},l,{className:(0,i.A)("tabs__item",d.tabItem,l?.className,{"tabs__item--active":N===n})}),t??n)}))),n?(0,r.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function c(e){const n=(0,l.A)();return r.createElement(p,(0,a.A)({key:String(n)},e))}},63927:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=t(58168),r=(t(96540),t(15680)),i=t(4865),l=t(19365);const o={title:"Graph Valid Tree"},s=void 0,u={unversionedId:"graph/graph-valid-tree",id:"graph/graph-valid-tree",title:"Graph Valid Tree",description:"\u63cf\u8ff0",source:"@site/docs/graph/graph-valid-tree.md",sourceDirName:"graph",slug:"/graph/graph-valid-tree",permalink:"/graph/graph-valid-tree",draft:!1,tags:[],version:"current",frontMatter:{title:"Graph Valid Tree"},sidebar:"docs",previous:{title:"Clone Graph",permalink:"/graph/clone-graph"},next:{title:"Network Delay Time",permalink:"/graph/network-delay-time"}},d={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"DFS",id:"dfs",level:3},{value:"BFS",id:"bfs",level:3}],c={toc:p},g="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"Given ",(0,r.yg)("inlineCode",{parentName:"p"},"n")," nodes labeled from 0 to ",(0,r.yg)("inlineCode",{parentName:"p"},"n-1")," and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Example 1"),":"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Input"),": n = 5, and edges = [","[0,1]",", ","[0,2]",", ","[0,3]",", ","[1,4]","]",(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("strong",{parentName:"p"},"Output"),": true")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example 2"),":"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Input"),": n = 5, and edges = [","[0,1]",", ","[1,2]",", ","[2,3]",", ","[1,3]",", ","[1,4]","]",(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("strong",{parentName:"p"},"Output"),": false")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note"),": you can assume that no duplicate edges will appear in edges. Since all edges are undirected, ",(0,r.yg)("inlineCode",{parentName:"p"},"[0,1]")," is the same as ",(0,r.yg)("inlineCode",{parentName:"p"},"[1,0]")," and thus will not appear together in edges."),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u4e00\u4e2a\u56fe\u662f\u4e00\u9897\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u6ee1\u8db3\u5982\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u56fe\u662f\u5168\u8fde\u901a\u7684\u3002\u5bf9\u4e8e\u56fe\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\uff0c\u81f3\u5c11\u5b58\u5728\u4e00\u6761\u8def\u5f84\u8fde\u63a5\u5b83\u4fe9\u3002"),(0,r.yg)("li",{parentName:"ul"},"\u56fe\u91cc\u6ca1\u6709\u73af\u3002\u5bf9\u4e8e\u56fe\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84\u3002")),(0,r.yg)("p",null,"\u53ef\u4ee5\u7528 DFS \u548c BFS \u904d\u5386\u56fe\uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u3002\u5982\u679c\u67d0\u4e2a\u7ed3\u70b9\u88ab\u8bbf\u95ee\u4e86\u4e24\u6b21\uff0c\u8bf4\u660e\u5b58\u5728\u73af\uff1b\u904d\u5386\u7ed3\u675f\u540e\uff0c\u5982\u679c\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u6570\u91cf\u5c0f\u4e8e\u56fe\u4e2d\u7ed3\u70b9\u603b\u6570\uff0c\u8bf4\u660e\u56fe\u4e0d\u662f\u5168\u8fde\u901a\u7684\u3002"),(0,r.yg)("h3",{id:"dfs"},"DFS"),(0,r.yg)(i.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(l.A,{value:"python",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"# Graph Valid Tree\n# DFS\n# Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        if len(edges) != n - 1: return False\n\n        adj_list = [[] for _ in range(n)]\n        for A, B in edges:\n            adj_list[A].append(B)\n            adj_list[B].append(A)\n\n        stack = [0]\n        visited = {0}\n\n        while stack:\n            node = stack.pop()\n            for neighbour in adj_list[node]:\n                if neighbour in visited: continue\n                stack.append(neighbour)\n                visited.add(neighbour)\n\n        return len(visited) == n\n"))),(0,r.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Graph Valid Tree\n// DFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\n    public boolean validTree(int n, int[][] edges) {\n        if (edges.length != n - 1) return false;\n\n        // Construct the adjacency list.\n        List<List<Integer>> adjacencyList = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adjacencyList.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adjacencyList.get(edge[0]).add(edge[1]);\n            adjacencyList.get(edge[1]).add(edge[0]);\n        }\n\n        Stack<Integer> stack = new Stack<>();\n        Set<Integer> visited = new HashSet<>();\n        stack.push(0);\n        visited.add(0);\n\n        while (!stack.isEmpty()) {\n            int node = stack.pop();\n            for (int neighbour : adjacencyList.get(node)) {\n                if (visited.contains(neighbour)) continue;\n                stack.push(neighbour);\n                visited.add(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n}\n"))),(0,r.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Graph Valid Tree\n// DFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\npublic:\n    bool validTree(int n, vector<vector<int>>& edges) {\n        if (edges.size() != n - 1) return false;\n\n        // Construct the adjacency list.\n        vector<vector<int>> adj_list(n);\n        for (const vector<int>& edge : edges) {\n            adj_list[edge[0]].push_back(edge[1]);\n            adj_list[edge[1]].push_back(edge[0]);\n        }\n\n        stack<int> stack;\n        unordered_set<int> visited;\n        stack.push(0);\n        visited.insert(0);\n\n        while (!stack.empty()) {\n            int node = stack.top(); stack.pop();\n            for (int neighbour : adj_list[node]) {\n                if (visited.count(neighbour)) continue;\n                stack.push(neighbour);\n                visited.insert(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n};\n")))),(0,r.yg)("h3",{id:"bfs"},"BFS"),(0,r.yg)(i.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(l.A,{value:"python",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"# Graph Valid Tree\n# BFS\n# Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        if len(edges) != n - 1: return False\n\n        adj_list = [[] for _ in range(n)]\n        for A, B in edges:\n            adj_list[A].append(B)\n            adj_list[B].append(A)\n\n        queue = deque([0])\n        visited = {0}\n\n        while queue:\n            node = queue.popleft()\n            for neighbour in adj_list[node]:\n                if neighbour in visited: continue\n                queue.append(neighbour)\n                visited.add(neighbour)\n\n        return len(visited) == n\n"))),(0,r.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Graph Valid Tree\n// BFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\n    public boolean validTree(int n, int[][] edges) {\n        if (edges.length != n - 1) return false;\n\n        // Construct the adjacency list.\n        List<List<Integer>> adjacencyList = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adjacencyList.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adjacencyList.get(edge[0]).add(edge[1]);\n            adjacencyList.get(edge[1]).add(edge[0]);\n        }\n\n        Queue<Integer> queue = new LinkedList<>();\n        Set<Integer> visited = new HashSet<>();\n        queue.offer(0);\n        visited.add(0);\n\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbour : adjacencyList.get(node)) {\n                if (visited.contains(neighbour)) continue;\n                queue.offer(neighbour);\n                visited.add(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n}\n"))),(0,r.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Graph Valid Tree\n// BFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\npublic:\n    bool validTree(int n, vector<vector<int>>& edges) {\n        if (edges.size() != n - 1) return false;\n\n        // Construct the adjacency list.\n        vector<vector<int>> adj_list(n);\n        for (const vector<int>& edge : edges) {\n            adj_list[edge[0]].push_back(edge[1]);\n            adj_list[edge[1]].push_back(edge[0]);\n        }\n\n        queue<int> queue;\n        unordered_set<int> visited;\n        queue.push(0);\n        visited.insert(0);\n\n        while (!queue.empty()) {\n            int node = queue.front(); queue.pop();\n            for (int neighbour : adj_list[node]) {\n                if (visited.count(neighbour)) continue;\n                queue.push(neighbour);\n                visited.insert(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n};\n")))))}y.isMDXComponent=!0}}]);