"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[9066],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>f});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),y=o,f=m["".concat(s,".").concat(y)]||m[y]||u[y]||a;return r?t.createElement(f,i(i({ref:n},p),{},{components:r})):t.createElement(f,i({ref:n},p))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},95049:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(58168),o=(r(96540),r(15680));const a={title:"Lowest Common Ancestor of a Binary Tree"},i=void 0,l={unversionedId:"binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree",id:"binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree",title:"Lowest Common Ancestor of a Binary Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree.md",sourceDirName:"binary-tree/recursion",slug:"/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree",permalink:"/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree",draft:!1,tags:[],version:"current",frontMatter:{title:"Lowest Common Ancestor of a Binary Tree"},sidebar:"docs",previous:{title:"Sum Root to Leaf Numbers",permalink:"/binary-tree/recursion/sum-root-to-leaf-numbers"},next:{title:"Lowest Common Ancestor of a Binary Tree II",permalink:"/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree-ii"}},s={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:c},m="wrapper";function u(e){let{components:n,...r}=e;return(0,o.yg)(m,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,o.yg)("p",null,"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree."),(0,o.yg)("p",null,"According to ",(0,o.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Lowest_common_ancestor"},"the definition of LCA on Wikipedia"),": \u201cThe lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow ",(0,o.yg)("strong",{parentName:"p"},"a node to be a descendant of itself"),").\u201d"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"        _______3______\n       /              \\\n    ___5__          ___1__\n   /      \\        /      \\\n   6      _2       0       8\n         /  \\\n         7   4\n")),(0,o.yg)("p",null,"For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition."),(0,o.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,o.yg)("p",null,"\u7528\u81ea\u5e95\u5411\u4e0a(bottom-up)\u7684\u601d\u8def\uff0c\u5148\u770b\u770b\u662f\u5426\u80fd\u5728",(0,o.yg)("inlineCode",{parentName:"p"},"root"),"\u7684\u5de6\u5b50\u6811\u4e2d\u627e\u5230",(0,o.yg)("inlineCode",{parentName:"p"},"p"),"\u6216",(0,o.yg)("inlineCode",{parentName:"p"},"q"),"\uff0c\u518d\u770b\u770b\u80fd\u5426\u5728\u53f3\u5b50\u6811\u4e2d\u627e\u5230\uff0c"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"\u5982\u679c\u4e24\u8fb9\u90fd\u80fd\u627e\u5230\uff0c\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148"),(0,o.yg)("li",{parentName:"ul"},"\u5982\u679c\u5de6\u8fb9\u6ca1\u627e\u5230\uff0c\u5219\u8bf4\u660e",(0,o.yg)("inlineCode",{parentName:"li"},"p"),"\u548c",(0,o.yg)("inlineCode",{parentName:"li"},"q"),"\u90fd\u5728\u53f3\u5b50\u6811"),(0,o.yg)("li",{parentName:"ul"},"\u5982\u679c\u53f3\u8fb9\u6ca1\u627e\u5230\uff0c\u5219\u8bf4\u660e",(0,o.yg)("inlineCode",{parentName:"li"},"p"),"\u548c",(0,o.yg)("inlineCode",{parentName:"li"},"q"),"\u90fd\u5728\u5de6\u5b50\u6811")),(0,o.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"// Lowest Common Ancestor of a Binary Tree\n// Time complexity: O(n), Space complexity: O(h)\npublic class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // if root is null or found p or q\n        if (root == null || root == p || root == q) return root;\n        // find p or q in the left subtree\n        final TreeNode left = lowestCommonAncestor(root.left, p, q);\n        // find p or q in the right subtree\n        final TreeNode right = lowestCommonAncestor(root.right, p, q);\n        if (left != null && right != null) return root;\n        else return left == null ? right : left;\n    }\n}\n")),(0,o.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/binary-tree/bst/lca-of-bst"},"LCA of BST")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree-ii"},"Lowest Common Ancestor of a Binary Tree II")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree-iii"},"Lowest Common Ancestor of a Binary Tree III"))))}u.isMDXComponent=!0}}]);