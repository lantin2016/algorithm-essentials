"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[6952],{15680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>d});var n=t(96540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),y=a,d=u["".concat(c,".").concat(y)]||u[y]||f[y]||i;return t?n.createElement(d,o(o({ref:r},p),{},{components:t})):n.createElement(d,o({ref:r},p))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},42010:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=t(58168),a=(t(96540),t(15680));const i={title:"Binary Tree Vertical Order Traversal"},o=void 0,l={unversionedId:"bfs/tree/binary-tree-vertical-order-traversal",id:"bfs/tree/binary-tree-vertical-order-traversal",title:"Binary Tree Vertical Order Traversal",description:"\u63cf\u8ff0",source:"@site/docs/bfs/tree/binary-tree-vertical-order-traversal.md",sourceDirName:"bfs/tree",slug:"/bfs/tree/binary-tree-vertical-order-traversal",permalink:"/bfs/tree/binary-tree-vertical-order-traversal",draft:!1,tags:[],version:"current",frontMatter:{title:"Binary Tree Vertical Order Traversal"},sidebar:"docs",previous:{title:"Binary Tree Level Order Traversal II",permalink:"/bfs/tree/binary-tree-level-order-traversal-ii"},next:{title:"Binary Tree Zigzag Level Order Traversal",permalink:"/bfs/tree/binary-tree-zigzag-level-order-traversal"}},c={},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],p={toc:s},u="wrapper";function f(e){let{components:r,...t}=e;return(0,a.yg)(u,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"TODO"),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u8bbe\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\u4e3a0\uff0c\u5bf9\u4e8e\u4efb\u4e00\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u82e5\u5176\u4f4d\u7f6e\u4e3a",(0,a.yg)("inlineCode",{parentName:"p"},"x"),"\uff0c\u8bbe\u5176\u5de6\u513f\u5b50\u7684\u4f4d\u7f6e\u4e3a",(0,a.yg)("inlineCode",{parentName:"p"},"x-1"),"\uff0c\u53f3\u513f\u5b50\u4f4d\u7f6e\u4e3a",(0,a.yg)("inlineCode",{parentName:"p"},"x+1"),"\u3002\u6309\u7167\u4ee5\u4e0a\u89c4\u5219bfs\u904d\u5386\u6574\u68f5\u6811\u7edf\u8ba1\u6240\u6709\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6309\u4f4d\u7f6e\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u6240\u6709\u8282\u70b9\u3002"),(0,a.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Binary Tree Vertical Order Traversal\n// Time complexity: O(nlogn)\n// Space complexity: O(n)\nclass Solution {\npublic:\n    vector<vector<int>> verticalOrder(TreeNode* root) {\n        vector<vector<int>> result;\n        if (!root) return result;\n\n        map<int, vector<int>> m;\n        queue<pair<int, TreeNode*>> q;\n        q.push({0, root});\n        while (!q.empty()) {\n            auto a = q.front(); q.pop();\n            m[a.first].push_back(a.second->val);\n            if (a.second->left) q.push({a.first - 1, a.second->left});\n            if (a.second->right) q.push({a.first + 1, a.second->right});\n        }\n        for (auto a : m) {\n            result.push_back(a.second);\n        }\n        return result;\n    }\n};\n")))}f.isMDXComponent=!0}}]);