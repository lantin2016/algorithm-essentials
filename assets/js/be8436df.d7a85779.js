"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7177],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(96540);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),o=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=o(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=o(t),v=s,m=p["".concat(l,".").concat(v)]||p[v]||d[v]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,i=new Array(a);i[0]=v;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u[p]="string"==typeof e?e:s,i[1]=u;for(var o=2;o<a;o++)i[o]=t[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(96540),s=t(20053);const a={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,i),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>d});var r=t(58168),s=t(96540),a=t(20053),i=t(92303),u=t(31682),l=t(86976),o=t(23104);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:n,block:t,defaultValue:i,values:p,groupId:d,className:v}=e,m=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=p??m.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),y=(0,u.X)(b,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===i?i:i??m.find((e=>e.props.default))?.props.value??m[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:h}=(0,l.x)(),[I,j]=(0,s.useState)(g),S=[],{blockElementScrollPositionUntilNextRender:_}=(0,o.a_)();if(null!=d){const e=f[d];null!=e&&e!==I&&b.some((n=>n.value===e))&&j(e)}const k=e=>{const n=e.currentTarget,t=S.indexOf(n),r=b[t].value;r!==I&&(_(n),j(r),null!=d&&h(d,String(r)))},L=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;n=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;n=S[t]??S[S.length-1];break}}n?.focus()};return s.createElement("div",{className:(0,a.A)("tabs-container",c.tabList)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},v)},b.map((e=>{let{value:n,label:t,attributes:i}=e;return s.createElement("li",(0,r.A)({role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,key:n,ref:e=>S.push(e),onKeyDown:L,onFocus:k,onClick:k},i,{className:(0,a.A)("tabs__item",c.tabItem,i?.className,{"tabs__item--active":I===n})}),t??n)}))),n?(0,s.cloneElement)(m.filter((e=>e.props.value===I))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},m.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==I})))))}function d(e){const n=(0,i.A)();return s.createElement(p,(0,r.A)({key:String(n)},e))}},33615:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>u,metadata:()=>o,toc:()=>p});var r=t(58168),s=(t(96540),t(15680)),a=t(4865),i=t(19365);const u={title:"Subsets II"},l=void 0,o={unversionedId:"brute-force/subsets-ii",id:"brute-force/subsets-ii",title:"Subsets II",description:"\u63cf\u8ff0",source:"@site/docs/brute-force/subsets-ii.md",sourceDirName:"brute-force",slug:"/brute-force/subsets-ii",permalink:"/brute-force/subsets-ii",draft:!1,tags:[],version:"current",frontMatter:{title:"Subsets II"},sidebar:"docs",previous:{title:"Subsets",permalink:"/brute-force/subsets"},next:{title:"Permutations",permalink:"/brute-force/permutations"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u9012\u5f52",id:"\u9012\u5f52",level:3},{value:"\u589e\u91cf\u6784\u9020\u6cd5",id:"\u589e\u91cf\u6784\u9020\u6cd5",level:4},{value:"\u4f4d\u5411\u91cf\u6cd5",id:"\u4f4d\u5411\u91cf\u6cd5",level:4},{value:"\u8fed\u4ee3",id:"\u8fed\u4ee3",level:3},{value:"\u589e\u91cf\u6784\u9020\u6cd5",id:"\u589e\u91cf\u6784\u9020\u6cd5-1",level:4},{value:"\u4e8c\u8fdb\u5236\u6cd5",id:"\u4e8c\u8fdb\u5236\u6cd5",level:4},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:p},v="wrapper";function m(e){let{components:n,...t}=e;return(0,s.yg)(v,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,s.yg)("p",null,"Given a collection of integers that might contain duplicates, ",(0,s.yg)("inlineCode",{parentName:"p"},"S"),", return all possible subsets."),(0,s.yg)("p",null,"Note:"),(0,s.yg)("p",null,"Elements in a subset must be in non-descending order.\nThe solution set must not contain duplicate subsets.\nFor example,\nIf ",(0,s.yg)("inlineCode",{parentName:"p"},"S = [1,2,2]"),", a solution is:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n")),(0,s.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,s.yg)("p",null,"\u8fd9\u9898\u6709\u91cd\u590d\u5143\u7d20\uff0c\u4f46\u672c\u8d28\u4e0a\uff0c\u8ddf\u4e0a\u4e00\u9898\u5f88\u7c7b\u4f3c\uff0c\u4e0a\u4e00\u9898\u4e2d\u5143\u7d20\u6ca1\u6709\u91cd\u590d\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u5143\u7d20\u53ea\u80fd\u9009 0 \u6216 1 \u6b21\uff0c\u8fd9\u91cc\u6269\u5145\u5230\u4e86\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u9009 0 \u5230\u82e5\u5e72\u6b21\u800c\u5df2\u3002"),(0,s.yg)("h3",{id:"\u9012\u5f52"},"\u9012\u5f52"),(0,s.yg)("h4",{id:"\u589e\u91cf\u6784\u9020\u6cd5"},"\u589e\u91cf\u6784\u9020\u6cd5"),(0,s.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c1\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> path = new ArrayList<>();\n\n        dfs(nums, 0, path, result);\n        return result;\n    }\n\n    private static void dfs(int[] nums, int start, List<Integer> path,\n                            List<List<Integer>> result) {\n        result.add(new ArrayList<Integer>(path));\n\n        for (int i = start; i < nums.length; i++) {\n            if (i != start && nums[i] == nums[i-1]) continue;\n            path.add(nums[i]);\n            dfs(nums, i + 1, path, result);\n            path.remove(path.size() - 1);\n        }\n    }\n}\n"))),(0,s.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c1\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &S) {\n        sort(S.begin(), S.end());  // \u5fc5\u987b\u6392\u5e8f\n\n        vector<vector<int> > result;\n        vector<int> path;\n\n        dfs(S, S.begin(), path, result);\n        return result;\n    }\n\nprivate:\n    static void dfs(const vector<int> &S, vector<int>::iterator start,\n            vector<int> &path, vector<vector<int> > &result) {\n        result.push_back(path);\n\n        for (auto i = start; i < S.end(); i++) {\n            if (i != start && *i == *(i-1)) continue;\n            path.push_back(*i);\n            dfs(S, i + 1, path, result);\n            path.pop_back();\n        }\n    }\n};\n")))),(0,s.yg)("p",null,"\u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c 2"),(0,s.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> path = new ArrayList<>(); // \u4e2d\u95f4\u7ed3\u679c\n\n        // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        HashMap<Integer, Integer> counterMap = new HashMap<>();\n        for (int i : nums) {\n            counterMap.put(i, counterMap.getOrDefault(i, 0) + 1);\n        }\n        // \u5c06HashMap\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\n        Pair[] counters = new Pair[counterMap.size()];\n        int i = 0;\n        for (Map.Entry<Integer, Integer> entry : counterMap.entrySet()) {\n            counters[i++] = new Pair(entry.getKey(), entry.getValue());\n        }\n        Arrays.sort(counters);\n\n        dfs(counters, 0, path, result);\n        return result;\n    }\n\n    private static void dfs(Pair[] counters, int step, List<Integer> path,\n                        List<List<Integer>> result) {\n        if (step == counters.length) {\n            result.add(new ArrayList<>(path));\n            return;\n        }\n\n        for (int i = 0; i <= counters[step].value; i++) {\n            for (int j = 0; j < i; ++j) {\n                path.add(counters[step].key);\n            }\n            dfs(counters, step + 1, path, result);\n            for (int j = 0; j < i; ++j) {\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n\n    static class Pair implements Comparable<Pair> {\n        int key;\n        int value;\n        public Pair(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n        @Override\n        public int compareTo(Pair o) {\n            if (this.key < o.key) return -1;\n            else if (this.key > o.key) return 1;\n            else {\n                return this.value - o.value;\n            }\n        }\n    }\n}\n"))),(0,s.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &nums) {\n        vector<vector<int> > result;\n        sort(nums.begin(), nums.end()); // \u5fc5\u987b\u6392\u5e8f\n\n        unordered_map<int, int> count_map; // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        for (int i : nums) {\n            if (count_map.find(i) != count_map.end())\n                count_map[i]++;\n            else\n                count_map[i] = 1;\n        }\n\n        // \u5c06map\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2avector\u91cc\n        vector<pair<int, int> > elems;\n        for (auto p : count_map) {\n            elems.push_back(p);\n        }\n        sort(elems.begin(), elems.end());\n        vector<int> path; // \u4e2d\u95f4\u7ed3\u679c\n\n        dfs(elems, 0, path, result);\n        return result;\n    }\n\nprivate:\n    static void dfs(const vector<pair<int, int> > &elems,\n            size_t step, vector<int> &path, vector<vector<int> > &result) {\n        if (step == elems.size()) {\n            result.push_back(path);\n            return;\n        }\n\n        for (int i = 0; i <= elems[step].second; i++) {\n            for (int j = 0; j < i; ++j) {\n                path.push_back(elems[step].first);\n            }\n            dfs(elems, step + 1, path, result);\n            for (int j = 0; j < i; ++j) {\n                path.pop_back();\n            }\n        }\n    }\n};\n")))),(0,s.yg)("h4",{id:"\u4f4d\u5411\u91cf\u6cd5"},"\u4f4d\u5411\u91cf\u6cd5"),(0,s.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Subsets II\n// \u4f4d\u5411\u91cf\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        List<List<Integer>> result = new ArrayList<>();\n        // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        HashMap<Integer, Integer> counterMap = new HashMap<>();\n        for (int i : nums) {\n            counterMap.put(i, counterMap.getOrDefault(i, 0) + 1);\n        }\n        // \u5c06HashMap\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\n        Pair[] counters = new Pair[counterMap.size()];\n        int i = 0;\n        for (Map.Entry<Integer, Integer> entry : counterMap.entrySet()) {\n            counters[i++] = new Pair(entry.getKey(), entry.getValue());\n        }\n        Arrays.sort(counters);\n\n        // \u6bcf\u4e2a\u5143\u7d20\u9009\u62e9\u4e86\u591a\u5c11\u4e2a\n        HashMap<Integer, Integer> selected = new HashMap<>();\n        for (Pair p : counters) {\n            selected.put(p.key, 0 );\n        }\n\n        dfs(nums, counters, selected, 0, result);\n        return result;\n    }\n\n    private static void dfs(int[] nums, Pair[] counters, HashMap<Integer, Integer> selected,\n                            int step, List<List<Integer>> result) {\n        if (step == counters.length) {\n            ArrayList<Integer> subset = new ArrayList<>();\n            for (Pair p : counters) {\n                for (int i = 0; i < selected.get(p.key); ++i) {\n                    subset.add(p.key);\n                }\n            }\n            result.add(subset);\n            return;\n        }\n\n        for (int i = 0; i <= counters[step].value; i++) {\n            selected.put(counters[step].key, i);\n            dfs(nums, counters, selected, step + 1, result);\n        }\n    }\n    static class Pair implements Comparable<Pair> {\n        int key;\n        int value;\n        public Pair(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int compareTo(Pair o) {\n            if (this.key < o.key) return -1;\n            else if (this.key > o.key) return 1;\n            else {\n                return this.value - o.value;\n            }\n        }\n    }\n}\n"))),(0,s.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Subsets II\n// \u4f4d\u5411\u91cf\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &nums) {\n        vector<vector<int> > result; // \u5fc5\u987b\u6392\u5e8f\n        sort(nums.begin(), nums.end());\n        // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        unordered_map<int, int> count_map;\n        for (int i : nums) {\n            if (count_map.find(i) != count_map.end())\n                count_map[i]++;\n            else\n                count_map[i] = 1;\n        }\n        // \u5c06map\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2avector\u91cc\n        vector<pair<int, int> > counters;\n        for (auto p : count_map) {\n            counters.push_back(p);\n        }\n        sort(counters.begin(), counters.end());\n\n        // \u6bcf\u4e2a\u5143\u7d20\u9009\u62e9\u4e86\u591a\u5c11\u4e2a\n        unordered_map<int, int> selected;\n        for (auto p : counters) {\n            selected[p.first] = 0;\n        }\n\n        dfs(nums, counters, selected, 0, result);\n        return result;\n    }\n\nprivate:\n    static void dfs(const vector<int> &S, const vector<pair<int, int> >& counters,\n            unordered_map<int, int>& selected, size_t step, vector<vector<int> > &result) {\n        if (step == counters.size()) {\n            vector<int> subset;\n            for (auto p : counters) {\n                for (int i = 0; i < selected[p.first]; ++i) {\n                    subset.push_back(p.first);\n                }\n            }\n            result.push_back(subset);\n            return;\n        }\n\n        for (int i = 0; i <= counters[step].second; i++) {\n            selected[counters[step].first] = i;\n            dfs(S, counters, selected, step + 1, result);\n        }\n    }\n};\n")))),(0,s.yg)("h3",{id:"\u8fed\u4ee3"},"\u8fed\u4ee3"),(0,s.yg)("h4",{id:"\u589e\u91cf\u6784\u9020\u6cd5-1"},"\u589e\u91cf\u6784\u9020\u6cd5"),(0,s.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        List<List<Integer>> result = new ArrayList<>();\n        result.add(new ArrayList<Integer>());\n\n        int previous_size = 0;\n        for (int i = 0; i < nums.length; ++i) {\n            final int size = result.size();\n            for (int j = 0; j < size; ++j) {\n                if (i == 0 || nums[i] != nums[i-1] || j >= previous_size) {\n                    result.add(new ArrayList<>(result.get(j)));\n                    result.get(result.size() - 1).add(nums[i]);\n                }\n            }\n            previous_size = size;\n        }\n        return result;\n    }\n}\n"))),(0,s.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &S) {\n        sort(S.begin(), S.end()); // \u5fc5\u987b\u6392\u5e8f\n        vector<vector<int> > result(1);\n\n        size_t previous_size = 0;\n        for (size_t i = 0; i < S.size(); ++i) {\n            const size_t size = result.size();\n            for (size_t j = 0; j < size; ++j) {\n                if (i == 0 || S[i] != S[i-1] || j >= previous_size) {\n                    result.push_back(result[j]);\n                    result.back().push_back(S[i]);\n                }\n            }\n            previous_size = size;\n        }\n        return result;\n    }\n};\n")))),(0,s.yg)("h4",{id:"\u4e8c\u8fdb\u5236\u6cd5"},"\u4e8c\u8fdb\u5236\u6cd5"),(0,s.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-java"},"// Subsets II\n// \u4e8c\u8fdb\u5236\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        // \u7528 set \u53bb\u91cd\uff0c\u4e0d\u80fd\u7528 unordered_set\uff0c\u56e0\u4e3a\u8f93\u51fa\u8981\u6c42\u6709\u5e8f\n        LinkedHashSet<ArrayList<Integer>> result = new LinkedHashSet<>();\n        final int n = nums.length;\n        ArrayList<Integer> v = new ArrayList<>();\n\n        for (int i = 0; i < 1 << n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if ((i & 1 << j) > 0)\n                    v.add(nums[j]);\n            }\n            result.add(new ArrayList<>(v));\n            v.clear();\n        }\n        List<List<Integer>> realResult = new ArrayList<>();\n        for (ArrayList<Integer> list : result) {\n            realResult.add(list);\n        }\n        return realResult;\n    }\n}\n"))),(0,s.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"// Subsets II\n// \u4e8c\u8fdb\u5236\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &S) {\n        sort(S.begin(), S.end()); // \u5fc5\u987b\u6392\u5e8f\n        // \u7528 set \u53bb\u91cd\uff0c\u4e0d\u80fd\u7528 unordered_set\uff0c\u56e0\u4e3a\u8f93\u51fa\u8981\u6c42\u6709\u5e8f\n        set<vector<int> > result;\n        const size_t n = S.size();\n        vector<int> v;\n\n        for (size_t i = 0; i < 1U << n; ++i) {\n            for (size_t j = 0; j < n; ++j) {\n                if (i & 1 << j)\n                    v.push_back(S[j]);\n            }\n            result.insert(v);\n            v.clear();\n        }\n        vector<vector<int> > real_result;\n        copy(result.begin(), result.end(), back_inserter(real_result));\n        return real_result;\n    }\n};\n")))),(0,s.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"/brute-force/subsets"},"Subsets"))))}m.isMDXComponent=!0}}]);