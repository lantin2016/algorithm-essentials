"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3966],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),g=r,y=m["".concat(s,".").concat(g)]||m[g]||c[g]||o;return t?i.createElement(y,a(a({ref:n},p),{},{components:t})):i.createElement(y,a({ref:n},p))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<o;u++)a[u]=t[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},80777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=t(58168),r=(t(96540),t(15680));const o={title:"Missing Number"},a=void 0,l={unversionedId:"bitwise-operations/missing-number",id:"bitwise-operations/missing-number",title:"Missing Number",description:"\u63cf\u8ff0",source:"@site/docs/bitwise-operations/missing-number.md",sourceDirName:"bitwise-operations",slug:"/bitwise-operations/missing-number",permalink:"/bitwise-operations/missing-number",draft:!1,tags:[],version:"current",frontMatter:{title:"Missing Number"},sidebar:"docs",previous:{title:"Power of Two",permalink:"/bitwise-operations/power-of-two"},next:{title:"Maximum Product of Word Lengths",permalink:"/bitwise-operations/maximum-product-of-word-lengths"}},s={},u=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u89e3\u6cd5 1",id:"\u89e3\u6cd5-1",level:3},{value:"\u89e3\u6cd5 2",id:"\u89e3\u6cd5-2",level:3},{value:"\u89e3\u6cd5 3",id:"\u89e3\u6cd5-3",level:3}],p={toc:u},m="wrapper";function c(e){let{components:n,...t}=e;return(0,r.yg)(m,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"Given an array containing ",(0,r.yg)("inlineCode",{parentName:"p"},"n")," distinct numbers taken from ",(0,r.yg)("inlineCode",{parentName:"p"},"0, 1, 2, ..., n"),", find the one that is missing from the array."),(0,r.yg)("p",null,"For example,"),(0,r.yg)("p",null,"Given nums = ",(0,r.yg)("inlineCode",{parentName:"p"},"[0, 1, 3]")," return ",(0,r.yg)("inlineCode",{parentName:"p"},"2"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note"),":"),(0,r.yg)("p",null,"Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?"),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u672c\u9898\u7684\u610f\u601d\u662f\uff0c\u4ece 1 \u5230 n \u7684\u6574\u6570\uff0c\u5176\u4e2d\u67d0\u4e2a\u6570\u4e22\u5931\u4e86\uff0c\u66ff\u4ee3\u5b83\u7684\u662f 0\u3002\u8981\u6211\u4eec\u627e\u51fa\u8fd9\u4e2a\u4e22\u5931\u7684\u6570\u3002"),(0,r.yg)("p",null,"\u65b9\u6cd5 1\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u516c\u5f0f\u8ba1\u7b97\u51fa\u4ece 1 \u5230 n \u7684\u548c\uff0c\u51cf\u53bb\u5b9e\u9645\u6570\u7ec4\u7684\u603b\u548c\uff0c\u5dee\u503c\u5c31\u662f\u90a3\u4e2a\u4e22\u5931\u7684\u6570\u3002"),(0,r.yg)("p",null,"\u65b9\u6cd5 2\uff0c\u5229\u7528\u5f02\u6216\u4f4d\u8fd0\u7b97\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u4e0e 1 \u5230 n \u8fdb\u884c\u6309\u4f4d\u5f02\u6216\uff0c\u6700\u540e\u5269\u4e0b\u7684\uff0c\u5c31\u662f\u4e22\u5931\u7684\u6570\u3002"),(0,r.yg)("p",null,"\u65b9\u6cd5 3\uff0c\u4e8c\u5206\u67e5\u627e\u3002\u9996\u5148\u628a\u6570\u7ec4\u6392\u5e8f\uff0c\u8bbe\u4e2d\u95f4\u5143\u7d20\u4e3a",(0,r.yg)("inlineCode",{parentName:"p"},"nums[mid]"),"\uff0c\u5982\u679c",(0,r.yg)("inlineCode",{parentName:"p"},"nums[mid]"),"\u7684\u503c\u5927\u4e8e\u5176\u4e0b\u6807\uff0c\u8bf4\u660e\u4e22\u5931\u7684\u6570\u5b57\u5728\u5de6\u8fb9\uff0c\u53cd\u4e4b\u5219\u5728\u53f3\u8fb9\u3002\u65f6\u95f4\u590d\u6742\u5ea6",(0,r.yg)("inlineCode",{parentName:"p"},"O(nlogn)"),"\uff0c\u6bd4\u524d\u9762\u4e24\u4e2a\u65b9\u6cd5\u6162\uff0c\u4f46\u662f\u5982\u679c\u9898\u76ee\u7ed9\u7684\u6570\u7ec4\u662f\u4e8b\u5148\u6392\u597d\u5e8f\u7684\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u662f",(0,r.yg)("inlineCode",{parentName:"p"},"O(log n)"),"\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u662f\u5f88\u6709\u610f\u4e49\u7684\u3002"),(0,r.yg)("h3",{id:"\u89e3\u6cd5-1"},"\u89e3\u6cd5 1"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Missing Number\n// Time Complexity: O(n), Space Complexity: O(1)\npublic class Solution {\n    public int missingNumber(int[] nums) {\n        int sum = 0;\n        for (int x : nums) {\n            sum += x;\n        }\n        final int n = nums.length;\n        final int sumExpected = (n * (n + 1)) / 2;\n        return sumExpected - sum;\n    }\n}\n")),(0,r.yg)("h3",{id:"\u89e3\u6cd5-2"},"\u89e3\u6cd5 2"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Missing Number\n// Time Complexity: O(n), Space Complexity: O(1)\npublic class Solution {\n    public int missingNumber(int[] nums) {\n        int result = 0;\n        for (int i = 0; i < nums.length; ++i) {\n            result ^= (i+1) ^ nums[i];\n        }\n        return result;\n    }\n}\n")),(0,r.yg)("h3",{id:"\u89e3\u6cd5-3"},"\u89e3\u6cd5 3"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Missing Number\n// Time Complexity: O(nlogn), Space Complexity: O(1)\npublic class Solution {\n    public int missingNumber(int[] nums) {\n        Arrays.sort(nums);\n        int begin = 0;\n        int end = nums.length;\n        while (begin != end) {\n            final int mid = begin + (end - begin) / 2;\n            if (mid < nums[mid]) end = mid;\n            else begin = mid + 1;\n        }\n        return end;\n    }\n}\n")))}c.isMDXComponent=!0}}]);