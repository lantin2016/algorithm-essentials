"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[9971],{15680:(n,t,e)=>{e.d(t,{xA:()=>u,yg:()=>g});var a=e(96540);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function s(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?s(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):s(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function l(n,t){if(null==n)return{};var e,a,r=function(n,t){if(null==n)return{};var e,a,r={},s=Object.keys(n);for(a=0;a<s.length;a++)e=s[a],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)e=s[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var p=a.createContext({}),o=function(n){var t=a.useContext(p),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},u=function(n){var t=o(n.components);return a.createElement(p.Provider,{value:t},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(n,t){var e=n.components,r=n.mdxType,s=n.originalType,p=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),m=o(e),d=r,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||s;return e?a.createElement(g,i(i({ref:t},u),{},{components:e})):a.createElement(g,i({ref:t},u))}));function g(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var s=e.length,i=new Array(s);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=n,l[m]="string"==typeof n?n:r,i[1]=l;for(var o=2;o<s;o++)i[o]=e[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},19365:(n,t,e)=>{e.d(t,{A:()=>i});var a=e(96540),r=e(20053);const s={tabItem:"tabItem_Ymn6"};function i(n){let{children:t,hidden:e,className:i}=n;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:e},t)}},4865:(n,t,e)=>{e.d(t,{A:()=>c});var a=e(58168),r=e(96540),s=e(20053),i=e(92303),l=e(31682),p=e(86976),o=e(23104);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function m(n){const{lazy:t,block:e,defaultValue:i,values:m,groupId:c,className:d}=n,g=r.Children.map(n.children,(n=>{if((0,r.isValidElement)(n)&&"value"in n.props)return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??g.map((n=>{let{props:{value:t,label:e,attributes:a}}=n;return{value:t,label:e,attributes:a}})),y=(0,l.X)(v,((n,t)=>n.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===i?i:i??g.find((n=>n.props.default))?.props.value??g[0].props.value;if(null!==b&&!v.some((n=>n.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${v.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:f}=(0,p.x)(),[N,j]=(0,r.useState)(b),w=[],{blockElementScrollPositionUntilNextRender:P}=(0,o.a_)();if(null!=c){const n=h[c];null!=n&&n!==N&&v.some((t=>t.value===n))&&j(n)}const O=n=>{const t=n.currentTarget,e=w.indexOf(t),a=v[e].value;a!==N&&(P(t),j(a),null!=c&&f(c,String(a)))},A=n=>{let t=null;switch(n.key){case"ArrowRight":{const e=w.indexOf(n.currentTarget)+1;t=w[e]??w[0];break}case"ArrowLeft":{const e=w.indexOf(n.currentTarget)-1;t=w[e]??w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,s.A)("tabs-container",u.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":e},d)},v.map((n=>{let{value:t,label:e,attributes:i}=n;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:n=>w.push(n),onKeyDown:A,onFocus:O,onClick:O},i,{className:(0,s.A)("tabs__item",u.tabItem,i?.className,{"tabs__item--active":N===t})}),e??t)}))),t?(0,r.cloneElement)(g.filter((n=>n.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((n,t)=>(0,r.cloneElement)(n,{key:t,hidden:n.props.value!==N})))))}function c(n){const t=(0,i.A)();return r.createElement(m,(0,a.A)({key:String(t)},n))}},29914:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=e(58168),r=(e(96540),e(15680)),s=e(4865),i=e(19365);const l={title:"Palindrome Partitioning"},p=void 0,o={unversionedId:"dfs/palindrome-partitioning",id:"dfs/palindrome-partitioning",title:"Palindrome Partitioning",description:"\u63cf\u8ff0",source:"@site/docs/dfs/palindrome-partitioning.md",sourceDirName:"dfs",slug:"/dfs/palindrome-partitioning",permalink:"/dfs/palindrome-partitioning",draft:!1,tags:[],version:"current",frontMatter:{title:"Palindrome Partitioning"},sidebar:"docs",previous:{title:"Additive Number",permalink:"/dfs/additive-number"},next:{title:"Unique Paths",permalink:"/dfs/unique-paths"}},u={},m=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u6df1\u641c 1",id:"\u6df1\u641c-1",level:3},{value:"\u6df1\u641c 2",id:"\u6df1\u641c-2",level:3},{value:"\u52a8\u89c4",id:"\u52a8\u89c4",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],c={toc:m},d="wrapper";function g(n){let{components:t,...e}=n;return(0,r.yg)(d,(0,a.A)({},c,e,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"Given a string s, partition s such that every substring of the partition is a palindrome."),(0,r.yg)("p",null,"Return all possible palindrome partitioning of s."),(0,r.yg)("p",null,"For example, given ",(0,r.yg)("inlineCode",{parentName:"p"},'s = "aab"'),",\nReturn"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'  [\n    ["aa","b"],\n    ["a","a","b"]\n  ]\n')),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u5728\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u5224\u65ad\u4e2d\u95f4\u7ed3\u679c\u662f\u5426\u4e3a\u5408\u6cd5\u7ed3\u679c\uff0c\u7528\u56de\u6eaf\u6cd5\u3002"),(0,r.yg)("p",null,"\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5b57\u7b26\u4e32\uff0c\u6709",(0,r.yg)("inlineCode",{parentName:"p"},"n-1"),"\u4e2a\u5730\u65b9\u53ef\u4ee5\u780d\u65ad\uff0c\u6bcf\u4e2a\u5730\u65b9\u53ef\u65ad\u53ef\u4e0d\u65ad\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u4e3a",(0,r.yg)("span",{parentName:"p",className:"math math-inline"},(0,r.yg)("span",{parentName:"span",className:"katex"},(0,r.yg)("span",{parentName:"span",className:"katex-mathml"},(0,r.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.yg)("semantics",{parentName:"math"},(0,r.yg)("mrow",{parentName:"semantics"},(0,r.yg)("mi",{parentName:"mrow"},"O"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.yg)("msup",{parentName:"mrow"},(0,r.yg)("mn",{parentName:"msup"},"2"),(0,r.yg)("mrow",{parentName:"msup"},(0,r.yg)("mi",{parentName:"mrow"},"n"),(0,r.yg)("mo",{parentName:"mrow"},"\u2212"),(0,r.yg)("mn",{parentName:"mrow"},"1"))),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(2^{n-1})")))),(0,r.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.yg)("span",{parentName:"span",className:"mopen"},"("),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord"},"2"),(0,r.yg)("span",{parentName:"span",className:"msupsub"},(0,r.yg)("span",{parentName:"span",className:"vlist-t"},(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,r.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,r.yg)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,r.yg)("span",{parentName:"span",className:"mord mtight"},"1"))))))))),(0,r.yg)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.yg)("h3",{id:"\u6df1\u641c-1"},"\u6df1\u641c 1"),(0,r.yg)(s.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> result = new ArrayList<>();\n        List<String> path = new ArrayList<>(); // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0, 1);\n        return result;\n    }\n\n    // prev \u8868\u793a\u524d\u4e00\u4e2a\u9694\u677f, start \u8868\u793a\u5f53\u524d\u9694\u677f\n    private static void dfs(String s, List<String> path,\n                            List<List<String>> result, int prev, int start) {\n        if (start == s.length()) { // \u6700\u540e\u4e00\u4e2a\u9694\u677f\n            if (isPalindrome(s, prev, start - 1)) { // \u5fc5\u987b\u4f7f\u7528\n                path.add(s.substring(prev, start));\n                result.add(new ArrayList<>(path));\n                path.remove(path.size() - 1);\n            }\n            return;\n        }\n        // \u4e0d\u65ad\u5f00\n        dfs(s, path, result, prev, start + 1);\n        // \u5982\u679c[prev, start-1] \u662f\u56de\u6587\uff0c\u5219\u53ef\u4ee5\u65ad\u5f00\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00\uff08\u4e0a\u4e00\u884c\u5df2\u7ecf\u505a\u4e86\uff09\n        if (isPalindrome(s, prev, start - 1)) {\n            // \u65ad\u5f00\n            path.add(s.substring(prev, start));\n            dfs(s, path, result, start, start + 1);\n            path.remove(path.size() - 1);\n        }\n    }\n\n    private static boolean isPalindrome(String s, int start, int end) {\n        while (start < end && s.charAt(start) == s.charAt(end)) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n}\n"))),(0,r.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> result;\n        vector<string> path;  // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0, 1);\n        return result;\n    }\n\n    // prev \u8868\u793a\u524d\u4e00\u4e2a\u9694\u677f, start \u8868\u793a\u5f53\u524d\u9694\u677f\n    void dfs(string &s, vector<string>& path,\n            vector<vector<string>> &result, size_t prev, size_t start) {\n        if (start == s.size()) { // \u6700\u540e\u4e00\u4e2a\u9694\u677f\n            if (isPalindrome(s, prev, start - 1)) { // \u5fc5\u987b\u4f7f\u7528\n                path.push_back(s.substr(prev, start - prev));\n                result.push_back(path);\n                path.pop_back();\n            }\n            return;\n        }\n        // \u4e0d\u65ad\u5f00\n        dfs(s, path, result, prev, start + 1);\n        // \u5982\u679c[prev, start-1] \u662f\u56de\u6587\uff0c\u5219\u53ef\u4ee5\u65ad\u5f00\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00\uff08\u4e0a\u4e00\u884c\u5df2\u7ecf\u505a\u4e86\uff09\n        if (isPalindrome(s, prev, start - 1)) {\n            // \u65ad\u5f00\n            path.push_back(s.substr(prev, start - prev));\n            dfs(s, path, result, start, start + 1);\n            path.pop_back();\n        }\n    }\n\n    bool isPalindrome(const string &s, int start, int end) {\n        while (start < end && s[start] == s[end]) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n};\n")))),(0,r.yg)("h3",{id:"\u6df1\u641c-2"},"\u6df1\u641c 2"),(0,r.yg)("p",null,"\u53e6\u4e00\u79cd\u5199\u6cd5\uff0c\u66f4\u52a0\u7b80\u6d01\u3002\u8fd9\u79cd\u5199\u6cd5\u4e5f\u5728 Combination Sum, Combination Sum II \u4e2d\u51fa\u73b0\u8fc7\u3002"),(0,r.yg)(s.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> result = new ArrayList<>();\n        List<String> path = new ArrayList<>();  // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0);\n        return result;\n    }\n    // \u641c\u7d22\u5fc5\u987b\u4ee5s[start]\u5f00\u5934\u7684partition\u65b9\u6848\n    private static void dfs(String s, List<String> path,\n                            List<List<String>> result, int start) {\n        if (start == s.length()) {\n            result.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i < s.length(); i++) {\n            if (isPalindrome(s, start, i)) { // \u4ecei\u4f4d\u7f6e\u780d\u4e00\u5200\n                path.add(s.substring(start, i+1));\n                dfs(s, path, result, i + 1);  // \u7ee7\u7eed\u5f80\u4e0b\u780d\n                path.remove(path.size() - 1); // \u64a4\u9500\u4e0a\u4e0a\u884c\n            }\n        }\n    }\n    private static boolean isPalindrome(String s, int start, int end) {\n        while (start < end && s.charAt(start) == s.charAt(end)) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n}\n"))),(0,r.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> result;\n        vector<string> path;  // \u4e00\u4e2apartition\u65b9\u6848\n        DFS(s, path, result, 0);\n        return result;\n    }\n    // \u641c\u7d22\u5fc5\u987b\u4ee5s[start]\u5f00\u5934\u7684partition\u65b9\u6848\n    void DFS(string &s, vector<string>& path,\n            vector<vector<string>> &result, int start) {\n        if (start == s.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = start; i < s.size(); i++) {\n            if (isPalindrome(s, start, i)) { // \u4ecei\u4f4d\u7f6e\u780d\u4e00\u5200\n                path.push_back(s.substr(start, i - start + 1));\n                DFS(s, path, result, i + 1);  // \u7ee7\u7eed\u5f80\u4e0b\u780d\n                path.pop_back(); // \u64a4\u9500\u4e0a\u4e0a\u884c\n            }\n        }\n    }\n    bool isPalindrome(const string &s, int start, int end) {\n        while (start < end && s[start] == s[end]) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n};\n")))),(0,r.yg)("h3",{id:"\u52a8\u89c4"},"\u52a8\u89c4"),(0,r.yg)(s.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Palindrome Partitioning\n// \u52a8\u89c4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        final int n = s.length();\n        boolean[][] p = new boolean[n][n]; // whether s[i,j] is palindrome\n        for (int i = n - 1; i >= 0; --i)\n            for (int j = i; j < n; ++j)\n                p[i][j] = s.charAt(i) == s.charAt(j) &&\n                        ((j - i < 2) || p[i + 1][j - 1]);\n\n        List<List<String>>[] subPalins = new ArrayList[n]; // sub palindromes of s[0,i]\n        for (int i = 0; i < n; ++i) subPalins[i] = new ArrayList<>();\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i; j < n; ++j)\n                if (p[i][j]) {\n                    String palindrome = s.substring(i, j+1);\n                    if (j + 1 < n) {\n                        for (List<String> v : subPalins[j + 1]) {\n                            ArrayList<String> tmp = new ArrayList<>(v);\n                            tmp.add(0, palindrome);\n                            subPalins[i].add(tmp);\n                        }\n                    } else {\n                        ArrayList<String> tmp = new ArrayList<>();\n                        tmp.add(palindrome);\n                        subPalins[i].add(tmp);\n                    }\n                }\n        }\n        return subPalins[0];\n    }\n}\n"))),(0,r.yg)(i.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Palindrome Partitioning\n// \u52a8\u89c4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<string> > partition(string s) {\n        const int n = s.size();\n        bool p[n][n]; // whether s[i,j] is palindrome\n        fill_n(&p[0][0], n * n, false);\n        for (int i = n - 1; i >= 0; --i)\n            for (int j = i; j < n; ++j)\n                p[i][j] = s[i] == s[j] && ((j - i < 2) || p[i + 1][j - 1]);\n\n        vector<vector<string> > sub_palins[n]; // sub palindromes of s[0,i]\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i; j < n; ++j)\n                if (p[i][j]) {\n                    const string palindrome = s.substr(i, j - i + 1);\n                    if (j + 1 < n) {\n                        for (auto v : sub_palins[j + 1]) {\n                            v.insert(v.begin(), palindrome);\n                            sub_palins[i].push_back(v);\n                        }\n                    } else {\n                        sub_palins[i].push_back(vector<string> { palindrome });\n                    }\n                }\n        }\n        return sub_palins[0];\n    }\n};\n")))),(0,r.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/dp/palindrome-partitioning-ii"},"Palindrome Partitioning II"))))}g.isMDXComponent=!0}}]);