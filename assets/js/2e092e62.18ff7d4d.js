"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[6006],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=p(t),v=o,g=s["".concat(u,".").concat(v)]||s[v]||d[v]||a;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=v;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[s]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(96540),o=t(20053);const a={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.A)(a.tabItem,l),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>d});var r=t(58168),o=t(96540),a=t(20053),l=t(92303),i=t(31682),u=t(86976),p=t(23104);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function s(e){const{lazy:n,block:t,defaultValue:l,values:s,groupId:d,className:v}=e,g=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=s??g.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),f=(0,i.X)(m,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===l?l:l??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==y&&!m.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:b}=(0,u.x)(),[x,N]=(0,o.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:O}=(0,p.a_)();if(null!=d){const e=h[d];null!=e&&e!==x&&m.some((n=>n.value===e))&&N(e)}const k=e=>{const n=e.currentTarget,t=T.indexOf(n),r=m[t].value;r!==x&&(O(n),N(r),null!=d&&b(d,String(r)))},P=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}n?.focus()};return o.createElement("div",{className:(0,a.A)("tabs-container",c.tabList)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},v)},m.map((e=>{let{value:n,label:t,attributes:l}=e;return o.createElement("li",(0,r.A)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>T.push(e),onKeyDown:P,onFocus:k,onClick:k},l,{className:(0,a.A)("tabs__item",c.tabItem,l?.className,{"tabs__item--active":x===n})}),t??n)}))),n?(0,o.cloneElement)(g.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function d(e){const n=(0,l.A)();return o.createElement(s,(0,r.A)({key:String(n)},e))}},56307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=t(58168),o=(t(96540),t(15680)),a=t(4865),l=t(19365);const i={title:"Populating Next Right Pointers in Each Node II"},u=void 0,p={unversionedId:"binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",id:"binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",title:"Populating Next Right Pointers in Each Node II",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii.md",sourceDirName:"binary-tree/traversal",slug:"/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",permalink:"/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",draft:!1,tags:[],version:"current",frontMatter:{title:"Populating Next Right Pointers in Each Node II"},sidebar:"docs",previous:{title:"Flatten Binary Tree to Linked List",permalink:"/binary-tree/traversal/flatten-binary-tree-to-linked-list"},next:{title:"Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal"}},c={},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u9012\u5f52\u7248",id:"\u9012\u5f52\u7248",level:3},{value:"\u8fed\u4ee3\u7248",id:"\u8fed\u4ee3\u7248",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:s},v="wrapper";function g(e){let{components:n,...t}=e;return(0,o.yg)(v,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,o.yg)("p",null,'Follow up for problem "Populating Next Right Pointers in Each Node".'),(0,o.yg)("p",null,"What if the given tree could be any binary tree? Would your previous solution still work?"),(0,o.yg)("p",null,"Note: You may only use constant extra space."),(0,o.yg)("p",null,"For example,\nGiven the following binary tree,"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"         1\n       /  \\\n      2    3\n     / \\    \\\n    4   5    7\n")),(0,o.yg)("p",null,"After calling your function, the tree should look like:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"         1 -> NULL\n       /  \\\n      2 -> 3 -> NULL\n     / \\    \\\n    4-> 5 -> 7 -> NULL\n")),(0,o.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,o.yg)("p",null,"\u8981\u5904\u7406\u4e00\u4e2a\u8282\u70b9\uff0c\u53ef\u80fd\u9700\u8981\u6700\u53f3\u8fb9\u7684\u5144\u5f1f\u8282\u70b9\uff0c\u9996\u5148\u60f3\u5230\u7528\u5e7f\u641c\u3002\u4f46\u5e7f\u641c\u4e0d\u662f\u5e38\u6570\u7a7a\u95f4\u7684\uff0c\u672c\u9898\u8981\u6c42\u5e38\u6570\u7a7a\u95f4\u3002"),(0,o.yg)("p",null,"\u6ce8\u610f\uff0c\u8fd9\u9898\u7684\u4ee3\u7801\u539f\u5c01\u4e0d\u52a8\uff0c\u4e5f\u53ef\u4ee5\u89e3\u51b3 Populating Next Right Pointers in Each Node I."),(0,o.yg)("h3",{id:"\u9012\u5f52\u7248"},"\u9012\u5f52\u7248"),(0,o.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        if (root == null) return;\n\n        TreeLinkNode dummy = new TreeLinkNode(-1);\n        for (TreeLinkNode curr = root, prev = dummy;\n                curr != null; curr = curr.next) {\n            if (curr.left != null){\n                prev.next = curr.left;\n                prev = prev.next;\n            }\n            if (curr.right != null){\n                prev.next = curr.right;\n                prev = prev.next;\n            }\n        }\n        connect(dummy.next);\n    }\n}\n"))),(0,o.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (root == nullptr) return;\n\n        TreeLinkNode dummy(-1);\n        for (TreeLinkNode *curr = root, *prev = &dummy;\n                curr; curr = curr->next) {\n            if (curr->left != nullptr){\n                prev->next = curr->left;\n                prev = prev->next;\n            }\n            if (curr->right != nullptr){\n                prev->next = curr->right;\n                prev = prev->next;\n            }\n        }\n        connect(dummy.next);\n    }\n};\n")))),(0,o.yg)("h3",{id:"\u8fed\u4ee3\u7248"},"\u8fed\u4ee3\u7248"),(0,o.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        while (root!= null ) {\n            TreeLinkNode next = null; // the first node of next level\n            TreeLinkNode prev = null; // previous node on the same level\n            for (; root != null; root = root.next) {\n                if (next == null) next = root.left != null ? root.left : root.right;\n\n                if (root.left != null) {\n                    if (prev != null) prev.next = root.left;\n                    prev = root.left;\n                }\n                if (root.right != null) {\n                    if (prev != null) prev.next = root.right;\n                    prev = root.right;\n                }\n            }\n            root = next; // turn to next level\n        }\n    }\n}\n"))),(0,o.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        while (root) {\n            TreeLinkNode * next = nullptr; // the first node of next level\n            TreeLinkNode * prev = nullptr; // previous node on the same level\n            for (; root; root = root->next) {\n                if (!next) next = root->left ? root->left : root->right;\n\n                if (root->left) {\n                    if (prev) prev->next = root->left;\n                    prev = root->left;\n                }\n                if (root->right) {\n                    if (prev) prev->next = root->right;\n                    prev = root->right;\n                }\n            }\n            root = next; // turn to next level\n        }\n    }\n};\n")))),(0,o.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/binary-tree/recursion/populating-next-right-pointers-in-each-node"},"Populating Next Right Pointers in Each Node"))))}g.isMDXComponent=!0}}]);