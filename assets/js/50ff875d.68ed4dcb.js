"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2920],{15680:(e,r,n)=>{n.d(r,{xA:()=>p,yg:()=>y});var t=n(96540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},v=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),v=a,y=c["".concat(s,".").concat(v)]||c[v]||d[v]||l;return n?t.createElement(y,o(o({ref:r},p),{},{components:n})):t.createElement(y,o({ref:r},p))}));function y(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=v;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},19365:(e,r,n)=>{n.d(r,{A:()=>o});var t=n(96540),a=n(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:r,hidden:n,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,a.A)(l.tabItem,o),hidden:n},r)}},4865:(e,r,n)=>{n.d(r,{A:()=>d});var t=n(58168),a=n(96540),l=n(20053),o=n(92303),i=n(31682),s=n(86976),u=n(23104);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function c(e){const{lazy:r,block:n,defaultValue:o,values:c,groupId:d,className:v}=e,y=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=c??y.map((e=>{let{props:{value:r,label:n,attributes:t}}=e;return{value:r,label:n,attributes:t}})),f=(0,i.X)(m,((e,r)=>e.value===r.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===o?o:o??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==g&&!m.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:h}=(0,s.x)(),[T,N]=(0,a.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.a_)();if(null!=d){const e=b[d];null!=e&&e!==T&&m.some((r=>r.value===e))&&N(e)}const x=e=>{const r=e.currentTarget,n=w.indexOf(r),t=m[n].value;t!==T&&(O(r),N(t),null!=d&&h(d,String(t)))},k=e=>{let r=null;switch(e.key){case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;r=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;r=w[n]??w[w.length-1];break}}r?.focus()};return a.createElement("div",{className:(0,l.A)("tabs-container",p.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},v)},m.map((e=>{let{value:r,label:n,attributes:o}=e;return a.createElement("li",(0,t.A)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:e=>w.push(e),onKeyDown:k,onFocus:x,onClick:x},o,{className:(0,l.A)("tabs__item",p.tabItem,o?.className,{"tabs__item--active":T===r})}),n??r)}))),r?(0,a.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==T})))))}function d(e){const r=(0,o.A)();return a.createElement(c,(0,t.A)({key:String(r)},e))}},63788:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var t=n(58168),a=(n(96540),n(15680)),l=n(4865),o=n(19365);const i={title:"Binary Tree Postorder Traversal"},s=void 0,u={unversionedId:"binary-tree/traversal/binary-tree-postorder-traversal",id:"binary-tree/traversal/binary-tree-postorder-traversal",title:"Binary Tree Postorder Traversal",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/binary-tree-postorder-traversal.md",sourceDirName:"binary-tree/traversal",slug:"/binary-tree/traversal/binary-tree-postorder-traversal",permalink:"/binary-tree/traversal/binary-tree-postorder-traversal",draft:!1,tags:[],version:"current",frontMatter:{title:"Binary Tree Postorder Traversal"},sidebar:"docs",previous:{title:"Binary Tree Inorder Traversal",permalink:"/binary-tree/traversal/binary-tree-inorder-traversal"},next:{title:"Binary Tree Right Side View",permalink:"/binary-tree/traversal/binary-tree-right-side-view"}},p={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u6808",id:"\u6808",level:3},{value:"Morris \u540e\u5e8f\u904d\u5386",id:"morris-\u540e\u5e8f\u904d\u5386",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:c},v="wrapper";function y(e){let{components:r,...n}=e;return(0,a.yg)(v,(0,t.A)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.yg)("p",null,"Given a binary tree, return the ",(0,a.yg)("strong",{parentName:"p"},"postorder")," traversal of its nodes' values."),(0,a.yg)("p",null,"For example:\nGiven binary tree ",(0,a.yg)("inlineCode",{parentName:"p"},"{1,#,2,3}"),","),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"}," 1\n  \\\n   2\n  /\n 3\n")),(0,a.yg)("p",null,"return ",(0,a.yg)("inlineCode",{parentName:"p"},"[3,2,1]"),"."),(0,a.yg)("p",null,"Note: Recursive solution is trivial, could you do it iteratively?"),(0,a.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.yg)("p",null,"\u7528\u6808\u6216\u8005 Morris \u904d\u5386\u3002"),(0,a.yg)("h3",{id:"\u6808"},"\u6808"),(0,a.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Binary Tree Postorder Traversal\n// \u4f7f\u7528\u6808\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        Stack<TreeNode> s = new Stack<>();\n        /* p\uff0c\u6b63\u5728\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0cq\uff0c\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n        TreeNode p = root;\n        TreeNode q = null;\n\n        do {\n            while (p != null) { /* \u5f80\u5de6\u4e0b\u8d70*/\n                s.push(p);\n                p = p.left;\n            }\n            q = null;\n            while (!s.empty()) {\n                p = s.pop();\n                /* \u53f3\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4e4b*/\n                if (p.right == q) {\n                    result.add(p.val);\n                    q = p; /* \u4fdd\u5b58\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n                } else {\n                    /* \u5f53\u524d\u7ed3\u70b9\u4e0d\u80fd\u8bbf\u95ee\uff0c\u9700\u7b2c\u4e8c\u6b21\u8fdb\u6808*/\n                    s.push(p);\n                    /* \u5148\u5904\u7406\u53f3\u5b50\u6811*/\n                    p = p.right;\n                    break;\n                }\n            }\n        } while (!s.empty());\n\n        return result;\n    }\n}\n"))),(0,a.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Binary Tree Postorder Traversal\n// \u4f7f\u7528\u6808\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> result;\n        stack<const TreeNode *> s;\n        /* p\uff0c\u6b63\u5728\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0cq\uff0c\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n        const TreeNode *p = root, *q = nullptr;\n\n        do {\n            while (p != nullptr) { /* \u5f80\u5de6\u4e0b\u8d70*/\n                s.push(p);\n                p = p->left;\n            }\n            q = nullptr;\n            while (!s.empty()) {\n                p = s.top();\n                s.pop();\n                /* \u53f3\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4e4b*/\n                if (p->right == q) {\n                    result.push_back(p->val);\n                    q = p; /* \u4fdd\u5b58\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n                } else {\n                    /* \u5f53\u524d\u7ed3\u70b9\u4e0d\u80fd\u8bbf\u95ee\uff0c\u9700\u7b2c\u4e8c\u6b21\u8fdb\u6808*/\n                    s.push(p);\n                    /* \u5148\u5904\u7406\u53f3\u5b50\u6811*/\n                    p = p->right;\n                    break;\n                }\n            }\n        } while (!s.empty());\n\n        return result;\n    }\n};\n")))),(0,a.yg)("h3",{id:"morris-\u540e\u5e8f\u904d\u5386"},"Morris \u540e\u5e8f\u904d\u5386"),(0,a.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"// Binary Tree Postorder Traversal\n// Morris\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        TreeNode dummy = new TreeNode(-1);\n        dummy.left = root;\n        TreeNode cur = dummy;\n        TreeNode prev = null;\n\n        while (cur != null) {\n            if (cur.left == null) {\n                prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                cur = cur.right;\n            } else {\n                TreeNode node = cur.left;\n                while (node.right != null && node.right != cur)\n                    node = node.right;\n\n                if (node.right == null) { /* \u8fd8\u6ca1\u7ebf\u7d22\u5316\uff0c\u5219\u5efa\u7acb\u7ebf\u7d22 */\n                    node.right = cur;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur.left;\n                } else { /* \u5df2\u7ecf\u7ebf\u7d22\u5316\uff0c\u5219\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u5220\u9664\u7ebf\u7d22  */\n                    visit_reverse(cur.left, prev, result);\n                    prev.right = null;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur.right;\n                }\n            }\n        }\n        return result;\n    }\n    // \u9006\u8f6c\u8def\u5f84\n    private static void reverse(TreeNode from, TreeNode to) {\n        TreeNode x = from;\n        TreeNode y = from.right;\n        TreeNode z = null;\n        if (from == to) return;\n\n        while (x != to) {\n            z = y.right;\n            y.right = x;\n            x = y;\n            y = z;\n        }\n    }\n\n    // \u8bbf\u95ee\u9006\u8f6c\u540e\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\n    private static void visit_reverse(TreeNode from, TreeNode to,\n                                      List<Integer> result) {\n        TreeNode p = to;\n        reverse(from, to);\n\n        while (true) {\n            result.add(p.val);\n            if (p == from)\n                break;\n            p = p.right;\n        }\n\n        reverse(to, from);\n    }\n}\n"))),(0,a.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// Binary Tree Postorder Traversal\n// Morris\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> result;\n        TreeNode dummy(-1);\n        TreeNode *cur, *prev = nullptr;\n        std::function < void(const TreeNode*)> visit =\n            [&result](const TreeNode *node){\n            result.push_back(node->val);\n        };\n\n        dummy.left = root;\n        cur = &dummy;\n        while (cur != nullptr) {\n            if (cur->left == nullptr) {\n                prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                cur = cur->right;\n            } else {\n                TreeNode *node = cur->left;\n                while (node->right != nullptr && node->right != cur)\n                    node = node->right;\n\n                if (node->right == nullptr) { /* \u8fd8\u6ca1\u7ebf\u7d22\u5316\uff0c\u5219\u5efa\u7acb\u7ebf\u7d22 */\n                    node->right = cur;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur->left;\n                } else { /* \u5df2\u7ecf\u7ebf\u7d22\u5316\uff0c\u5219\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u5220\u9664\u7ebf\u7d22  */\n                    visit_reverse(cur->left, prev, visit);\n                    prev->right = nullptr;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur->right;\n                }\n            }\n        }\n        return result;\n    }\nprivate:\n    // \u9006\u8f6c\u8def\u5f84\n    static void reverse(TreeNode *from, TreeNode *to) {\n        TreeNode *x = from, *y = from->right, *z;\n        if (from == to) return;\n\n        while (x != to) {\n            z = y->right;\n            y->right = x;\n            x = y;\n            y = z;\n        }\n    }\n\n    // \u8bbf\u95ee\u9006\u8f6c\u540e\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\n    static void visit_reverse(TreeNode* from, TreeNode *to,\n                     std::function< void(const TreeNode*) >& visit) {\n        TreeNode *p = to;\n        reverse(from, to);\n\n        while (true) {\n            visit(p);\n            if (p == from)\n                break;\n            p = p->right;\n        }\n\n        reverse(to, from);\n    }\n};\n")))),(0,a.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/binary-tree/traversal/binary-tree-preorder-traversal"},"Binary Tree Preorder Traversal")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/binary-tree/traversal/binary-tree-inorder-traversal"},"Binary Tree Inorder Traversal")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/binary-tree/traversal/recover-binary-search-tree"},"Recover Binary Search Tree"))))}y.isMDXComponent=!0}}]);