"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1067],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(n),g=r,y=p["".concat(o,".").concat(g)]||p[g]||c[g]||s;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=g;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var m=2;m<s;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},19365:(e,t,n)=>{n.d(t,{A:()=>l});var a=n(96540),r=n(20053);const s={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,l),hidden:n},t)}},4865:(e,t,n)=>{n.d(t,{A:()=>c});var a=n(58168),r=n(96540),s=n(20053),l=n(92303),i=n(31682),o=n(86976),m=n(23104);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:t,block:n,defaultValue:l,values:p,groupId:c,className:g}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),d=(0,i.X)(h,((e,t)=>e.value===t.value));if(d.length>0)throw new Error(`Docusaurus error: Duplicate values "${d.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===l?l:l??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,o.x)(),[N,w]=(0,r.useState)(f),O=[],{blockElementScrollPositionUntilNextRender:x}=(0,m.a_)();if(null!=c){const e=b[c];null!=e&&e!==N&&h.some((t=>t.value===e))&&w(e)}const C=e=>{const t=e.currentTarget,n=O.indexOf(t),a=h[n].value;a!==N&&(x(t),w(a),null!=c&&v(c,String(a)))},S=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=O.indexOf(e.currentTarget)+1;t=O[n]??O[0];break}case"ArrowLeft":{const n=O.indexOf(e.currentTarget)-1;t=O[n]??O[O.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,s.A)("tabs-container",u.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},g)},h.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>O.push(e),onKeyDown:S,onFocus:C,onClick:C},l,{className:(0,s.A)("tabs__item",u.tabItem,l?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,r.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function c(e){const t=(0,l.A)();return r.createElement(p,(0,a.A)({key:String(t)},e))}},38958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>m,toc:()=>p});var a=n(58168),r=(n(96540),n(15680)),s=n(4865),l=n(19365);const i={title:"3Sum Closest"},o=void 0,m={unversionedId:"dual-pointers/3sum-closest",id:"dual-pointers/3sum-closest",title:"3Sum Closest",description:"\u63cf\u8ff0",source:"@site/docs/dual-pointers/3sum-closest.md",sourceDirName:"dual-pointers",slug:"/dual-pointers/3sum-closest",permalink:"/dual-pointers/3sum-closest",draft:!1,tags:[],version:"current",frontMatter:{title:"3Sum Closest"},sidebar:"docs",previous:{title:"3Sum",permalink:"/dual-pointers/3sum"},next:{title:"3Sum Smaller",permalink:"/dual-pointers/3sum-smaller"}},u={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],c={toc:p},g="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(g,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"Given an array ",(0,r.yg)("inlineCode",{parentName:"p"},"S")," of ",(0,r.yg)("inlineCode",{parentName:"p"},"n")," integers, find three integers in ",(0,r.yg)("inlineCode",{parentName:"p"},"S")," such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution."),(0,r.yg)("p",null,"For example, given array ",(0,r.yg)("inlineCode",{parentName:"p"},"S = {-1 2 1 -4}"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"target = 1"),"."),(0,r.yg)("p",null,"The sum that is closest to the target is 2. (",(0,r.yg)("inlineCode",{parentName:"p"},"-1 + 2 + 1 = 2"),")."),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u5148\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u5de6\u53f3\u5939\u903c\uff0c\u590d\u6742\u5ea6 ",(0,r.yg)("span",{parentName:"p",className:"math math-inline"},(0,r.yg)("span",{parentName:"span",className:"katex"},(0,r.yg)("span",{parentName:"span",className:"katex-mathml"},(0,r.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.yg)("semantics",{parentName:"math"},(0,r.yg)("mrow",{parentName:"semantics"},(0,r.yg)("mi",{parentName:"mrow"},"O"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.yg)("msup",{parentName:"mrow"},(0,r.yg)("mi",{parentName:"msup"},"n"),(0,r.yg)("mn",{parentName:"msup"},"2")),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n^2)")))),(0,r.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.yg)("span",{parentName:"span",className:"mopen"},"("),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.yg)("span",{parentName:"span",className:"msupsub"},(0,r.yg)("span",{parentName:"span",className:"vlist-t"},(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,r.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,r.yg)("span",{parentName:"span",className:"mclose"},")"))))),"\u3002"),(0,r.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.yg)(s.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(l.A,{value:"python",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"# 3Sum Closest\n# \u5148\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u5de6\u53f3\u5939\u903c\n# Time Complexity: O(n^2)\n# Space Complexity: from O(logn) to O(n), depending on the\n# implementation of the sorting algorithm\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        diff = float('inf')\n        nums.sort()\n        for i in range(len(nums)):\n            low, high = i + 1, len(nums) - 1\n            while low < high:\n                sum = nums[i] + nums[low] + nums[high]\n                if abs(target - sum) < abs(diff):\n                    diff = target - sum\n                if sum < target:\n                    low += 1\n                else:\n                    high -= 1\n        return target - diff\n"))),(0,r.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// 3Sum Closest\n// \u5148\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u5de6\u53f3\u5939\u903c\n// Time Complexity: O(n^2)\n// Space Complexity: from O(logn) to O(n), depending on the\n// implementation of the sorting algorithm\npublic class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        int diff = Integer.MAX_VALUE;\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; ++i) {\n            int low = i + 1, high = nums.length - 1; // two pointers\n            while(low < high) {\n                int sum = nums[i] + nums[low] + nums[high];\n                if (Math.abs(sum - target) < Math.abs(diff))\n                    diff = target - sum;\n\n                if (sum < target) ++low;\n                else              --high;\n            }\n        }\n        return target - diff;\n    }\n}\n"))),(0,r.yg)(l.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// 3Sum Closest\n// \u5148\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u5de6\u53f3\u5939\u903c\n// Time Complexity: O(n^2)\n// Space Complexity: from O(logn) to O(n), depending on the\n// implementation of the sorting algorithm\nclass Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        int diff = INT_MAX;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i < nums.size(); ++i) {\n            int low = i + 1, high = nums.size() - 1; // two pointers\n            while(low < high) {\n                int sum = nums[i] + nums[low] + nums[high];\n                if (abs(sum - target) < abs(diff))\n                    diff = target - sum;\n\n                if (sum < target) ++low;\n                else              --high;\n            }\n        }\n        return target - diff;\n    }\n};\n")))),(0,r.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/array/2sum"},"2Sum")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/dual-pointers/2sum-ii"},"2Sum II")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/dual-pointers/3sum"},"3Sum")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/dual-pointers/4sum"},"4Sum")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/array/4sum-ii"},"4Sum II"))))}y.isMDXComponent=!0}}]);