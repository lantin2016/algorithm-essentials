"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[8715],{15680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>g});var n=t(96540);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},v="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),v=u(t),d=l,g=v["".concat(s,".").concat(d)]||v[d]||p[d]||a;return t?n.createElement(g,o(o({ref:r},c),{},{components:t})):n.createElement(g,o({ref:r},c))}));function g(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[v]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<a;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19365:(e,r,t)=>{t.d(r,{A:()=>o});var n=t(96540),l=t(20053);const a={tabItem:"tabItem_Ymn6"};function o(e){let{children:r,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.A)(a.tabItem,o),hidden:t},r)}},4865:(e,r,t)=>{t.d(r,{A:()=>p});var n=t(58168),l=t(96540),a=t(20053),o=t(92303),i=t(31682),s=t(86976),u=t(23104);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){const{lazy:r,block:t,defaultValue:o,values:v,groupId:p,className:d}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=v??g.map((e=>{let{props:{value:r,label:t,attributes:n}}=e;return{value:r,label:t,attributes:n}})),y=(0,i.X)(f,((e,r)=>e.value===r.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===o?o:o??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:m,setTabGroupChoices:h}=(0,s.x)(),[T,O]=(0,l.useState)(b),_=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.a_)();if(null!=p){const e=m[p];null!=e&&e!==T&&f.some((r=>r.value===e))&&O(e)}const w=e=>{const r=e.currentTarget,t=_.indexOf(r),n=f[t].value;n!==T&&(N(r),O(n),null!=p&&h(p,String(n)))},L=e=>{let r=null;switch(e.key){case"ArrowRight":{const t=_.indexOf(e.currentTarget)+1;r=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(e.currentTarget)-1;r=_[t]??_[_.length-1];break}}r?.focus()};return l.createElement("div",{className:(0,a.A)("tabs-container",c.tabList)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},d)},f.map((e=>{let{value:r,label:t,attributes:o}=e;return l.createElement("li",(0,n.A)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:e=>_.push(e),onKeyDown:L,onFocus:w,onClick:w},o,{className:(0,a.A)("tabs__item",c.tabItem,o?.className,{"tabs__item--active":T===r})}),t??r)}))),r?(0,l.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((e,r)=>(0,l.cloneElement)(e,{key:r,hidden:e.props.value!==T})))))}function p(e){const r=(0,o.A)();return l.createElement(v,(0,n.A)({key:String(r)},e))}},72335:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>u,toc:()=>v});var n=t(58168),l=(t(96540),t(15680)),a=t(4865),o=t(19365);const i={title:"Binary Tree Zigzag Level Order Traversal"},s=void 0,u={unversionedId:"bfs/tree/binary-tree-zigzag-level-order-traversal",id:"bfs/tree/binary-tree-zigzag-level-order-traversal",title:"Binary Tree Zigzag Level Order Traversal",description:"\u63cf\u8ff0",source:"@site/docs/bfs/tree/binary-tree-zigzag-level-order-traversal.md",sourceDirName:"bfs/tree",slug:"/bfs/tree/binary-tree-zigzag-level-order-traversal",permalink:"/bfs/tree/binary-tree-zigzag-level-order-traversal",draft:!1,tags:[],version:"current",frontMatter:{title:"Binary Tree Zigzag Level Order Traversal"},sidebar:"docs",previous:{title:"Binary Tree Vertical Order Traversal",permalink:"/bfs/tree/binary-tree-vertical-order-traversal"},next:{title:"Word Ladder",permalink:"/bfs/graph/word-ladder"}},c={},v=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u8fed\u4ee3\u7248",id:"\u8fed\u4ee3\u7248",level:4},{value:"\u9012\u5f52\u7248",id:"\u9012\u5f52\u7248",level:4},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:v},d="wrapper";function g(e){let{components:r,...t}=e;return(0,l.yg)(d,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,l.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,l.yg)("p",null,"Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between)."),(0,l.yg)("p",null,"For example:"),(0,l.yg)("p",null,"Given binary tree ",(0,l.yg)("inlineCode",{parentName:"p"},"{3,9,20,#,#,15,7}"),","),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,l.yg)("p",null,"return its zigzag level order traversal as:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"[\n  [3],\n  [20,9],\n  [15,7]\n]\n")),(0,l.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,l.yg)("p",null,"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u7528\u4e00\u4e2a bool \u8bb0\u5f55\u662f\u4ece\u5de6\u5230\u53f3\u8fd8\u662f\u4ece\u53f3\u5230\u5de6\uff0c\u6bcf\u4e00\u5c42\u7ed3\u675f\u5c31\u7ffb\u8f6c\u4e00\u4e0b\u3002"),(0,l.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,l.yg)("h4",{id:"\u8fed\u4ee3\u7248"},"\u8fed\u4ee3\u7248"),(0,l.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"// Binary Tree Zigzag Level Order Traversal\n// \u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u7528\u4e00\u4e2abool\u8bb0\u5f55\u662f\u4ece\u5de6\u5230\u53f3\u8fd8\u662f\u4ece\u53f3\u5230\u5de6\uff0c\u6bcf\u4e00\u5c42\u7ed3\u675f\u5c31\u7ffb\u8f6c\u4e00\u4e0b\u3002\n// \u8fed\u4ee3\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        Queue<TreeNode> current = new LinkedList<>();\n        Queue<TreeNode> next = new LinkedList<>();\n        boolean left_to_right = true;\n\n        if(root == null) {\n            return result;\n        } else {\n            current.offer(root);\n        }\n\n        while (!current.isEmpty()) {\n            ArrayList<Integer> level = new ArrayList<>(); // elments in one level\n            while (!current.isEmpty()) {\n                TreeNode node = current.poll();\n                level.add(node.val);\n                if (node.left != null) next.offer(node.left);\n                if (node.right != null) next.offer(node.right);\n            }\n            if (!left_to_right) Collections.reverse(level);\n            result.add(level);\n            left_to_right = !left_to_right;\n            // swap\n            Queue<TreeNode> tmp = current;\n            current = next;\n            next = tmp;\n        }\n        return result;\n    }\n}\n"))),(0,l.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-cpp"},"// Binary Tree Zigzag Level Order Traversal\n// \u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u7528\u4e00\u4e2abool\u8bb0\u5f55\u662f\u4ece\u5de6\u5230\u53f3\u8fd8\u662f\u4ece\u53f3\u5230\u5de6\uff0c\u6bcf\u4e00\u5c42\u7ed3\u675f\u5c31\u7ffb\u8f6c\u4e00\u4e0b\u3002\n// \u8fed\u4ee3\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {\n        vector<vector<int> > result;\n        queue<TreeNode*> current, next;\n        bool left_to_right = true;\n\n        if(root == nullptr) {\n            return result;\n        } else {\n            current.push(root);\n        }\n\n        while (!current.empty()) {\n            vector<int> level; // elments in one level\n            while (!current.empty()) {\n                TreeNode* node = current.front();\n                current.pop();\n                level.push_back(node->val);\n                if (node->left != nullptr) next.push(node->left);\n                if (node->right != nullptr) next.push(node->right);\n            }\n            if (!left_to_right) reverse(level.begin(), level.end());\n            result.push_back(level);\n            left_to_right = !left_to_right;\n            swap(next, current);\n        }\n        return result;\n    }\n};\n")))),(0,l.yg)("h4",{id:"\u9012\u5f52\u7248"},"\u9012\u5f52\u7248"),(0,l.yg)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.yg)(o.A,{value:"java",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"// Binary Tree Zigzag Level Order Traversal\n// \u9012\u5f52\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        traverse(root, 1, result, true);\n        return result;\n    }\n\n    private static void traverse(TreeNode root, int level, List<List<Integer>> result,\n                                 boolean left_to_right) {\n        if (root == null) return;\n\n        if (level > result.size())\n            result.add(new ArrayList<>());\n\n        if (left_to_right)\n            result.get(level-1).add(root.val);\n        else\n            result.get(level-1).add(0, root.val);\n\n        traverse(root.left, level+1, result, !left_to_right);\n        traverse(root.right, level+1, result, !left_to_right);\n    }\n}\n"))),(0,l.yg)(o.A,{value:"cpp",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-cpp"},"// Binary Tree Zigzag Level Order Traversal\n// \u9012\u5f52\u7248\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {\n        vector<vector<int>> result;\n        traverse(root, 1, result, true);\n        return result;\n    }\n\n    void traverse(TreeNode *root, size_t level, vector<vector<int>> &result,\n            bool left_to_right) {\n        if (!root) return;\n\n        if (level > result.size())\n            result.push_back(vector<int>());\n\n        if (left_to_right)\n            result[level-1].push_back(root->val);\n        else\n            result[level-1].insert(result[level-1].begin(), root->val);\n\n        traverse(root->left, level+1, result, !left_to_right);\n        traverse(root->right, level+1, result, !left_to_right);\n    }\n};\n")))),(0,l.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"/bfs/tree/binary-tree-level-order-traversal"},"Binary Tree Level Order Traversal")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"/bfs/tree/binary-tree-level-order-traversal-ii"},"Binary Tree Level Order Traversal II"))))}g.isMDXComponent=!0}}]);