"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[242],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>v});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,v=c["".concat(o,".").concat(m)]||c[m]||d[m]||l;return t?a.createElement(v,s(s({ref:n},p),{},{components:t})):a.createElement(v,s({ref:n},p))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=m;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<l;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>s});var a=t(96540),r=t(20053);const l={tabItem:"tabItem_Ymn6"};function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,s),hidden:t},n)}},4865:(e,n,t)=>{t.d(n,{A:()=>d});var a=t(58168),r=t(96540),l=t(20053),s=t(92303),i=t(31682),o=t(86976),u=t(23104);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function c(e){const{lazy:n,block:t,defaultValue:s,values:c,groupId:d,className:m}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??v.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,i.X)(y,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===s?s:s??v.find((e=>e.props.default))?.props.value??v[0].props.value;if(null!==f&&!y.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:h}=(0,o.x)(),[x,N]=(0,r.useState)(f),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.a_)();if(null!=d){const e=g[d];null!=e&&e!==x&&y.some((n=>n.value===e))&&N(e)}const k=e=>{const n=e.currentTarget,t=w.indexOf(n),a=y[t].value;a!==x&&(O(n),N(a),null!=d&&h(d,String(a)))},T=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]??w[w.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,l.A)("tabs-container",p.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},m)},y.map((e=>{let{value:n,label:t,attributes:s}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>w.push(e),onKeyDown:T,onFocus:k,onClick:k},s,{className:(0,l.A)("tabs__item",p.tabItem,s?.className,{"tabs__item--active":x===n})}),t??n)}))),n?(0,r.cloneElement)(v.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function d(e){const n=(0,s.A)();return r.createElement(c,(0,a.A)({key:String(n)},e))}},19716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>v,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var a=t(58168),r=(t(96540),t(15680)),l=t(4865),s=t(19365);const i={title:"Swap Nodes in Pairs"},o=void 0,u={unversionedId:"linked-list/swap-nodes-in-pairs",id:"linked-list/swap-nodes-in-pairs",title:"Swap Nodes in Pairs",description:"\u63cf\u8ff0",source:"@site/docs/linked-list/swap-nodes-in-pairs.md",sourceDirName:"linked-list",slug:"/linked-list/swap-nodes-in-pairs",permalink:"/linked-list/swap-nodes-in-pairs",draft:!1,tags:[],version:"current",frontMatter:{title:"Swap Nodes in Pairs"},sidebar:"docs",previous:{title:"Rotate List",permalink:"/linked-list/rotate-list"},next:{title:"Reverse Nodes in k-Group",permalink:"/linked-list/reverse-nodes-in-k-group"}},p={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:c},m="wrapper";function v(e){let{components:n,...t}=e;return(0,r.yg)(m,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.yg)("p",null,"Given a linked list, swap every two adjacent nodes and return its head."),(0,r.yg)("p",null,"For example,\nGiven ",(0,r.yg)("inlineCode",{parentName:"p"},"1->2->3->4"),", you should return the list as ",(0,r.yg)("inlineCode",{parentName:"p"},"2->1->4->3"),"."),(0,r.yg)("p",null,"Your algorithm should use only constant space. You may ",(0,r.yg)("strong",{parentName:"p"},"not")," modify the values in the list, only nodes itself can be changed."),(0,r.yg)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.yg)("p",null,"\u65e0"),(0,r.yg)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(s.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"// Swap Nodes in Pairs\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) return head;\n        ListNode dummy = new ListNode(-1);\n        dummy.next = head;\n\n        for(ListNode prev = dummy, cur = prev.next, next = cur.next;\n                next != null;\n                prev = cur, cur = cur.next, next = cur != null ? cur.next: null) {\n            prev.next = next;\n            cur.next = next.next;\n            next.next = cur;\n        }\n        return dummy.next;\n    }\n}\n"))),(0,r.yg)(s.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Swap Nodes in Pairs\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    ListNode *swapPairs(ListNode *head) {\n        if (head == nullptr || head->next == nullptr) return head;\n        ListNode dummy(-1);\n        dummy.next = head;\n\n        for(ListNode *prev = &dummy, *cur = prev->next, *next = cur->next;\n                next;\n                prev = cur, cur = cur->next, next = cur ? cur->next: nullptr) {\n            prev->next = next;\n            cur->next = next->next;\n            next->next = cur;\n        }\n        return dummy.next;\n    }\n};\n")))),(0,r.yg)("p",null,"\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\u66f4\u7b80\u6d01\uff0c\u4f46\u9898\u76ee\u89c4\u5b9a\u4e86\u4e0d\u51c6\u8fd9\u6837\u505a\u3002"),(0,r.yg)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.yg)(s.A,{value:"java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\n// Swap Nodes in Pairs\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        ListNode p = head;\n\n        while (p != null && p.next != null) {\n            int tmp = p.val;\n            p.val = p.next.val;\n            p.next.val = tmp;\n\n            p = p.next.next;\n        }\n\n        return head;\n    }\n}\n"))),(0,r.yg)(s.A,{value:"cpp",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Swap Nodes in Pairs\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* p = head;\n\n        while (p && p->next) {\n            swap(p->val, p->next->val);\n            p = p->next->next;\n        }\n\n        return head;\n    }\n};\n")))),(0,r.yg)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/linked-list/reverse-nodes-in-k-group"},"Reverse Nodes in k-Group"))))}v.isMDXComponent=!0}}]);